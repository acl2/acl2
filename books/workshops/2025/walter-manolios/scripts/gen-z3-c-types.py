#!/bin/env python3
# SPDX-FileCopyrightText: Copyright (c) 2025 Andrew T. Walter <me@atwalter.com>
# SPDX-License-Identifier: MIT

"""

This script will automatically generate a file setting up foreign types
for the Z3 C API types that the Lisp-Z3 interface requires. To use it,
you must have the pyclibrary package installed, as well as the headers
for Z3's C API (you should have this if you have Z3 installed).

The Lisp-Z3 system expects the foreign types file to exist at
`src/ffi/z3-c-types.lisp`.

To use this script, you must provide the path to the z3.h header file.
The location of this file depends on your OS and how you installed Z3,
but here are a few options:

- If you installed Z3 using Homebrew, the path to the file should be
  the result of running `brew --prefix z3`, followed by `/include/z3.h`.

- If you installed Z3 using a Linux package manager, or by building from
  scratch, the file should be located at `/usr/include/z3.h` or
  `/usr/local/include/z3.h`.

Once you have the path to z3.h (denoted <z3-path> below), you can run
this script in the following way (assuming you're in the root directory
of this repo):

`python scripts/gen-z3-c-types.py <z3-path> -o <output-file>`

where <output-file> denotes a path to the output file that should be
created. Note that if <output-file> exists and you would like to
overwrite it, you will also need to pass the -f flag. For example, to
regenerate the `z3-c-types.lisp` file that Lisp-Z3 expects, I run the
following:

`python scripts/gen-z3-c-types.py <z3-path> -o src/ffi/z3-c-types.lisp -f`

This should be run after any time that gen-z3-grovel.py is run.

"""

from pyclibrary import CParser
import sys
from pathlib import Path
import argparse
from util import find_z3_headers, lispify_underscores

def lispify_c_name(name):
    return lispify_underscores(name.removeprefix("Z3_"))

def process_opaque_pointers(defs, outfile):
    # For whatever reason pyclibrary seems to categorize the opaque
    # pointer types as "variables"
    for name in defs['variables'].keys():
        #lispified = lispify_c_name(name)
        outfile.write(f'''
(define-foreign-type {name} ()
  ()
  (:actual-type {name}_raw)
  (:simple-parser {name}))
''')

def gen_ctype_file(defs, outfile):
    file_header = [
        ';; SPDX-FileCopyrightText: Copyright (c) 2020 Andrew T. Walter <me@atwalter.com>',
        ';; SPDX-License-Identifier: MIT',
        ';; THIS FILE IS AUTOGENERATED',
        ';; See scripts/gen-z3-c-types.py for more information',
        '(in-package :z3-c-types)'
    ]
    for line in file_header:
        outfile.write(line)
        outfile.write('\n')
    process_opaque_pointers(defs, outfile)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Automatically generate a foreign type file for the Z3 C API types that the Lisp-Z3 interface requires.')
    parser.add_argument('header', type=Path, help='The z3.h header file to read from.')
    parser.add_argument('-o', '--output', type=Path, help='The file to write the generated grovel code to. Outputs to stdout if not provided.')
    parser.add_argument('-f', '--force', action='store_true', help='Force overwriting')
    args = parser.parse_args()
    if args.output is not None and not args.force and args.output.exists():
        print('The output file already exists! If you would like to overwrite it, provide the -f argument. Exiting...')
        sys.exit(1)
    headers = find_z3_headers(args.header)
    if len(headers) == 0:
        print('Was unable to find the rest of the Z3 header files given the contents of the main header file. Exiting...')
        sys.exit(1)
    parser = CParser(headers)
    if args.output is None:
        gen_ctype_file(parser.defs, sys.stdout)
    else:
        with open(args.output, 'w') as f:
            gen_ctype_file(parser.defs, f)

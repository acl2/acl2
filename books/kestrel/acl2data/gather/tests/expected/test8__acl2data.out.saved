
2 ;failure_count_hints
2 ;total_count_hints
0 ;failure_count_hypotheses
0 ;total_count_hypotheses
0 ;failure_count_book_runes
0 ;total_count_book_runes
8 ;failure_count_single_rune
12 ;total_count_single_rune
((:SYSTEM .
          "kestrel/acl2data/gather/tests/runs/test8.lisp")
 (APP-ASSOC-REWRITE
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK (WITH-OUTPUT PROGN WITH-OUTPUT DEFTHMD))
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT
     (DEFTHM APP-ASSOC-REWRITE
       (EQUAL (APPEND (APPEND X Y) Z)
              (APPEND X Y Z))
       :HINTS (("Goal" :IN-THEORY (UNION-THEORIES '(CAR-CONS)
                                                  (CURRENT-THEORY :HERE))))))
  (:RULE-CLASSES (:REWRITE))
  (:USED-INDUCTION T)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:IN-THEORY (UNION-THEORIES '(CAR-CONS)
                                     (CURRENT-THEORY :HERE)))
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         (((NOT (CONSP X))
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (CAR (CONS (CAR X)
                             (BINARY-APPEND (CDR X) Y)))
                  (CAR X))))
         ((IMPLIES (AND (CONSP X)
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                          (CAR X))))
         (DEFTHM APP-ASSOC-REWRITE
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST
       (((:REWRITE CDR-CONS)
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         (((NOT (CONSP X))
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                 Z)
                  (CONS (CAR X)
                        (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                       Z)))))
         ((IMPLIES (AND (CONSP X)
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                  Z)
                          (CONS (CAR X)
                                (APPEND (APPEND (CDR X) Y) Z))))))
        ((:INDUCTION BINARY-APPEND)
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         NIL NIL)
        ((:REWRITE CAR-CONS)
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         (((NOT (CONSP X))
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (CONS (CAR (CONS (CAR X)
                                   (BINARY-APPEND (CDR X) Y)))
                        (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                       Z))
                  (CONS (CAR X)
                        (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                       Z)))))
         ((IMPLIES (AND (CONSP X)
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                (APPEND (APPEND (CDR X) Y) Z))
                          (CONS (CAR X)
                                (APPEND (APPEND (CDR X) Y) Z))))))
        ((:DEFINITION ENDP) :REMOVE)
        ((:DEFINITION BINARY-APPEND)
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         (((ENDP X)
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((IMPLIES (AND (NOT (ENDP X))
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (APPEND (APPEND X Y) Z)
                          (APPEND X Y Z)))))
        ((:DEFINITION NOT) :REMOVE)))
  (:SYMBOL-TABLE ((NOT . :BUILTIN)
                  (EQUAL . :BUILTIN)
                  (ENDP . :BUILTIN)
                  (CDR-CONS . :BUILTIN)
                  (CAR-CONS . :BUILTIN)
                  (BINARY-APPEND . :BUILTIN))))
 (APP-ASSOC-REWRITE-2
      (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z))))
      (:HASH 38295251)
      (:EXPANSION-STACK NIL)
      (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                              (BINARY-APPEND X (BINARY-APPEND Y Z))))))
      (:EVENT (DEFTHM APP-ASSOC-REWRITE-2
                (EQUAL (APPEND (APPEND X Y) Z)
                       (APPEND X Y Z))
                :HINTS (("Goal" :IN-THEORY (E/D (CAR-CONS) NIL)))))
      (:RULE-CLASSES (:REWRITE))
      (:USED-INDUCTION T)
      (:HYP-ALIST NIL)
      (:HINT-SETTING-ALIST
           (((:ENABLE CAR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (CAR (CONS (CAR X)
                                 (BINARY-APPEND (CDR X) Y)))
                      (CAR X))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                              (CAR X))))
             (DEFTHM APP-ASSOC-REWRITE-2
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))))))
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST
           (((:REWRITE CDR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                     Z)
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                      Z)
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:INDUCTION BINARY-APPEND)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             NIL NIL)
            ((:REWRITE CAR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (CONS (CAR (CONS (CAR X)
                                       (BINARY-APPEND (CDR X) Y)))
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z))
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                    (APPEND (APPEND (CDR X) Y) Z))
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:DEFINITION ENDP) :REMOVE)
            ((:DEFINITION BINARY-APPEND)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((ENDP X)
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (NOT (ENDP X))
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z)))))
            ((:DEFINITION NOT) :REMOVE)))
      (:SYMBOL-TABLE ((NOT . :BUILTIN)
                      (EQUAL . :BUILTIN)
                      (ENDP . :BUILTIN)
                      (CDR-CONS . :BUILTIN)
                      (CAR-CONS . :BUILTIN)
                      (BINARY-APPEND . :BUILTIN)))))

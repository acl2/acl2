
15 ;failure_count_hints
28 ;total_count_hints
2 ;failure_count_hypotheses
3 ;total_count_hypotheses
0 ;failure_count_book_runes
0 ;total_count_book_runes
23 ;failure_count_single_rune
38 ;total_count_single_rune
((:SYSTEM .
          "kestrel/acl2data/gather/tests/runs/test2.lisp")
 (APP-ASSOC-REWRITE
      (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z))))
      (:HASH 38295251)
      (:EXPANSION-STACK NIL)
      (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                              (BINARY-APPEND X (BINARY-APPEND Y Z))))))
      (:EVENT (DEFTHM APP-ASSOC-REWRITE
                (EQUAL (APPEND (APPEND X Y) Z)
                       (APPEND X Y Z))
                :HINTS (("Goal" :IN-THEORY (ENABLE APPEND CAR-CONS NTH)))))
      (:RULE-CLASSES (:REWRITE))
      (:USED-INDUCTION T)
      (:HYP-ALIST NIL)
      (:HINT-SETTING-ALIST
           (((:ENABLE BINARY-APPEND)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             NIL NIL
             (DEFTHM APP-ASSOC-REWRITE
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :IN-THEORY (ENABLE CAR-CONS NTH)))))
            ((:ENABLE CAR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (CAR (CONS (CAR X)
                                 (BINARY-APPEND (CDR X) Y)))
                      (CAR X))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                              (CAR X))))
             (DEFTHM APP-ASSOC-REWRITE
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :IN-THEORY (ENABLE APPEND NTH)))))
            ((:ENABLE NTH)
             :REMOVE
             (DEFTHM APP-ASSOC-REWRITE
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :IN-THEORY (ENABLE APPEND CAR-CONS)))))))
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST
           (((:REWRITE CDR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                     Z)
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                      Z)
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:INDUCTION BINARY-APPEND)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             NIL NIL)
            ((:REWRITE CAR-CONS)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (CONS (CAR (CONS (CAR X)
                                       (BINARY-APPEND (CDR X) Y)))
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z))
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                    (APPEND (APPEND (CDR X) Y) Z))
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:DEFINITION ENDP) :REMOVE)
            ((:DEFINITION BINARY-APPEND)
             (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((EQUAL (APPEND (APPEND X Y) Z)
                     (APPEND X Y Z)))
             (((ENDP X)
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (NOT (ENDP X))
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z)))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z)))))
            ((:DEFINITION NOT) :REMOVE)))
      (:SYMBOL-TABLE ((NTH . :BUILTIN)
                      (NOT . :BUILTIN)
                      (EQUAL . :BUILTIN)
                      (ENDP . :BUILTIN)
                      (CDR-CONS . :BUILTIN)
                      (CAR-CONS . :BUILTIN)
                      (BINARY-APPEND . :BUILTIN)
                      (APPEND . :BUILTIN))))
 (APP-ASSOC-BACKWARDS
  (:GOAL (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                (BINARY-APPEND (BINARY-APPEND X Y) Z)))
  (:HASH 1794091614)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                          (BINARY-APPEND (BINARY-APPEND X Y)
                                         Z)))))
  (:EVENT (DEFTHM APP-ASSOC-BACKWARDS
            (EQUAL (APPEND X Y Z)
                   (APPEND (APPEND X Y) Z))
            :HINTS (("Goal" :IN-THEORY (ENABLE APPEND CAR-CONS NTH)))))
  (:RULE-CLASSES (:REWRITE))
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:ENABLE BINARY-APPEND)
         :REMOVE
         (DEFTHM APP-ASSOC-BACKWARDS
           (EQUAL (APPEND X Y Z)
                  (APPEND (APPEND X Y) Z))
           :HINTS (("Goal" :IN-THEORY (ENABLE CAR-CONS NTH)))))
        ((:ENABLE CAR-CONS)
         :REMOVE
         (DEFTHM APP-ASSOC-BACKWARDS
           (EQUAL (APPEND X Y Z)
                  (APPEND (APPEND X Y) Z))
           :HINTS (("Goal" :IN-THEORY (ENABLE APPEND NTH)))))
        ((:ENABLE NTH)
         :REMOVE
         (DEFTHM APP-ASSOC-BACKWARDS
           (EQUAL (APPEND X Y Z)
                  (APPEND (APPEND X Y) Z))
           :HINTS (("Goal" :IN-THEORY (ENABLE APPEND CAR-CONS)))))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:REWRITE APP-ASSOC-REWRITE)
                 (((EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                          (BINARY-APPEND (BINARY-APPEND X Y) Z))))
                 ((EQUAL (APPEND X Y Z)
                         (APPEND (APPEND X Y) Z)))
                 NIL NIL)))
  (:SYMBOL-TABLE
      ((NTH . :BUILTIN)
       (EQUAL . :BUILTIN)
       (CAR-CONS . :BUILTIN)
       (BINARY-APPEND . :BUILTIN)
       (APPEND . :BUILTIN)
       (APP-ASSOC-REWRITE :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-1
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT (DEFTHM APP-ASSOC-1
            (EQUAL (APPEND (APPEND X Y) Z)
                   (APPEND X Y Z))
            :HINTS (("Goal" :IN-THEORY (E/D (APPEND CAR-CONS NTH)
                                            (APP-ASSOC-BACKWARDS))))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:ENABLE BINARY-APPEND)
         :REMOVE
         (DEFTHM APP-ASSOC-1
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (CAR-CONS NTH)
                                           (APP-ASSOC-BACKWARDS))))
           :RULE-CLASSES NIL))
        ((:ENABLE CAR-CONS)
         :REMOVE
         (DEFTHM APP-ASSOC-1
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (APPEND NTH)
                                           (APP-ASSOC-BACKWARDS))))
           :RULE-CLASSES NIL))
        ((:ENABLE NTH)
         :REMOVE
         (DEFTHM APP-ASSOC-1
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (APPEND CAR-CONS)
                                           (APP-ASSOC-BACKWARDS))))
           :RULE-CLASSES NIL))
        ((:DISABLE APP-ASSOC-BACKWARDS)
         :FAIL
         (DEFTHM APP-ASSOC-1
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (APPEND CAR-CONS NTH) NIL)))
           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:REWRITE APP-ASSOC-REWRITE)
                 (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                 ((EQUAL (APPEND (APPEND X Y) Z)
                         (APPEND X Y Z)))
                 NIL NIL)))
  (:SYMBOL-TABLE
    ((NTH . :BUILTIN)
     (EQUAL . :BUILTIN)
     (CAR-CONS . :BUILTIN)
     (BINARY-APPEND . :BUILTIN)
     (APPEND . :BUILTIN)
     (APP-ASSOC-REWRITE :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp")
     (APP-ASSOC-BACKWARDS :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-2
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT (DEFTHM APP-ASSOC-2
            (EQUAL (APPEND (APPEND X Y) Z)
                   (APPEND X Y Z))
            :HINTS (("Goal" :IN-THEORY (E/D NIL (APP-ASSOC-BACKWARDS))))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST (((:DISABLE APP-ASSOC-BACKWARDS)
                         :FAIL
                         (DEFTHM APP-ASSOC-2
                           (EQUAL (APPEND (APPEND X Y) Z)
                                  (APPEND X Y Z))
                           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:REWRITE APP-ASSOC-REWRITE)
                 (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                 ((EQUAL (APPEND (APPEND X Y) Z)
                         (APPEND X Y Z)))
                 NIL NIL)))
  (:SYMBOL-TABLE
    ((EQUAL . :BUILTIN)
     (BINARY-APPEND . :BUILTIN)
     (APP-ASSOC-REWRITE :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp")
     (APP-ASSOC-BACKWARDS :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-3
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT (DEFTHM APP-ASSOC-3
            (EQUAL (APPEND (APPEND X Y) Z)
                   (APPEND X Y Z))
            :HINTS (("Goal" :IN-THEORY (E/D NIL (NTH APP-ASSOC-BACKWARDS))))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:DISABLE NTH)
         :REMOVE
         (DEFTHM APP-ASSOC-3
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D NIL (APP-ASSOC-BACKWARDS))))
           :RULE-CLASSES NIL))
        ((:DISABLE APP-ASSOC-BACKWARDS)
         :FAIL
         (DEFTHM APP-ASSOC-3
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D NIL (NTH))))
           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:REWRITE APP-ASSOC-REWRITE)
                 (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                 ((EQUAL (APPEND (APPEND X Y) Z)
                         (APPEND X Y Z)))
                 NIL NIL)))
  (:SYMBOL-TABLE
    ((NTH . :BUILTIN)
     (EQUAL . :BUILTIN)
     (BINARY-APPEND . :BUILTIN)
     (APP-ASSOC-REWRITE :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp")
     (APP-ASSOC-BACKWARDS :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-4
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT (DEFTHM APP-ASSOC-4
            (EQUAL (APPEND (APPEND X Y) Z)
                   (APPEND X Y Z))
            :HINTS (("Goal" :IN-THEORY (E/D (NTH APP-ASSOC-REWRITE) NIL)))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:ENABLE NTH)
         :REMOVE
         (DEFTHM APP-ASSOC-4
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (APP-ASSOC-REWRITE) NIL)))
           :RULE-CLASSES NIL))
        ((:ENABLE APP-ASSOC-REWRITE)
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         NIL NIL
         (DEFTHM APP-ASSOC-4
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :IN-THEORY (E/D (NTH) NIL)))
           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:REWRITE APP-ASSOC-REWRITE)
                 (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                 ((EQUAL (APPEND (APPEND X Y) Z)
                         (APPEND X Y Z)))
                 NIL NIL)))
  (:SYMBOL-TABLE
      ((NTH . :BUILTIN)
       (EQUAL . :BUILTIN)
       (BINARY-APPEND . :BUILTIN)
       (APP-ASSOC-REWRITE :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-5
     (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                   (BINARY-APPEND X (BINARY-APPEND Y Z))))
     (:HASH 38295251)
     (:EXPANSION-STACK NIL)
     (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z))))))
     (:EVENT (DEFTHM APP-ASSOC-5
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :USE (APP-ASSOC-4)))
               :RULE-CLASSES NIL))
     (:RULE-CLASSES NIL)
     (:USED-INDUCTION NIL)
     (:HYP-ALIST NIL)
     (:HINT-SETTING-ALIST (((:USE (APP-ASSOC-4))
                            (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                                     (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                            ((EQUAL (APPEND (APPEND X Y) Z)
                                    (APPEND X Y Z)))
                            NIL NIL
                            (DEFTHM APP-ASSOC-5
                              (EQUAL (APPEND (APPEND X Y) Z)
                                     (APPEND X Y Z))
                              :RULE-CLASSES NIL))))
     (:BOOK-RUNES-ALIST NIL)
     (:RUNE-ALIST NIL)
     (:SYMBOL-TABLE
          ((EQUAL . :BUILTIN)
           (BINARY-APPEND . :BUILTIN)
           (APP-ASSOC-4 :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-5B
     (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                   (BINARY-APPEND X (BINARY-APPEND Y Z))))
     (:HASH 38295251)
     (:EXPANSION-STACK NIL)
     (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z))))))
     (:EVENT (DEFTHM APP-ASSOC-5B
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :USE APP-ASSOC-4))
               :RULE-CLASSES NIL))
     (:RULE-CLASSES NIL)
     (:USED-INDUCTION NIL)
     (:HYP-ALIST NIL)
     (:HINT-SETTING-ALIST (((:USE APP-ASSOC-4)
                            (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                                     (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                            ((EQUAL (APPEND (APPEND X Y) Z)
                                    (APPEND X Y Z)))
                            NIL NIL
                            (DEFTHM APP-ASSOC-5B
                              (EQUAL (APPEND (APPEND X Y) Z)
                                     (APPEND X Y Z))
                              :RULE-CLASSES NIL))))
     (:BOOK-RUNES-ALIST NIL)
     (:RUNE-ALIST NIL)
     (:SYMBOL-TABLE
          ((EQUAL . :BUILTIN)
           (BINARY-APPEND . :BUILTIN)
           (APP-ASSOC-4 :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-6
     (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                   (BINARY-APPEND X (BINARY-APPEND Y Z))))
     (:HASH 38295251)
     (:EXPANSION-STACK NIL)
     (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z))))))
     (:EVENT (DEFTHM APP-ASSOC-6
               (EQUAL (APPEND (APPEND X Y) Z)
                      (APPEND X Y Z))
               :HINTS (("Goal" :USE (APP-ASSOC-4 NTH)))
               :RULE-CLASSES NIL))
     (:RULE-CLASSES NIL)
     (:USED-INDUCTION NIL)
     (:HYP-ALIST NIL)
     (:HINT-SETTING-ALIST (((:USE-1 APP-ASSOC-4)
                            (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                                     (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                            ((EQUAL (APPEND (APPEND X Y) Z)
                                    (APPEND X Y Z)))
                            NIL NIL
                            (DEFTHM APP-ASSOC-6
                              (EQUAL (APPEND (APPEND X Y) Z)
                                     (APPEND X Y Z))
                              :HINTS (("Goal" :USE (NTH)))
                              :RULE-CLASSES NIL))
                           ((:USE-1 NTH)
                            :REMOVE
                            (DEFTHM APP-ASSOC-6
                              (EQUAL (APPEND (APPEND X Y) Z)
                                     (APPEND X Y Z))
                              :HINTS (("Goal" :USE (APP-ASSOC-4)))
                              :RULE-CLASSES NIL))))
     (:BOOK-RUNES-ALIST NIL)
     (:RUNE-ALIST NIL)
     (:SYMBOL-TABLE
          ((NTH . :BUILTIN)
           (EQUAL . :BUILTIN)
           (BINARY-APPEND . :BUILTIN)
           (APP-ASSOC-4 :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-7
  (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z))))
  (:HASH 38295251)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                          (BINARY-APPEND X (BINARY-APPEND Y Z))))))
  (:EVENT (DEFTHM APP-ASSOC-7
            (EQUAL (APPEND (APPEND X Y) Z)
                   (APPEND X Y Z))
            :HINTS (("Goal" :EXPAND ((:FREE (B) (APPEND X B))
                                     (:FREE (A B)
                                            (APPEND (CONS (CAR X) A) B)))))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION T)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST
       (((:EXPAND-1 (:FREE (B) (APPEND X B)))
         (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((EQUAL (APPEND (APPEND X Y) Z)
                 (APPEND X Y Z)))
         (((NOT (CONSP X))
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                  (BINARY-APPEND X (BINARY-APPEND Y Z)))))
         ((IMPLIES (AND (CONSP X)
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (APPEND (APPEND X Y) Z)
                          (APPEND X Y Z))))
         (DEFTHM APP-ASSOC-7
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :EXPAND ((:FREE (A B)
                                           (APPEND (CONS (CAR X) A) B)))))
           :RULE-CLASSES NIL))
        ((:EXPAND-1 (:FREE (A B)
                           (APPEND (CONS (CAR X) A) B)))
         (((NOT (CONSP X))
           (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                 Z)
                  (CONS (CAR X)
                        (BINARY-APPEND (CDR X)
                                       (BINARY-APPEND Y Z))))))
         ((IMPLIES (CONSP X)
                   (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                  Z)
                          (CONS (CAR X) (APPEND (CDR X) Y Z)))))
         (((NOT (CONSP X))
           (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                      Z)
                       (BINARY-APPEND (CDR X)
                                      (BINARY-APPEND Y Z))))
           (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                 Z)
                  (CONS (CAR X)
                        (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                       Z)))))
         ((IMPLIES (AND (CONSP X)
                        (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                               (APPEND (CDR X) Y Z)))
                   (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                  Z)
                          (CONS (CAR X)
                                (APPEND (APPEND (CDR X) Y) Z)))))
         (DEFTHM APP-ASSOC-7
           (EQUAL (APPEND (APPEND X Y) Z)
                  (APPEND X Y Z))
           :HINTS (("Goal" :EXPAND ((:FREE (B) (APPEND X B)))))
           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST
     (((:REWRITE CDR-CONS)
       (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z)))))
       ((EQUAL (APPEND (APPEND X Y) Z)
               (APPEND X Y Z)))
       (((NOT (CONSP X))
         (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                    Z)
                     (BINARY-APPEND (CDR X)
                                    (BINARY-APPEND Y Z))))
         (EQUAL (CONS (CAR X)
                      (BINARY-APPEND (CDR (CONS (CAR X)
                                                (BINARY-APPEND (CDR X) Y)))
                                     Z))
                (CONS (CAR X)
                      (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                     Z)))))
       ((IMPLIES (AND (CONSP X)
                      (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                             (APPEND (CDR X) Y Z)))
                 (EQUAL (CONS (CAR X)
                              (APPEND (CDR (CONS (CAR X) (APPEND (CDR X) Y)))
                                      Z))
                        (CONS (CAR X)
                              (APPEND (APPEND (CDR X) Y) Z))))))
      ((:INDUCTION BINARY-APPEND)
       (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z)))))
       ((EQUAL (APPEND (APPEND X Y) Z)
               (APPEND X Y Z)))
       NIL NIL)
      ((:REWRITE CAR-CONS)
       (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                (BINARY-APPEND X (BINARY-APPEND Y Z)))))
       ((EQUAL (APPEND (APPEND X Y) Z)
               (APPEND X Y Z)))
       (((NOT (CONSP X))
         (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                    Z)
                     (BINARY-APPEND (CDR X)
                                    (BINARY-APPEND Y Z))))
         (EQUAL (CONS (CAR (CONS (CAR X)
                                 (BINARY-APPEND (CDR X) Y)))
                      (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                     Z))
                (CONS (CAR X)
                      (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                     Z)))))
       ((IMPLIES (AND (CONSP X)
                      (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                             (APPEND (CDR X) Y Z)))
                 (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                              (APPEND (APPEND (CDR X) Y) Z))
                        (CONS (CAR X)
                              (APPEND (APPEND (CDR X) Y) Z))))))
      ((:DEFINITION ENDP) :REMOVE)
      ((:DEFINITION BINARY-APPEND) :REMOVE)
      ((:DEFINITION NOT) :REMOVE)))
  (:SYMBOL-TABLE ((NOT . :BUILTIN)
                  (EQUAL . :BUILTIN)
                  (ENDP . :BUILTIN)
                  (CONS . :BUILTIN)
                  (CDR-CONS . :BUILTIN)
                  (CAR-CONS . :BUILTIN)
                  (CAR . :BUILTIN)
                  (BINARY-APPEND . :BUILTIN))))
 (APP-ASSOC-8
     (:GOAL (EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                   (BINARY-APPEND U (BINARY-APPEND V W))))
     (:HASH 1738753505)
     (:EXPANSION-STACK NIL)
     (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                             (BINARY-APPEND U (BINARY-APPEND V W))))))
     (:EVENT (DEFTHM APP-ASSOC-8
               (EQUAL (APPEND (APPEND U V) W)
                      (APPEND U V W))
               :HINTS (("Goal" :BY APP-ASSOC-7))
               :RULE-CLASSES NIL))
     (:RULE-CLASSES NIL)
     (:USED-INDUCTION NIL)
     (:HYP-ALIST NIL)
     (:HINT-SETTING-ALIST (((:BY APP-ASSOC-7)
                            (((EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                                     (BINARY-APPEND U (BINARY-APPEND V W)))))
                            ((EQUAL (APPEND (APPEND U V) W)
                                    (APPEND U V W)))
                            NIL NIL
                            (DEFTHM APP-ASSOC-8
                              (EQUAL (APPEND (APPEND U V) W)
                                     (APPEND U V W))
                              :RULE-CLASSES NIL))))
     (:BOOK-RUNES-ALIST NIL)
     (:RUNE-ALIST NIL)
     (:SYMBOL-TABLE
          ((EQUAL . :BUILTIN)
           (BINARY-APPEND . :BUILTIN)
           (APP-ASSOC-7 :SYSTEM
                        .
                        "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-9
      (:GOAL (IF (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                        (BINARY-APPEND X (BINARY-APPEND Y Z)))
                 (EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                        (BINARY-APPEND U (BINARY-APPEND V W)))
               'NIL))
      (:HASH 860229655)
      (:EXPANSION-STACK NIL)
      (:GOAL-CLAUSES (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                              (BINARY-APPEND X (BINARY-APPEND Y Z))))
                      ((EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                              (BINARY-APPEND U (BINARY-APPEND V W))))))
      (:EVENT (DEFTHM APP-ASSOC-9
                (AND (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))
                     (EQUAL (APPEND (APPEND U V) W)
                            (APPEND U V W)))
                :HINTS (("Goal" :USE (APP-ASSOC-7 APP-ASSOC-8 NTH)))
                :RULE-CLASSES NIL))
      (:RULE-CLASSES NIL)
      (:USED-INDUCTION NIL)
      (:HYP-ALIST NIL)
      (:HINT-SETTING-ALIST
           (((:USE-1 APP-ASSOC-7)
             (((NOT (EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                           (BINARY-APPEND U (BINARY-APPEND V W))))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (EQUAL (APPEND (APPEND U V) W)
                              (APPEND U V W))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))))
             NIL NIL
             (DEFTHM APP-ASSOC-9
               (AND (EQUAL (APPEND (APPEND X Y) Z)
                           (APPEND X Y Z))
                    (EQUAL (APPEND (APPEND U V) W)
                           (APPEND U V W)))
               :HINTS (("Goal" :USE (APP-ASSOC-8 NTH)))
               :RULE-CLASSES NIL))
            ((:USE-1 APP-ASSOC-8)
             (((NOT (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                           (BINARY-APPEND X (BINARY-APPEND Y Z))))
               (EQUAL (BINARY-APPEND (BINARY-APPEND U V) W)
                      (BINARY-APPEND U (BINARY-APPEND V W)))))
             ((IMPLIES (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))
                       (EQUAL (APPEND (APPEND U V) W)
                              (APPEND U V W))))
             NIL NIL
             (DEFTHM APP-ASSOC-9
               (AND (EQUAL (APPEND (APPEND X Y) Z)
                           (APPEND X Y Z))
                    (EQUAL (APPEND (APPEND U V) W)
                           (APPEND U V W)))
               :HINTS (("Goal" :USE (APP-ASSOC-7 NTH)))
               :RULE-CLASSES NIL))
            ((:USE-1 NTH)
             :REMOVE
             (DEFTHM APP-ASSOC-9
               (AND (EQUAL (APPEND (APPEND X Y) Z)
                           (APPEND X Y Z))
                    (EQUAL (APPEND (APPEND U V) W)
                           (APPEND U V W)))
               :HINTS (("Goal" :USE (APP-ASSOC-7 APP-ASSOC-8)))
               :RULE-CLASSES NIL))))
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST NIL)
      (:SYMBOL-TABLE
           ((NTH . :BUILTIN)
            (IF . :BUILTIN)
            (EQUAL . :BUILTIN)
            (BINARY-APPEND . :BUILTIN)
            (APP-ASSOC-8 :SYSTEM
                         .
                         "kestrel/acl2data/gather/tests/runs/test2.lisp")
            (APP-ASSOC-7 :SYSTEM
                         .
                         "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-BACKWARDS-WITH-HYP
      (:GOAL (IMPLIES (TRUE-LISTP X)
                      (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                             (BINARY-APPEND (BINARY-APPEND X Y) Z))))
      (:HASH 958228738)
      (:EXPANSION-STACK NIL)
      (:GOAL-CLAUSES (((NOT (TRUE-LISTP X))
                       (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                              (BINARY-APPEND (BINARY-APPEND X Y)
                                             Z)))))
      (:EVENT (DEFTHM APP-ASSOC-BACKWARDS-WITH-HYP
                (IMPLIES (TRUE-LISTP X)
                         (EQUAL (APPEND X Y Z)
                                (APPEND (APPEND X Y) Z)))))
      (:RULE-CLASSES (:REWRITE))
      (:USED-INDUCTION T)
      (:HYP-ALIST (((TRUE-LISTP X)
                    :REMOVE
                    (DEFTHM APP-ASSOC-BACKWARDS-WITH-HYP
                      (EQUAL (APPEND X Y Z)
                             (APPEND (APPEND X Y) Z)))
                    (TRUE-LISTP X))))
      (:HINT-SETTING-ALIST NIL)
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST
           (((:EXECUTABLE-COUNTERPART CONSP)
             :REMOVE)
            ((:INDUCTION BINARY-APPEND) :REMOVE)
            ((:REWRITE CDR-CONS)
             (((NOT (TRUE-LISTP X))
               (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND X Y) Z))))
             ((IMPLIES (TRUE-LISTP X)
                       (EQUAL (APPEND X Y Z)
                              (APPEND (APPEND X Y) Z))))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))
                           (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)))
               (NOT (TRUE-LISTP (CDR X)))
               (EQUAL (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z))
                      (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                     Z))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (CDR X) Y Z)
                                   (APPEND (APPEND (CDR X) Y) Z))
                            (TRUE-LISTP (CDR X)))
                       (EQUAL (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))
                              (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                      Z)))))
            ((:INDUCTION TRUE-LISTP)
             (((NOT (TRUE-LISTP X))
               (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND X Y) Z))))
             ((IMPLIES (TRUE-LISTP X)
                       (EQUAL (APPEND X Y Z)
                              (APPEND (APPEND X Y) Z))))
             NIL NIL)
            ((:REWRITE CAR-CONS)
             (((NOT (TRUE-LISTP X))
               (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND X Y) Z))))
             ((IMPLIES (TRUE-LISTP X)
                       (EQUAL (APPEND X Y Z)
                              (APPEND (APPEND X Y) Z))))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))
                           (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)))
               (NOT (TRUE-LISTP (CDR X)))
               (EQUAL (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z))
                      (CONS (CAR (CONS (CAR X)
                                       (BINARY-APPEND (CDR X) Y)))
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (CDR X) Y Z)
                                   (APPEND (APPEND (CDR X) Y) Z))
                            (TRUE-LISTP (CDR X)))
                       (EQUAL (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))
                              (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:DEFINITION ENDP) :REMOVE)
            ((:DEFINITION BINARY-APPEND)
             (((NOT (TRUE-LISTP X))
               (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND X Y) Z))))
             ((IMPLIES (TRUE-LISTP X)
                       (EQUAL (APPEND X Y Z)
                              (APPEND (APPEND X Y) Z))))
             (((EQUAL (BINARY-APPEND 'NIL (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND 'NIL Y)
                                     Z)))
              ((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))
                           (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)))
               (NOT (TRUE-LISTP (CDR X)))
               (EQUAL (BINARY-APPEND X (BINARY-APPEND Y Z))
                      (BINARY-APPEND (BINARY-APPEND X Y) Z))))
             ((EQUAL (APPEND NIL Y Z)
                     (APPEND (APPEND NIL Y) Z))
              (IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (CDR X) Y Z)
                                   (APPEND (APPEND (CDR X) Y) Z))
                            (TRUE-LISTP (CDR X)))
                       (EQUAL (APPEND X Y Z)
                              (APPEND (APPEND X Y) Z)))))
            ((:DEFINITION NOT) :REMOVE)
            ((:DEFINITION TRUE-LISTP) :REMOVE)))
      (:SYMBOL-TABLE ((TRUE-LISTP . :BUILTIN)
                      (NOT . :BUILTIN)
                      (IMPLIES . :BUILTIN)
                      (EQUAL . :BUILTIN)
                      (ENDP . :BUILTIN)
                      (CONSP . :BUILTIN)
                      (CDR-CONS . :BUILTIN)
                      (CAR-CONS . :BUILTIN)
                      (BINARY-APPEND . :BUILTIN))))
 (APP-ASSOC-REWRITE-WITH-HYP
     (:GOAL (IMPLIES (TRUE-LISTP X)
                     (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                            (BINARY-APPEND X (BINARY-APPEND Y Z)))))
     (:HASH 2034321332)
     (:EXPANSION-STACK NIL)
     (:GOAL-CLAUSES (((NOT (TRUE-LISTP X))
                      (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z))))))
     (:EVENT (DEFTHM APP-ASSOC-REWRITE-WITH-HYP
               (IMPLIES (TRUE-LISTP X)
                        (EQUAL (APPEND (APPEND X Y) Z)
                               (APPEND X Y Z)))))
     (:RULE-CLASSES (:REWRITE))
     (:USED-INDUCTION NIL)
     (:HYP-ALIST (((TRUE-LISTP X)
                   (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                            (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                   ((EQUAL (APPEND (APPEND X Y) Z)
                           (APPEND X Y Z)))
                   NIL NIL
                   (DEFTHM APP-ASSOC-REWRITE-WITH-HYP
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z)))
                   (TRUE-LISTP X))))
     (:HINT-SETTING-ALIST NIL)
     (:BOOK-RUNES-ALIST NIL)
     (:RUNE-ALIST (((:REWRITE APP-ASSOC-BACKWARDS-WITH-HYP)
                    (((NOT (TRUE-LISTP X))
                      (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                    ((IMPLIES (TRUE-LISTP X)
                              (EQUAL (APPEND (APPEND X Y) Z)
                                     (APPEND X Y Z))))
                    NIL NIL)))
     (:SYMBOL-TABLE ((TRUE-LISTP . :BUILTIN)
                     (IMPLIES . :BUILTIN)
                     (EQUAL . :BUILTIN)
                     (BINARY-APPEND . :BUILTIN)
                     (APP-ASSOC-BACKWARDS-WITH-HYP
                          :SYSTEM
                          .
                          "kestrel/acl2data/gather/tests/runs/test2.lisp"))))
 (APP-ASSOC-10
    (:GOAL (IMPLIES (TRUE-LISTP X)
                    (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                           (BINARY-APPEND X (BINARY-APPEND Y Z)))))
    (:HASH 2034321332)
    (:EXPANSION-STACK NIL)
    (:GOAL-CLAUSES (((NOT (TRUE-LISTP X))
                     (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                            (BINARY-APPEND X (BINARY-APPEND Y Z))))))
    (:EVENT (DEFTHM APP-ASSOC-10
              (IMPLIES (TRUE-LISTP X)
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z)))
              :HINTS (("Goal" :DO-NOT '(SIMPLIFY FERTILIZE GENERALIZE))
                      ("Subgoal *1/3" :DO-NOT NIL)
                      ("Subgoal *1/1" :DO-NOT NIL))
              :RULE-CLASSES NIL))
    (:RULE-CLASSES NIL)
    (:USED-INDUCTION T)
    (:HYP-ALIST (((TRUE-LISTP X)
                  (((EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                           (BINARY-APPEND X (BINARY-APPEND Y Z)))))
                  ((EQUAL (APPEND (APPEND X Y) Z)
                          (APPEND X Y Z)))
                  NIL NIL
                  (DEFTHM APP-ASSOC-10
                    (EQUAL (APPEND (APPEND X Y) Z)
                           (APPEND X Y Z))
                    :HINTS (("Goal" :DO-NOT '(SIMPLIFY FERTILIZE GENERALIZE))
                            ("Subgoal *1/3" :DO-NOT NIL)
                            ("Subgoal *1/1" :DO-NOT NIL))
                    :RULE-CLASSES NIL)
                  (TRUE-LISTP X))))
    (:HINT-SETTING-ALIST (((:DO-NOT-1 SIMPLIFY)
                           :FAIL
                           (DEFTHM APP-ASSOC-10
                             (IMPLIES (TRUE-LISTP X)
                                      (EQUAL (APPEND (APPEND X Y) Z)
                                             (APPEND X Y Z)))
                             :HINTS (("Goal" :DO-NOT '(FERTILIZE GENERALIZE))
                                     ("Subgoal *1/3" :DO-NOT NIL)
                                     ("Subgoal *1/1" :DO-NOT NIL))
                             :RULE-CLASSES NIL))
                          ((:DO-NOT-1 FERTILIZE)
                           :REMOVE
                           (DEFTHM APP-ASSOC-10
                             (IMPLIES (TRUE-LISTP X)
                                      (EQUAL (APPEND (APPEND X Y) Z)
                                             (APPEND X Y Z)))
                             :HINTS (("Goal" :DO-NOT '(SIMPLIFY GENERALIZE))
                                     ("Subgoal *1/3" :DO-NOT NIL)
                                     ("Subgoal *1/1" :DO-NOT NIL))
                             :RULE-CLASSES NIL))
                          ((:DO-NOT-1 GENERALIZE)
                           :REMOVE
                           (DEFTHM APP-ASSOC-10
                             (IMPLIES (TRUE-LISTP X)
                                      (EQUAL (APPEND (APPEND X Y) Z)
                                             (APPEND X Y Z)))
                             :HINTS (("Goal" :DO-NOT '(SIMPLIFY FERTILIZE))
                                     ("Subgoal *1/3" :DO-NOT NIL)
                                     ("Subgoal *1/1" :DO-NOT NIL))
                             :RULE-CLASSES NIL))))
    (:BOOK-RUNES-ALIST NIL)
    (:RUNE-ALIST
         (((:EXECUTABLE-COUNTERPART CONSP)
           :REMOVE)
          ((:INDUCTION BINARY-APPEND)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           NIL NIL)
          ((:REWRITE APP-ASSOC-BACKWARDS-WITH-HYP)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           (((NOT (CONSP X))
             (NOT (TRUE-LISTP (CDR X)))
             (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                   Z)
                    (CONS (CAR X)
                          (BINARY-APPEND (CDR X)
                                         (BINARY-APPEND Y Z))))))
           ((IMPLIES (AND (CONSP X) (TRUE-LISTP (CDR X)))
                     (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                    Z)
                            (CONS (CAR X) (APPEND (CDR X) Y Z))))))
          ((:INDUCTION TRUE-LISTP) :REMOVE)
          ((:REWRITE CDR-CONS)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           (((NOT (CONSP X))
             (NOT (TRUE-LISTP (CDR X)))
             (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                   Z)
                    (CONS (CAR X)
                          (BINARY-APPEND (CDR X)
                                         (BINARY-APPEND Y Z))))))
           ((IMPLIES (AND (CONSP X) (TRUE-LISTP (CDR X)))
                     (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                    Z)
                            (CONS (CAR X) (APPEND (CDR X) Y Z))))))
          ((:DEFINITION ENDP) :REMOVE)
          ((:REWRITE CAR-CONS)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           (((ENDP X)
             (NOT (TRUE-LISTP (CDR X)))
             (EQUAL (CONS (CAR (CONS (CAR X)
                                     (BINARY-APPEND (CDR X) Y)))
                          (BINARY-APPEND (CDR X)
                                         (BINARY-APPEND Y Z)))
                    (CONS (CAR X)
                          (BINARY-APPEND (CDR X)
                                         (BINARY-APPEND Y Z))))))
           ((IMPLIES (AND (NOT (ENDP X))
                          (TRUE-LISTP (CDR X)))
                     (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                  (APPEND (CDR X) Y Z))
                            (CONS (CAR X) (APPEND (CDR X) Y Z))))))
          ((:DEFINITION NOT) :REMOVE)
          ((:DEFINITION BINARY-APPEND)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           (((ENDP X)
             (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                        Z)
                         (BINARY-APPEND (CDR X)
                                        (BINARY-APPEND Y Z))))
             (NOT (TRUE-LISTP (CDR X)))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z))))
            ((NOT (ENDP 'NIL))
             (EQUAL (BINARY-APPEND (BINARY-APPEND 'NIL Y) Z)
                    (BINARY-APPEND 'NIL
                                   (BINARY-APPEND Y Z)))))
           ((IMPLIES (AND (NOT (ENDP X))
                          (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                 (APPEND (CDR X) Y Z))
                          (TRUE-LISTP (CDR X)))
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z)))
            (IMPLIES (ENDP NIL)
                     (EQUAL (APPEND (APPEND NIL Y) Z)
                            (APPEND NIL Y Z)))))
          ((:REWRITE APP-ASSOC-REWRITE-WITH-HYP)
           (((NOT (TRUE-LISTP X))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z)))))
           ((IMPLIES (TRUE-LISTP X)
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z))))
           (((ENDP X)
             (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                        Z)
                         (BINARY-APPEND (CDR X)
                                        (BINARY-APPEND Y Z))))
             (NOT (TRUE-LISTP (CDR X)))
             (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                    (BINARY-APPEND X (BINARY-APPEND Y Z))))
            ((NOT (ENDP 'NIL))
             (EQUAL (BINARY-APPEND (BINARY-APPEND 'NIL Y) Z)
                    (BINARY-APPEND 'NIL
                                   (BINARY-APPEND Y Z)))))
           ((IMPLIES (AND (NOT (ENDP X))
                          (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                 (APPEND (CDR X) Y Z))
                          (TRUE-LISTP (CDR X)))
                     (EQUAL (APPEND (APPEND X Y) Z)
                            (APPEND X Y Z)))
            (IMPLIES (ENDP NIL)
                     (EQUAL (APPEND (APPEND NIL Y) Z)
                            (APPEND NIL Y Z)))))
          ((:DEFINITION TRUE-LISTP) :REMOVE)))
    (:SYMBOL-TABLE ((TRUE-LISTP . :BUILTIN)
                    (NOT . :BUILTIN)
                    (IMPLIES . :BUILTIN)
                    (EQUAL . :BUILTIN)
                    (ENDP . :BUILTIN)
                    (CONSP . :BUILTIN)
                    (CDR-CONS . :BUILTIN)
                    (CAR-CONS . :BUILTIN)
                    (BINARY-APPEND . :BUILTIN)
                    (APP-ASSOC-REWRITE-WITH-HYP
                         :SYSTEM
                         .
                         "kestrel/acl2data/gather/tests/runs/test2.lisp")
                    (APP-ASSOC-BACKWARDS-WITH-HYP
                         :SYSTEM
                         .
                         "kestrel/acl2data/gather/tests/runs/test2.lisp")))))

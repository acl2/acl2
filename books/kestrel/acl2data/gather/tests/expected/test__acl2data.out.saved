
0 ;failure_count_hints
2 ;total_count_hints
1 ;failure_count_hypotheses
6 ;total_count_hypotheses
0 ;failure_count_book_runes
0 ;total_count_book_runes
5 ;failure_count_single_rune
14 ;total_count_single_rune
((:SYSTEM .
          "kestrel/acl2data/gather/tests/runs/test.lisp")
 (ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
  (:GOAL
   (IMPLIES
     (IF (ORDERED-SYMBOL-ALISTP L)
         (IF (SYMBOLP KEY)
             ((LAMBDA (X ALIST)
                (RETURN-LAST 'MBE1-RAW
                             (ASSOC-EQ-EXEC X ALIST)
                             (RETURN-LAST 'PROGN
                                          (ASSOC-EQ-EXEC$GUARD-CHECK X ALIST)
                                          (ASSOC-EQUAL X ALIST))))
              KEY L)
           'NIL)
       'NIL)
     (ORDERED-SYMBOL-ALISTP
          ((LAMBDA (KEY ALIST)
             (RETURN-LAST
                  'MBE1-RAW
                  (REMOVE1-ASSOC-EQ-EXEC KEY ALIST)
                  (RETURN-LAST 'PROGN
                               (REMOVE1-ASSOC-EQ-EXEC$GUARD-CHECK KEY ALIST)
                               (REMOVE1-ASSOC-EQUAL KEY ALIST))))
           KEY L))))
  (:HASH 2096270016)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((NOT (ORDERED-SYMBOL-ALISTP L))
                   (NOT (SYMBOLP KEY))
                   (NOT (ASSOC-EQUAL KEY L))
                   (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQUAL KEY L)))))
  (:EVENT
     (DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
       (IMPLIES (AND (ORDERED-SYMBOL-ALISTP L)
                     (SYMBOLP KEY)
                     (ASSOC-EQ KEY L))
                (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQ KEY L)))
       :HINTS
       (("Goal" :IN-THEORY (DISABLE ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ)))
       :RULE-CLASSES :FORWARD-CHAINING))
  (:RULE-CLASSES :FORWARD-CHAINING)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST
   (((ORDERED-SYMBOL-ALISTP L)
     (((NOT (SYMBOLP KEY))
       (NOT (ASSOC-EQUAL KEY L))
       (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQUAL KEY L))))
     ((IMPLIES (AND (SYMBOLP KEY) (ASSOC-EQUAL KEY L))
               (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQUAL KEY L))))
     NIL NIL
     (DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
       (IMPLIES (AND (SYMBOLP KEY) (ASSOC-EQ KEY L))
                (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQ KEY L)))
       :HINTS
       (("Goal" :IN-THEORY (DISABLE ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ)))
       :RULE-CLASSES :FORWARD-CHAINING)
     (ORDERED-SYMBOL-ALISTP L))
    ((SYMBOLP KEY)
     :REMOVE
     (DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
       (IMPLIES (AND (ORDERED-SYMBOL-ALISTP L)
                     (ASSOC-EQ KEY L))
                (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQ KEY L)))
       :HINTS
       (("Goal" :IN-THEORY (DISABLE ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ)))
       :RULE-CLASSES :FORWARD-CHAINING)
     (SYMBOLP KEY))
    (((LAMBDA (X ALIST)
        (RETURN-LAST 'MBE1-RAW
                     (ASSOC-EQ-EXEC X ALIST)
                     (RETURN-LAST 'PROGN
                                  (ASSOC-EQ-EXEC$GUARD-CHECK X ALIST)
                                  (ASSOC-EQUAL X ALIST))))
      KEY L)
     :REMOVE
     (DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
       (IMPLIES (AND (ORDERED-SYMBOL-ALISTP L)
                     (SYMBOLP KEY))
                (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQ KEY L)))
       :HINTS
       (("Goal" :IN-THEORY (DISABLE ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ)))
       :RULE-CLASSES :FORWARD-CHAINING)
     (ASSOC-EQ KEY L))))
  (:HINT-SETTING-ALIST
       (((:DISABLE ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ)
         :REMOVE
         (DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ-TEST
           (IMPLIES (AND (ORDERED-SYMBOL-ALISTP L)
                         (SYMBOLP KEY)
                         (ASSOC-EQ KEY L))
                    (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQ KEY L)))
           :RULE-CLASSES :FORWARD-CHAINING))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST
       (((:EXECUTABLE-COUNTERPART TAU-SYSTEM)
         (((NOT (ORDERED-SYMBOL-ALISTP L))
           (NOT (SYMBOLP KEY))
           (NOT (ASSOC-EQUAL KEY L))
           (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQUAL KEY L))))
         ((IMPLIES (AND (ORDERED-SYMBOL-ALISTP L)
                        (SYMBOLP KEY)
                        (ASSOC-EQUAL KEY L))
                   (ORDERED-SYMBOL-ALISTP (REMOVE1-ASSOC-EQUAL KEY L))))
         NIL NIL)
        ((:DEFINITION RETURN-LAST) :REMOVE)
        ((:DEFINITION REMOVE1-ASSOC-EQ-EXEC$GUARD-CHECK)
         :REMOVE)
        ((:DEFINITION ASSOC-EQ-EXEC$GUARD-CHECK)
         :REMOVE)))
  (:SYMBOL-TABLE ((TAU-SYSTEM . :BUILTIN)
                  (SYMBOLP . :BUILTIN)
                  (RETURN-LAST . :BUILTIN)
                  (REMOVE1-ASSOC-EQUAL . :BUILTIN)
                  (REMOVE1-ASSOC-EQ-EXEC$GUARD-CHECK . :BUILTIN)
                  (REMOVE1-ASSOC-EQ-EXEC . :BUILTIN)
                  (ORDERED-SYMBOL-ALISTP-REMOVE1-ASSOC-EQ . :BUILTIN)
                  (ORDERED-SYMBOL-ALISTP . :BUILTIN)
                  (IMPLIES . :BUILTIN)
                  (IF . :BUILTIN)
                  (ASSOC-EQUAL . :BUILTIN)
                  (ASSOC-EQ-EXEC$GUARD-CHECK . :BUILTIN)
                  (ASSOC-EQ-EXEC . :BUILTIN))))
 (APP-ASSOC
      (:GOAL (IMPLIES (IF (TRUE-LISTP X)
                          (IF (TRUE-LISTP Y) (TRUE-LISTP Z) 'NIL)
                        'NIL)
                      (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                             (BINARY-APPEND X (BINARY-APPEND Y Z)))))
      (:HASH 2021904664)
      (:EXPANSION-STACK NIL)
      (:GOAL-CLAUSES (((NOT (TRUE-LISTP X))
                       (NOT (TRUE-LISTP Y))
                       (NOT (TRUE-LISTP Z))
                       (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                              (BINARY-APPEND X (BINARY-APPEND Y Z))))))
      (:EVENT (DEFTHM APP-ASSOC
                (IMPLIES (AND (TRUE-LISTP X)
                              (TRUE-LISTP Y)
                              (TRUE-LISTP Z))
                         (EQUAL (APPEND (APPEND X Y) Z)
                                (APPEND X Y Z)))
                :HINTS (("Goal" :IN-THEORY (DISABLE NTH)))))
      (:RULE-CLASSES (:REWRITE))
      (:USED-INDUCTION T)
      (:HYP-ALIST (((TRUE-LISTP X)
                    :REMOVE
                    (DEFTHM APP-ASSOC
                      (IMPLIES (AND (TRUE-LISTP Y) (TRUE-LISTP Z))
                               (EQUAL (APPEND (APPEND X Y) Z)
                                      (APPEND X Y Z)))
                      :HINTS (("Goal" :IN-THEORY (DISABLE NTH))))
                    (TRUE-LISTP X))
                   ((TRUE-LISTP Y)
                    :REMOVE
                    (DEFTHM APP-ASSOC
                      (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP Z))
                               (EQUAL (APPEND (APPEND X Y) Z)
                                      (APPEND X Y Z)))
                      :HINTS (("Goal" :IN-THEORY (DISABLE NTH))))
                    (TRUE-LISTP Y))
                   ((TRUE-LISTP Z)
                    :REMOVE
                    (DEFTHM APP-ASSOC
                      (IMPLIES (AND (TRUE-LISTP X) (TRUE-LISTP Y))
                               (EQUAL (APPEND (APPEND X Y) Z)
                                      (APPEND X Y Z)))
                      :HINTS (("Goal" :IN-THEORY (DISABLE NTH))))
                    (TRUE-LISTP Z))))
      (:HINT-SETTING-ALIST (((:DISABLE NTH)
                             :REMOVE
                             (DEFTHM APP-ASSOC
                               (IMPLIES (AND (TRUE-LISTP X)
                                             (TRUE-LISTP Y)
                                             (TRUE-LISTP Z))
                                        (EQUAL (APPEND (APPEND X Y) Z)
                                               (APPEND X Y Z)))))))
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST
           (((:EXECUTABLE-COUNTERPART CONSP)
             :REMOVE)
            ((:INDUCTION BINARY-APPEND) :REMOVE)
            ((:REWRITE CDR-CONS)
             (((NOT (TRUE-LISTP X))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (TRUE-LISTP X)
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (NOT (TRUE-LISTP (CDR X)))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (CONS (CAR X) (BINARY-APPEND (CDR X) Y))
                                     Z)
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z))
                            (TRUE-LISTP (CDR X))
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (CONS (CAR X) (APPEND (CDR X) Y))
                                      Z)
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:INDUCTION TRUE-LISTP)
             (((NOT (TRUE-LISTP X))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (TRUE-LISTP X)
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))))
             NIL NIL)
            ((:REWRITE CAR-CONS)
             (((NOT (TRUE-LISTP X))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (TRUE-LISTP X)
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))))
             (((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (NOT (TRUE-LISTP (CDR X)))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (CONS (CAR (CONS (CAR X)
                                       (BINARY-APPEND (CDR X) Y)))
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z))
                      (CONS (CAR X)
                            (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                           Z)))))
             ((IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z))
                            (TRUE-LISTP (CDR X))
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (CONS (CAR (CONS (CAR X) (APPEND (CDR X) Y)))
                                    (APPEND (APPEND (CDR X) Y) Z))
                              (CONS (CAR X)
                                    (APPEND (APPEND (CDR X) Y) Z))))))
            ((:DEFINITION ENDP) :REMOVE)
            ((:TYPE-PRESCRIPTION TRUE-LISTP-APPEND)
             :REMOVE)
            ((:DEFINITION NOT) :REMOVE)
            ((:DEFINITION BINARY-APPEND)
             (((NOT (TRUE-LISTP X))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (TRUE-LISTP X)
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z))))
             (((NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND 'NIL Y) Z)
                      (BINARY-APPEND 'NIL
                                     (BINARY-APPEND Y Z))))
              ((NOT (CONSP X))
               (NOT (EQUAL (BINARY-APPEND (BINARY-APPEND (CDR X) Y)
                                          Z)
                           (BINARY-APPEND (CDR X)
                                          (BINARY-APPEND Y Z))))
               (NOT (TRUE-LISTP (CDR X)))
               (NOT (TRUE-LISTP Y))
               (NOT (TRUE-LISTP Z))
               (EQUAL (BINARY-APPEND (BINARY-APPEND X Y) Z)
                      (BINARY-APPEND X (BINARY-APPEND Y Z)))))
             ((IMPLIES (AND (TRUE-LISTP Y) (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND NIL Y) Z)
                              (APPEND NIL Y Z)))
              (IMPLIES (AND (CONSP X)
                            (EQUAL (APPEND (APPEND (CDR X) Y) Z)
                                   (APPEND (CDR X) Y Z))
                            (TRUE-LISTP (CDR X))
                            (TRUE-LISTP Y)
                            (TRUE-LISTP Z))
                       (EQUAL (APPEND (APPEND X Y) Z)
                              (APPEND X Y Z)))))
            ((:DEFINITION TRUE-LISTP) :REMOVE)))
      (:SYMBOL-TABLE ((TRUE-LISTP-APPEND . :BUILTIN)
                      (TRUE-LISTP . :BUILTIN)
                      (NTH . :BUILTIN)
                      (NOT . :BUILTIN)
                      (IMPLIES . :BUILTIN)
                      (IF . :BUILTIN)
                      (EQUAL . :BUILTIN)
                      (ENDP . :BUILTIN)
                      (CONSP . :BUILTIN)
                      (CDR-CONS . :BUILTIN)
                      (CAR-CONS . :BUILTIN)
                      (BINARY-APPEND . :BUILTIN)))))

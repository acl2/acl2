
0 ;failure_count_hints
0 ;total_count_hints
3 ;failure_count_hypotheses
4 ;total_count_hypotheses
2 ;failure_count_book_runes
2 ;total_count_book_runes
8 ;failure_count_single_rune
11 ;total_count_single_rune
((:SYSTEM .
          "kestrel/acl2data/gather/tests/runs/test3.lisp")
 (FOO
  (:GOAL (IMPLIES (IF (RATIONALP X)
                      (IF (INTEGERP Y)
                          (IF (RATIONALP Z)
                              (NOT (EQUAL Z '0))
                            'NIL)
                        'NIL)
                    'NIL)
                  (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
  (:HASH 447984900)
  (:EXPANSION-STACK NIL)
  (:GOAL-CLAUSES (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0))))
  (:EVENT (DEFTHM FOO
            (IMPLIES (AND (RATIONALP X)
                          (INTEGERP Y)
                          (RATIONALP Z)
                          (NOT (EQUAL Z 0)))
                     (EQUAL (MOD (* Z Y) Z) 0))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST (((RATIONALP X)
                :REMOVE
                (DEFTHM FOO
                  (IMPLIES (AND (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0))
                  :RULE-CLASSES NIL)
                (RATIONALP X))
               ((INTEGERP Y)
                (((NOT (RATIONALP X))
                  (NOT (RATIONALP Z))
                  (EQUAL Z '0)
                  (EQUAL (MOD (BINARY-* Y Z) Z) '0)))
                ((IMPLIES (AND (RATIONALP X)
                               (RATIONALP Z)
                               (NOT (EQUAL Z 0)))
                          (EQUAL (MOD (* Y Z) Z) 0)))
                NIL NIL
                (DEFTHM FOO
                  (IMPLIES (AND (RATIONALP X)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0))
                  :RULE-CLASSES NIL)
                (INTEGERP Y))
               ((RATIONALP Z)
                (((NOT (RATIONALP X))
                  (NOT (INTEGERP Y))
                  (EQUAL Z '0)
                  (EQUAL (MOD (BINARY-* Y Z) Z) '0)))
                ((IMPLIES (AND (RATIONALP X)
                               (INTEGERP Y)
                               (NOT (EQUAL Z 0)))
                          (EQUAL (MOD (* Y Z) Z) 0)))
                NIL NIL
                (DEFTHM FOO
                  (IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0))
                  :RULE-CLASSES NIL)
                (RATIONALP Z))
               ((NOT (EQUAL Z '0))
                (((NOT (RATIONALP X))
                  (NOT (INTEGERP Y))
                  (NOT (RATIONALP Z))
                  (EQUAL (MOD (BINARY-* Y Z) Z) '0)))
                ((IMPLIES (AND (RATIONALP X)
                               (INTEGERP Y)
                               (RATIONALP Z))
                          (EQUAL (MOD (* Y Z) Z) 0)))
                NIL NIL
                (DEFTHM FOO
                  (IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z))
                           (EQUAL (MOD (* Z Y) Z) 0))
                  :RULE-CLASSES NIL)
                (NOT (EQUAL Z 0)))))
  (:HINT-SETTING-ALIST NIL)
  (:BOOK-RUNES-ALIST
       (((:SYSTEM .
                  "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
         (((NOT (RATIONALP X))
           (NOT (INTEGERP Y))
           (NOT (RATIONALP Z))
           (EQUAL Z '0)
           (EQUAL (MOD (BINARY-* Y Z) Z) '0)))
         ((IMPLIES (AND (RATIONALP X)
                        (INTEGERP Y)
                        (RATIONALP Z)
                        (NOT (EQUAL Z 0)))
                   (EQUAL (MOD (* Y Z) Z) 0)))
         NIL NIL)
        ((:SYSTEM .
                  "arithmetic-5/lib/floor-mod/floor-mod-basic.lisp")
         (((NOT (RATIONALP X))
           (NOT (INTEGERP Y))
           (NOT (RATIONALP Z))
           (EQUAL Z '0)
           (EQUAL (MOD (BINARY-* Y Z) Z) '0)))
         ((IMPLIES (AND (RATIONALP X)
                        (INTEGERP Y)
                        (RATIONALP Z)
                        (NOT (EQUAL Z 0)))
                   (EQUAL (MOD (* Y Z) Z) 0)))
         NIL NIL)))
  (:RUNE-ALIST (((:LINEAR MOD-BOUNDS-3)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:DEFINITION NOT) :REMOVE)
                ((:REWRITE |arith (* (* x y) z)|)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:TYPE-PRESCRIPTION RATIONALP-MOD)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:REWRITE |arith (* y (* x z))|)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:DEFINITION SYNP) :REMOVE)
                ((:REWRITE |arith (* x 1)|) :REMOVE)
                ((:REWRITE |arith (fix x)|)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:REWRITE ARITH-NORMALIZE-FACTORS-SCATTER-EXPONENTS)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:REWRITE |arith (* x (/ x))|)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)
                ((:REWRITE ARITH-BUBBLE-DOWN-*-MATCH-1)
                 (((NOT (RATIONALP X))
                   (NOT (INTEGERP Y))
                   (NOT (RATIONALP Z))
                   (EQUAL Z '0)
                   (EQUAL (MOD (BINARY-* Z Y) Z) '0)))
                 ((IMPLIES (AND (RATIONALP X)
                                (INTEGERP Y)
                                (RATIONALP Z)
                                (NOT (EQUAL Z 0)))
                           (EQUAL (MOD (* Z Y) Z) 0)))
                 NIL NIL)))
  (:SYMBOL-TABLE
   ((|arith (fix x)| :SYSTEM
                     .
                     "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (|arith (* y (* x z))|
         :SYSTEM
         .
         "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (|arith (* x 1)| :SYSTEM
                     .
                     "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (|arith (* x (/ x))| :SYSTEM
                         .
                         "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (|arith (* (* x y) z)|
         :SYSTEM
         .
         "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (SYNP . :BUILTIN)
    (RATIONALP-MOD :SYSTEM
                   .
                   "arithmetic-5/lib/floor-mod/floor-mod-basic.lisp")
    (RATIONALP . :BUILTIN)
    (NOT . :BUILTIN)
    (MOD-BOUNDS-3 :SYSTEM
                  .
                  "arithmetic-5/lib/floor-mod/floor-mod-basic.lisp")
    (MOD . :BUILTIN)
    (INTEGERP . :BUILTIN)
    (IMPLIES . :BUILTIN)
    (IF . :BUILTIN)
    (EQUAL . :BUILTIN)
    (BINARY-* . :BUILTIN)
    (ARITH-NORMALIZE-FACTORS-SCATTER-EXPONENTS
         :SYSTEM
         .
         "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")
    (ARITH-BUBBLE-DOWN-*-MATCH-1
         :SYSTEM
         .
         "arithmetic-5/lib/basic-ops/arithmetic-theory.lisp")))))


3 ;failure_count_hints
17 ;total_count_hints
11 ;failure_count_hypotheses
12 ;total_count_hypotheses
5 ;failure_count_book_runes
8 ;total_count_book_runes
16 ;failure_count_single_rune
41 ;total_count_single_rune
((:SYSTEM .
          "kestrel/acl2data/gather/tests/runs/test5.lisp")
 (MY-INVERSE-OF-*
      (:GOAL (IMPLIES (IF (ACL2-NUMBERP X)
                          (NOT (EQUAL X '0))
                        'NIL)
                      (EQUAL (BINARY-* X (UNARY-/ X)) '1)))
      (:HASH 1652169573)
      (:EXPANSION-STACK (LOCAL))
      (:GOAL-CLAUSES (((NOT (ACL2-NUMBERP X))
                       (EQUAL X '0)
                       (EQUAL (BINARY-* X (UNARY-/ X)) '1))))
      (:EVENT (DEFTHM MY-INVERSE-OF-*
                (IMPLIES (AND (ACL2-NUMBERP X) (NOT (EQUAL X 0)))
                         (EQUAL (* X (/ X)) 1))))
      (:RULE-CLASSES (:REWRITE))
      (:USED-INDUCTION NIL)
      (:HYP-ALIST (((ACL2-NUMBERP X)
                    (((EQUAL X '0)
                      (EQUAL (BINARY-* X (UNARY-/ X)) '1)))
                    ((IMPLIES (NOT (EQUAL X 0))
                              (EQUAL (* X (/ X)) 1)))
                    NIL NIL
                    (DEFTHM MY-INVERSE-OF-*
                      (IMPLIES (NOT (EQUAL X 0))
                               (EQUAL (* X (/ X)) 1)))
                    (ACL2-NUMBERP X))
                   ((NOT (EQUAL X '0))
                    (((NOT (ACL2-NUMBERP X))
                      (EQUAL (BINARY-* X (UNARY-/ X)) '1)))
                    ((IMPLIES (ACL2-NUMBERP X)
                              (EQUAL (* X (/ X)) 1)))
                    NIL NIL
                    (DEFTHM MY-INVERSE-OF-*
                      (IMPLIES (ACL2-NUMBERP X)
                               (EQUAL (* X (/ X)) 1)))
                    (NOT (EQUAL X 0)))))
      (:HINT-SETTING-ALIST NIL)
      (:BOOK-RUNES-ALIST NIL)
      (:RUNE-ALIST (((:EXECUTABLE-COUNTERPART EQUAL)
                     :REMOVE)
                    ((:DEFINITION NOT) :REMOVE)
                    ((:REWRITE INVERSE-OF-*)
                     (((NOT (ACL2-NUMBERP X))
                       (EQUAL X '0)
                       (EQUAL (BINARY-* X (UNARY-/ X)) '1)))
                     ((IMPLIES (AND (ACL2-NUMBERP X) (NOT (EQUAL X 0)))
                               (EQUAL (* X (/ X)) 1)))
                     NIL NIL)))
      (:SYMBOL-TABLE ((UNARY-/ . :BUILTIN)
                      (NOT . :BUILTIN)
                      (INVERSE-OF-* . :BUILTIN)
                      (IMPLIES . :BUILTIN)
                      (IF . :BUILTIN)
                      (EQUAL . :BUILTIN)
                      (BINARY-* . :BUILTIN)
                      (ACL2-NUMBERP . :BUILTIN))))
 (THM1
  (:GOAL ((LAMBDA (X L)
            (RETURN-LAST 'MBE1-RAW
                         (MEMBER-EQL-EXEC X L)
                         (RETURN-LAST 'PROGN
                                      (MEMBER-EQL-EXEC$GUARD-CHECK X L)
                                      (MEMBER-EQUAL X L))))
          (BINARY-* X
                    (BINARY-* Y (BINARY-* (UNARY-/ X) (UNARY-/ Y))))
          '(0 1)))
  (:HASH 1645366170)
  (:EXPANSION-STACK (DEFFACT))
  (:GOAL-CLAUSES
   (((MEMBER-EQUAL (BINARY-* X
                             (BINARY-* Y (BINARY-* (UNARY-/ X) (UNARY-/ Y))))
                   '(0 1)))))
  (:EVENT (DEFTHM THM1
            (MEMBER (* X Y (/ X) (/ Y)) '(0 1))
            :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST NIL)
  (:HINT-SETTING-ALIST NIL)
  (:BOOK-RUNES-ALIST
       (((:SYSTEM . "arithmetic/equalities.lisp")
         (((EQUAL (BINARY-* X
                            (BINARY-* Y (BINARY-* (UNARY-/ X) (UNARY-/ Y))))
                  '0)
           (EQUAL (BINARY-* X
                            (BINARY-* Y (BINARY-* (UNARY-/ X) (UNARY-/ Y))))
                  '1)))
         ((IMPLIES (NOT (EQUAL (* X Y (/ X) (/ Y)) 0))
                   (EQUAL (* X Y (/ X) (/ Y)) 1)))
         NIL NIL)))
  (:RUNE-ALIST
       (((:EXECUTABLE-COUNTERPART EQUAL)
         :REMOVE)
        ((:DEFINITION RETURN-LAST) :REMOVE)
        ((:REWRITE COMMUTATIVITY-OF-*)
         (((NOT (ACL2-NUMBERP X))
           (EQUAL X '0)
           (NOT (ACL2-NUMBERP Y))
           (EQUAL Y '0)
           (EQUAL (BINARY-* X (BINARY-* (UNARY-/ X) '1))
                  '1)))
         ((IMPLIES (AND (ACL2-NUMBERP X)
                        (NOT (EQUAL X 0))
                        (ACL2-NUMBERP Y)
                        (NOT (EQUAL Y 0)))
                   (EQUAL (* X (/ X) 1) 1)))
         NIL NIL)
        ((:DEFINITION MEMBER-EQL-EXEC$GUARD-CHECK)
         :REMOVE)
        ((:REWRITE UNICITY-OF-1) :REMOVE)
        ((:REWRITE COMMUTATIVITY-2-OF-*)
         (((NOT (ACL2-NUMBERP X))
           (EQUAL X '0)
           (NOT (ACL2-NUMBERP Y))
           (EQUAL Y '0)
           (EQUAL (BINARY-* X
                            (BINARY-* Y (BINARY-* (UNARY-/ X) (UNARY-/ Y))))
                  '1)))
         ((IMPLIES (AND (ACL2-NUMBERP X)
                        (NOT (EQUAL X 0))
                        (ACL2-NUMBERP Y)
                        (NOT (EQUAL Y 0)))
                   (EQUAL (* X Y (/ X) (/ Y)) 1)))
         NIL NIL)
        ((:REWRITE MY-INVERSE-OF-*)
         (((NOT (ACL2-NUMBERP X))
           (EQUAL X '0)
           (NOT (ACL2-NUMBERP Y))
           (EQUAL Y '0)
           (EQUAL (BINARY-* X
                            (BINARY-* (UNARY-/ X)
                                      (BINARY-* Y (UNARY-/ Y))))
                  '1)))
         ((IMPLIES (AND (ACL2-NUMBERP X)
                        (NOT (EQUAL X 0))
                        (ACL2-NUMBERP Y)
                        (NOT (EQUAL Y 0)))
                   (EQUAL (* X (/ X) Y (/ Y)) 1)))
         NIL NIL)
        ((:EXECUTABLE-COUNTERPART CONSP)
         :REMOVE)
        ((:DEFINITION MEMBER-EQUAL)
         (((MEMBER-EQUAL (BINARY-* X
                                   (BINARY-* (UNARY-/ X)
                                             (BINARY-* Y (UNARY-/ Y))))
                         '(0 1))))
         ((MEMBER-EQUAL (* X (/ X) Y (/ Y))
                        '(0 1)))
         NIL NIL)
        ((:EXECUTABLE-COUNTERPART CAR) :REMOVE)
        ((:EXECUTABLE-COUNTERPART CDR) :REMOVE)
        ((:DEFINITION FIX)
         (((EQUAL (FIX X) '0)
           (EQUAL (FIX (BINARY-* (UNARY-/ X)
                                 (BINARY-* Y (UNARY-/ Y))))
                  '0)
           (EQUAL (BINARY-* X
                            (BINARY-* (UNARY-/ X)
                                      (BINARY-* Y (UNARY-/ Y))))
                  '1)))
         ((IMPLIES (AND (NOT (EQUAL (FIX X) 0))
                        (NOT (EQUAL (FIX (* (/ X) Y (/ Y))) 0)))
                   (EQUAL (* X (/ X) Y (/ Y)) 1)))
         NIL NIL)
        ((:REWRITE ZERO-IS-ONLY-ZERO-DIVISOR)
         (((EQUAL (BINARY-* X
                            (BINARY-* (UNARY-/ X)
                                      (BINARY-* Y (UNARY-/ Y))))
                  '0)
           (EQUAL (BINARY-* X
                            (BINARY-* (UNARY-/ X)
                                      (BINARY-* Y (UNARY-/ Y))))
                  '1)))
         ((IMPLIES (NOT (EQUAL (* X (/ X) Y (/ Y)) 0))
                   (EQUAL (* X (/ X) Y (/ Y)) 1)))
         NIL NIL)))
  (:SYMBOL-TABLE
       ((ZERO-IS-ONLY-ZERO-DIVISOR :SYSTEM . "arithmetic/equalities.lisp")
        (UNICITY-OF-1 . :BUILTIN)
        (UNARY-/ . :BUILTIN)
        (RETURN-LAST . :BUILTIN)
        (MY-INVERSE-OF-* :SYSTEM
                         .
                         "kestrel/acl2data/gather/tests/runs/test5.lisp")
        (MEMBER-EQUAL . :BUILTIN)
        (MEMBER-EQL-EXEC$GUARD-CHECK . :BUILTIN)
        (MEMBER-EQL-EXEC . :BUILTIN)
        (FIX . :BUILTIN)
        (EQUAL . :BUILTIN)
        (CONSP . :BUILTIN)
        (COMMUTATIVITY-OF-* . :BUILTIN)
        (COMMUTATIVITY-2-OF-* :SYSTEM . "arithmetic/equalities.lisp")
        (CDR . :BUILTIN)
        (CAR . :BUILTIN)
        (BINARY-* . :BUILTIN))))
 (THM2 (:GOAL (IMPLIES (IF (INTEGERP N) (NOT (< N '0)) 'NIL)
                       (EQUAL (EXPT X N) (N-EXPT X N))))
       (:HASH 1929659321)
       (:EXPANSION-STACK (DEFFACT))
       (:GOAL-CLAUSES (((NOT (INTEGERP N))
                        (< N '0)
                        (EQUAL (EXPT X N) (N-EXPT X N)))))
       (:EVENT (DEFTHM THM2
                 (IMPLIES (AND (INTEGERP N) (<= 0 N))
                          (EQUAL (EXPT X N) (N-EXPT X N)))
                 :HINTS (("Goal" :BY N-EXPT-EXPT))
                 :RULE-CLASSES NIL))
       (:RULE-CLASSES NIL)
       (:USED-INDUCTION NIL)
       (:HYP-ALIST (((INTEGERP N)
                     :FAIL
                     (DEFTHM THM2
                       (IMPLIES (<= 0 N)
                                (EQUAL (EXPT X N) (N-EXPT X N)))
                       :HINTS (("Goal" :BY N-EXPT-EXPT))
                       :RULE-CLASSES NIL)
                     (INTEGERP N))
                    ((NOT (< N '0))
                     :FAIL
                     (DEFTHM THM2
                       (IMPLIES (INTEGERP N)
                                (EQUAL (EXPT X N) (N-EXPT X N)))
                       :HINTS (("Goal" :BY N-EXPT-EXPT))
                       :RULE-CLASSES NIL)
                     (<= 0 N))))
       (:HINT-SETTING-ALIST (((:BY N-EXPT-EXPT)
                              :REMOVE
                              (DEFTHM THM2
                                (IMPLIES (AND (INTEGERP N) (<= 0 N))
                                         (EQUAL (EXPT X N) (N-EXPT X N)))
                                :RULE-CLASSES NIL))))
       (:BOOK-RUNES-ALIST NIL)
       (:RUNE-ALIST NIL)
       (:SYMBOL-TABLE ((NOT . :BUILTIN)
                       (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                       (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                       (INTEGERP . :BUILTIN)
                       (IMPLIES . :BUILTIN)
                       (IF . :BUILTIN)
                       (EXPT . :BUILTIN)
                       (EQUAL . :BUILTIN)
                       (< . :BUILTIN))))
 (THM3
      (:GOAL (IMPLIES (IF (INTEGERP N) (NOT (< N '0)) 'NIL)
                      (EQUAL (BINARY-+ (EXPT X N) (CHOOSE K N))
                             (BINARY-+ (N-EXPT X N) (CHOOSE K N)))))
      (:HASH 326662773)
      (:EXPANSION-STACK (DEFFACT))
      (:GOAL-CLAUSES (((NOT (INTEGERP N))
                       (< N '0)
                       (EQUAL (BINARY-+ (EXPT X N) (CHOOSE K N))
                              (BINARY-+ (N-EXPT X N) (CHOOSE K N))))))
      (:EVENT (DEFTHM THM3
                (IMPLIES (AND (INTEGERP N) (<= 0 N))
                         (EQUAL (+ (EXPT X N) (CHOOSE K N))
                                (+ (N-EXPT X N) (CHOOSE K N))))
                :RULE-CLASSES NIL))
      (:RULE-CLASSES NIL)
      (:USED-INDUCTION NIL)
      (:HYP-ALIST (((INTEGERP N)
                    :REMOVE
                    (DEFTHM THM3
                      (IMPLIES (<= 0 N)
                               (EQUAL (+ (EXPT X N) (CHOOSE K N))
                                      (+ (N-EXPT X N) (CHOOSE K N))))
                      :RULE-CLASSES NIL)
                    (INTEGERP N))
                   ((NOT (< N '0))
                    (((NOT (INTEGERP N))
                      (EQUAL (EXPT X N) (N-EXPT X N))))
                    ((IMPLIES (INTEGERP N)
                              (EQUAL (EXPT X N) (N-EXPT X N))))
                    NIL NIL
                    (DEFTHM THM3
                      (IMPLIES (INTEGERP N)
                               (EQUAL (+ (EXPT X N) (CHOOSE K N))
                                      (+ (N-EXPT X N) (CHOOSE K N))))
                      :RULE-CLASSES NIL)
                    (<= 0 N))))
      (:HINT-SETTING-ALIST NIL)
      (:BOOK-RUNES-ALIST (((:SYSTEM . "arithmetic/binomial.lisp")
                           (((NOT (INTEGERP N))
                             (< N '0)
                             (NOT (ACL2-NUMBERP (N-EXPT X N)))
                             (EQUAL (EXPT X N) (N-EXPT X N))))
                           ((IMPLIES (AND (INTEGERP N)
                                          (<= 0 N)
                                          (ACL2-NUMBERP (N-EXPT X N)))
                                     (EQUAL (EXPT X N) (N-EXPT X N))))
                           NIL NIL)
                          ((:SYSTEM . "arithmetic/equalities.lisp")
                           :REMOVE)))
      (:RUNE-ALIST (((:DEFINITION FIX) :REMOVE)
                    ((:REWRITE RIGHT-CANCELLATION-FOR-+)
                     :REMOVE)
                    ((:TYPE-PRESCRIPTION N-EXPT) :REMOVE)
                    ((:DEFINITION NOT) :REMOVE)
                    ((:REWRITE N-EXPT-EXPT)
                     (((NOT (INTEGERP N))
                       (< N '0)
                       (EQUAL (BINARY-+ (EXPT X N) (CHOOSE K N))
                              (BINARY-+ (N-EXPT X N) (CHOOSE K N)))))
                     ((IMPLIES (AND (INTEGERP N) (<= 0 N))
                               (EQUAL (+ (EXPT X N) (CHOOSE K N))
                                      (+ (N-EXPT X N) (CHOOSE K N)))))
                     NIL NIL)))
      (:SYMBOL-TABLE
           ((RIGHT-CANCELLATION-FOR-+ :SYSTEM . "arithmetic/equalities.lisp")
            (NOT . :BUILTIN)
            (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
            (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
            (INTEGERP . :BUILTIN)
            (IMPLIES . :BUILTIN)
            (IF . :BUILTIN)
            (FIX . :BUILTIN)
            (EXPT . :BUILTIN)
            (EQUAL . :BUILTIN)
            (CHOOSE :SYSTEM . "arithmetic/binomial.lisp")
            (BINARY-+ . :BUILTIN)
            (< . :BUILTIN))))
 (THM4
  (:GOAL (IMPLIES (IF (NATP N) (NATP K) 'NIL)
                  (IF (EQUAL (EXPT X N) (N-EXPT X N))
                      (EQUAL (EXPT Y K) (N-EXPT Y K))
                    'NIL)))
  (:HASH 72149476)
  (:EXPANSION-STACK (DEFFACT))
  (:GOAL-CLAUSES (((NOT (NATP N))
                   (NOT (NATP K))
                   (EQUAL (EXPT X N) (N-EXPT X N)))
                  ((NOT (NATP N))
                   (NOT (NATP K))
                   (EQUAL (EXPT Y K) (N-EXPT Y K)))))
  (:EVENT
     (DEFTHM THM4
       (IMPLIES (AND (NATP N) (NATP K))
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D (APPEND) (N-EXPT-EXPT))))
       :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST
   (((NATP N)
     (((NOT (< N '0))
       (NOT (EQUAL (EXPT Y K) (N-EXPT Y K)))
       (NOT (NATP K))
       (EQUAL (EXPT X N) '1)))
     ((IMPLIES (AND (< N 0)
                    (EQUAL (EXPT Y K) (N-EXPT Y K))
                    (NATP K))
               (EQUAL (EXPT X N) 1)))
     NIL NIL
     (DEFTHM THM4
       (IMPLIES (NATP K)
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D (APPEND) (N-EXPT-EXPT))))
       :RULE-CLASSES NIL)
     (NATP N))
    ((NATP K)
     (((NOT (EQUAL (EXPT X N) (N-EXPT X N)))
       (NOT (< K '0))
       (NOT (NATP N))
       (EQUAL (EXPT Y K) '1)))
     ((IMPLIES (AND (EQUAL (EXPT X N) (N-EXPT X N))
                    (< K 0)
                    (NATP N))
               (EQUAL (EXPT Y K) 1)))
     NIL NIL
     (DEFTHM THM4
       (IMPLIES (NATP N)
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D (APPEND) (N-EXPT-EXPT))))
       :RULE-CLASSES NIL)
     (NATP K))))
  (:HINT-SETTING-ALIST
   (((:USE-1 N-EXPT-EXPT)
     (((NOT (EQUAL (EXPT Y K) (N-EXPT Y K)))
       (NOT (NATP N))
       (NOT (NATP K))
       (EQUAL (EXPT X N) (N-EXPT X N))))
     ((IMPLIES (AND (EQUAL (EXPT Y K) (N-EXPT Y K))
                    (NATP N)
                    (NATP K))
               (EQUAL (EXPT X N) (N-EXPT X N))))
     NIL NIL
     (DEFTHM THM4
       (IMPLIES (AND (NATP N) (NATP K))
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE ((:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D (APPEND) (N-EXPT-EXPT))))
       :RULE-CLASSES NIL))
    ((:USE-1 (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
     (((NOT (EQUAL (EXPT X N) (N-EXPT X N)))
       (NOT (NATP N))
       (NOT (NATP K))
       (EQUAL (EXPT Y K) (N-EXPT Y K))))
     ((IMPLIES (AND (EQUAL (EXPT X N) (N-EXPT X N))
                    (NATP N)
                    (NATP K))
               (EQUAL (EXPT Y K) (N-EXPT Y K))))
     NIL NIL
     (DEFTHM THM4
       (IMPLIES (AND (NATP N) (NATP K))
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT)
                       :IN-THEORY (E/D (APPEND) (N-EXPT-EXPT))))
       :RULE-CLASSES NIL))
    ((:ENABLE BINARY-APPEND)
     :REMOVE
     (DEFTHM THM4
       (IMPLIES (AND (NATP N) (NATP K))
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D NIL (N-EXPT-EXPT))))
       :RULE-CLASSES NIL))
    ((:DISABLE N-EXPT-EXPT)
     :REMOVE
     (DEFTHM THM4
       (IMPLIES (AND (NATP N) (NATP K))
                (AND (EQUAL (EXPT X N) (N-EXPT X N))
                     (EQUAL (EXPT Y K) (N-EXPT Y K))))
       :HINTS (("Goal" :USE (N-EXPT-EXPT (:INSTANCE N-EXPT-EXPT (X Y) (N K)))
                       :IN-THEORY (E/D (APPEND) NIL)))
       :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST NIL)
  (:RUNE-ALIST (((:COMPOUND-RECOGNIZER NATP-COMPOUND-RECOGNIZER)
                 (((INTEGERP N)
                   (INTEGERP K)
                   (NOT (NATP N))
                   (NOT (NATP K))
                   (EQUAL (EXPT X N) (N-EXPT X N))))
                 ((IMPLIES (AND (NOT (INTEGERP N))
                                (NOT (INTEGERP K))
                                (NATP N)
                                (NATP K))
                           (EQUAL (EXPT X N) (N-EXPT X N))))
                 NIL NIL)
                ((:DEFINITION NOT) :REMOVE)))
  (:SYMBOL-TABLE ((NOT . :BUILTIN)
                  (NATP-COMPOUND-RECOGNIZER . :BUILTIN)
                  (NATP . :BUILTIN)
                  (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                  (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                  (IMPLIES . :BUILTIN)
                  (IF . :BUILTIN)
                  (EXPT . :BUILTIN)
                  (EQUAL . :BUILTIN)
                  (APPEND . :BUILTIN))))
 (THM5
   (:GOAL (IMPLIES (NATP N)
                   (EQUAL (EXPT X N) (N-EXPT X N))))
   (:HASH 1043268899)
   (:EXPANSION-STACK (DEFFACT))
   (:GOAL-CLAUSES (((NOT (NATP N))
                    (EQUAL (EXPT X N) (N-EXPT X N)))))
   (:EVENT (DEFTHM THM5
             (IMPLIES (NATP N)
                      (EQUAL (EXPT X N) (N-EXPT X N)))
             :HINTS (("Goal" :USE N-EXPT-EXPT
                             :IN-THEORY (DISABLE (:REWRITE N-EXPT-EXPT)
                                                 APPEND)))
             :RULE-CLASSES NIL))
   (:RULE-CLASSES NIL)
   (:USED-INDUCTION NIL)
   (:HYP-ALIST (((NATP N)
                 (((NOT (< N '0)) (EQUAL (EXPT X N) '1)))
                 ((IMPLIES (< N 0) (EQUAL (EXPT X N) 1)))
                 NIL NIL
                 (DEFTHM THM5
                   (EQUAL (EXPT X N) (N-EXPT X N))
                   :HINTS (("Goal" :USE N-EXPT-EXPT
                                   :IN-THEORY (DISABLE (:REWRITE N-EXPT-EXPT)
                                                       APPEND)))
                   :RULE-CLASSES NIL)
                 (NATP N))))
   (:HINT-SETTING-ALIST
        (((:USE N-EXPT-EXPT)
          (((NOT (NATP N))
            (EQUAL (EXPT X N) (N-EXPT X N))))
          ((IMPLIES (NATP N)
                    (EQUAL (EXPT X N) (N-EXPT X N))))
          NIL NIL
          (DEFTHM THM5
            (IMPLIES (NATP N)
                     (EQUAL (EXPT X N) (N-EXPT X N)))
            :HINTS (("Goal" :IN-THEORY (DISABLE (:REWRITE N-EXPT-EXPT)
                                                APPEND)))
            :RULE-CLASSES NIL))
         ((:DISABLE N-EXPT-EXPT)
          :REMOVE
          (DEFTHM THM5
            (IMPLIES (NATP N)
                     (EQUAL (EXPT X N) (N-EXPT X N)))
            :HINTS (("Goal" :USE N-EXPT-EXPT
                            :IN-THEORY (DISABLE APPEND)))
            :RULE-CLASSES NIL))
         ((:DISABLE BINARY-APPEND)
          :REMOVE
          (DEFTHM THM5
            (IMPLIES (NATP N)
                     (EQUAL (EXPT X N) (N-EXPT X N)))
            :HINTS (("Goal" :USE N-EXPT-EXPT
                            :IN-THEORY (DISABLE (:REWRITE N-EXPT-EXPT))))
            :RULE-CLASSES NIL))))
   (:BOOK-RUNES-ALIST NIL)
   (:RUNE-ALIST (((:COMPOUND-RECOGNIZER NATP-COMPOUND-RECOGNIZER)
                  (((INTEGERP N)
                    (NOT (NATP N))
                    (EQUAL (EXPT X N) (N-EXPT X N))))
                  ((IMPLIES (AND (NOT (INTEGERP N)) (NATP N))
                            (EQUAL (EXPT X N) (N-EXPT X N))))
                  NIL NIL)
                 ((:DEFINITION NOT) :REMOVE)))
   (:SYMBOL-TABLE ((NOT . :BUILTIN)
                   (NATP-COMPOUND-RECOGNIZER . :BUILTIN)
                   (NATP . :BUILTIN)
                   (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                   (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                   (IMPLIES . :BUILTIN)
                   (EXPT . :BUILTIN)
                   (EQUAL . :BUILTIN)
                   (APPEND . :BUILTIN))))
 (THM6
    (:GOAL (IMPLIES (NATP N)
                    (EQUAL (EXPT X N) (N-EXPT X N))))
    (:HASH 1043268899)
    (:EXPANSION-STACK (DEFFACT))
    (:GOAL-CLAUSES (((NOT (NATP N))
                     (EQUAL (EXPT X N) (N-EXPT X N)))))
    (:EVENT (DEFTHM THM6
              (IMPLIES (NATP N)
                       (EQUAL (EXPT X N) (N-EXPT X N)))
              :HINTS (("Goal" :RESTRICT ((ASSOCIATIVITY-OF-+ ((I 3))))
                              :HANDS-OFF (NTH F1)
                              :CASES ((EQUAL (CHOOSE K N) 17))))
              :RULE-CLASSES NIL))
    (:RULE-CLASSES NIL)
    (:USED-INDUCTION NIL)
    (:HYP-ALIST (((NATP N)
                  (((INTEGERP K)
                    (EQUAL (EXPT X N) (N-EXPT X N))))
                  ((IMPLIES (NOT (INTEGERP K))
                            (EQUAL (EXPT X N) (N-EXPT X N))))
                  NIL NIL
                  (DEFTHM THM6
                    (EQUAL (EXPT X N) (N-EXPT X N))
                    :HINTS (("Goal" :RESTRICT ((ASSOCIATIVITY-OF-+ ((I 3))))
                                    :HANDS-OFF (NTH F1)
                                    :CASES ((EQUAL (CHOOSE K N) 17))))
                    :RULE-CLASSES NIL)
                  (NATP N))))
    (:HINT-SETTING-ALIST
         (((:RESTRICT ((ASSOCIATIVITY-OF-+ ((I 3)))))
           :REMOVE
           (DEFTHM THM6
             (IMPLIES (NATP N)
                      (EQUAL (EXPT X N) (N-EXPT X N)))
             :HINTS (("Goal" :HANDS-OFF (NTH F1)
                             :CASES ((EQUAL (CHOOSE K N) 17))))
             :RULE-CLASSES NIL))
          ((:HANDS-OFF (NTH F1))
           :REMOVE
           (DEFTHM THM6
             (IMPLIES (NATP N)
                      (EQUAL (EXPT X N) (N-EXPT X N)))
             :HINTS (("Goal" :RESTRICT ((ASSOCIATIVITY-OF-+ ((I 3))))
                             :CASES ((EQUAL (CHOOSE K N) 17))))
             :RULE-CLASSES NIL))
          ((:CASES ((EQUAL (CHOOSE K N) 17)))
           :REMOVE
           (DEFTHM THM6
             (IMPLIES (NATP N)
                      (EQUAL (EXPT X N) (N-EXPT X N)))
             :HINTS (("Goal" :RESTRICT ((ASSOCIATIVITY-OF-+ ((I 3))))
                             :HANDS-OFF (NTH F1)))
             :RULE-CLASSES NIL))))
    (:BOOK-RUNES-ALIST (((:SYSTEM . "arithmetic/binomial.lisp")
                         (((EQUAL (CHOOSE K N) '17)
                           (NOT (NATP N))
                           (EQUAL (EXPT X N) (N-EXPT X N))))
                         ((IMPLIES (AND (NOT (EQUAL (CHOOSE K N) 17))
                                        (NATP N))
                                   (EQUAL (EXPT X N) (N-EXPT X N))))
                         NIL NIL)
                        ((:SYSTEM . "arithmetic/equalities.lisp")
                         :REMOVE)))
    (:RUNE-ALIST (((:DEFINITION NOT) :REMOVE)
                  ((:COMPOUND-RECOGNIZER NATP-COMPOUND-RECOGNIZER)
                   (((INTEGERP K)
                     (NOT (NATP N))
                     (EQUAL (EXPT X N) (N-EXPT X N))))
                   ((IMPLIES (AND (NOT (INTEGERP K)) (NATP N))
                             (EQUAL (EXPT X N) (N-EXPT X N))))
                   NIL NIL)
                  ((:REWRITE N-EXPT-EXPT)
                   (((INTEGERP K)
                     (NOT (NATP N))
                     (EQUAL (EXPT X N) (N-EXPT X N))))
                   ((IMPLIES (AND (NOT (INTEGERP K)) (NATP N))
                             (EQUAL (EXPT X N) (N-EXPT X N))))
                   NIL NIL)
                  ((:REWRITE COMMUTATIVITY-OF-+) :REMOVE)
                  ((:DEFINITION CHOOSE) :REMOVE)
                  ((:REWRITE DISTRIBUTIVITY-OF-/-OVER-*)
                   :REMOVE)
                  ((:REWRITE COMMUTATIVITY-2-OF-*)
                   :REMOVE)))
    (:SYMBOL-TABLE
         ((NTH . :BUILTIN)
          (NOT . :BUILTIN)
          (NATP-COMPOUND-RECOGNIZER . :BUILTIN)
          (NATP . :BUILTIN)
          (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
          (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
          (IMPLIES . :BUILTIN)
          (F1 :SYSTEM
              .
              "kestrel/acl2data/gather/tests/runs/test5.lisp")
          (EXPT . :BUILTIN)
          (EQUAL . :BUILTIN)
          (DISTRIBUTIVITY-OF-/-OVER-* :SYSTEM . "arithmetic/equalities.lisp")
          (COMMUTATIVITY-OF-+ . :BUILTIN)
          (COMMUTATIVITY-2-OF-* :SYSTEM . "arithmetic/equalities.lisp")
          (CHOOSE :SYSTEM . "arithmetic/binomial.lisp")
          (ASSOCIATIVITY-OF-+ . :BUILTIN))))
 (THM7
  (:GOAL (IMPLIES (NATP N)
                  (EQUAL (EXPT X N) (N-EXPT X N))))
  (:HASH 1043268899)
  (:EXPANSION-STACK (DEFFACT))
  (:GOAL-CLAUSES (((NOT (NATP N))
                   (EQUAL (EXPT X N) (N-EXPT X N)))))
  (:EVENT
     (DEFTHM THM7
       (IMPLIES (NATP N)
                (EQUAL (EXPT X N) (N-EXPT X N)))
       :HINTS (("Goal" :CLAUSE-PROCESSOR (:FUNCTION AUTOHIDE-CP :HINT '(NTH))
                       :EXPAND ((APPEND U V))))
       :RULE-CLASSES NIL))
  (:RULE-CLASSES NIL)
  (:USED-INDUCTION NIL)
  (:HYP-ALIST
   (((NATP N)
     (((EQUAL (EXPT X N) (N-EXPT X N))))
     ((EQUAL (EXPT X N) (N-EXPT X N)))
     NIL NIL
     (DEFTHM THM7
       (EQUAL (EXPT X N) (N-EXPT X N))
       :HINTS (("Goal" :CLAUSE-PROCESSOR (:FUNCTION AUTOHIDE-CP :HINT '(NTH))
                       :EXPAND ((APPEND U V))))
       :RULE-CLASSES NIL)
     (NATP N))))
  (:HINT-SETTING-ALIST
       (((:CLAUSE-PROCESSOR (:FUNCTION AUTOHIDE-CP :HINT '(NTH)))
         :REMOVE
         (DEFTHM THM7
           (IMPLIES (NATP N)
                    (EQUAL (EXPT X N) (N-EXPT X N)))
           :HINTS (("Goal" :EXPAND ((APPEND U V))))
           :RULE-CLASSES NIL))
        ((:EXPAND ((APPEND U V)))
         :REMOVE
         (DEFTHM THM7
           (IMPLIES (NATP N)
                    (EQUAL (EXPT X N) (N-EXPT X N)))
           :HINTS
           (("Goal" :CLAUSE-PROCESSOR (:FUNCTION AUTOHIDE-CP :HINT '(NTH))))
           :RULE-CLASSES NIL))))
  (:BOOK-RUNES-ALIST (((:SYSTEM . "arithmetic/binomial.lisp")
                       (((NOT (NATP N))
                         (EQUAL (EXPT X N) (N-EXPT X N))))
                       ((IMPLIES (NATP N)
                                 (EQUAL (EXPT X N) (N-EXPT X N))))
                       NIL NIL)))
  (:RUNE-ALIST (((:REWRITE N-EXPT-EXPT)
                 (((NOT (NATP N))
                   (EQUAL (EXPT X N) (N-EXPT X N))))
                 ((IMPLIES (NATP N)
                           (EQUAL (EXPT X N) (N-EXPT X N))))
                 NIL NIL)
                ((:COMPOUND-RECOGNIZER NATP-COMPOUND-RECOGNIZER)
                 (((NOT (NATP N))
                   (EQUAL (EXPT X N) (N-EXPT X N))))
                 ((IMPLIES (NATP N)
                           (EQUAL (EXPT X N) (N-EXPT X N))))
                 NIL NIL)))
  (:SYMBOL-TABLE ((NATP-COMPOUND-RECOGNIZER . :BUILTIN)
                  (NATP . :BUILTIN)
                  (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                  (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
                  (IMPLIES . :BUILTIN)
                  (EXPT . :BUILTIN)
                  (EQUAL . :BUILTIN)
                  (BINARY-APPEND . :BUILTIN)
                  (AUTOHIDE-CP :SYSTEM
                               . "clause-processors/autohide.lisp"))))
 (THM8
   (:GOAL (IMPLIES (NATP N)
                   (EQUAL (EXPT X N) (N-EXPT X N))))
   (:HASH 1043268899)
   (:EXPANSION-STACK (DEFFACT))
   (:GOAL-CLAUSES (((NOT (NATP N))
                    (EQUAL (EXPT X N) (N-EXPT X N)))))
   (:EVENT (DEFTHM THM8
             (IMPLIES (NATP N)
                      (EQUAL (EXPT X N) (N-EXPT X N)))
             :HINTS (("Goal" :CASES ((< 5 (CHOOSE I J)))
                             :EXPAND (APPEND U V)
                             :DO-NOT '(GENERALIZE FERTILIZE)))
             :RULE-CLASSES NIL))
   (:RULE-CLASSES NIL)
   (:USED-INDUCTION NIL)
   (:HYP-ALIST (((NATP N)
                 (((INTEGERP I)
                   (EQUAL (EXPT X N) (N-EXPT X N))))
                 ((IMPLIES (NOT (INTEGERP I))
                           (EQUAL (EXPT X N) (N-EXPT X N))))
                 NIL NIL
                 (DEFTHM THM8
                   (EQUAL (EXPT X N) (N-EXPT X N))
                   :HINTS (("Goal" :CASES ((< 5 (CHOOSE I J)))
                                   :EXPAND (APPEND U V)
                                   :DO-NOT '(GENERALIZE FERTILIZE)))
                   :RULE-CLASSES NIL)
                 (NATP N))))
   (:HINT-SETTING-ALIST (((:CASES ((< 5 (CHOOSE I J))))
                          :REMOVE
                          (DEFTHM THM8
                            (IMPLIES (NATP N)
                                     (EQUAL (EXPT X N) (N-EXPT X N)))
                            :HINTS (("Goal" :EXPAND (APPEND U V)
                                            :DO-NOT '(GENERALIZE FERTILIZE)))
                            :RULE-CLASSES NIL))
                         ((:EXPAND (APPEND U V))
                          :REMOVE
                          (DEFTHM THM8
                            (IMPLIES (NATP N)
                                     (EQUAL (EXPT X N) (N-EXPT X N)))
                            :HINTS (("Goal" :CASES ((< 5 (CHOOSE I J)))
                                            :DO-NOT '(GENERALIZE FERTILIZE)))
                            :RULE-CLASSES NIL))
                         ((:DO-NOT-1 GENERALIZE)
                          :REMOVE
                          (DEFTHM THM8
                            (IMPLIES (NATP N)
                                     (EQUAL (EXPT X N) (N-EXPT X N)))
                            :HINTS (("Goal" :CASES ((< 5 (CHOOSE I J)))
                                            :EXPAND (APPEND U V)
                                            :DO-NOT '(FERTILIZE)))
                            :RULE-CLASSES NIL))
                         ((:DO-NOT-1 FERTILIZE)
                          :REMOVE
                          (DEFTHM THM8
                            (IMPLIES (NATP N)
                                     (EQUAL (EXPT X N) (N-EXPT X N)))
                            :HINTS (("Goal" :CASES ((< 5 (CHOOSE I J)))
                                            :EXPAND (APPEND U V)
                                            :DO-NOT '(GENERALIZE)))
                            :RULE-CLASSES NIL))))
   (:BOOK-RUNES-ALIST (((:SYSTEM . "arithmetic/binomial.lisp")
                        (((< '5 (CHOOSE I J))
                          (NOT (NATP N))
                          (EQUAL (EXPT X N) (N-EXPT X N))))
                        ((IMPLIES (AND (<= (CHOOSE I J) 5) (NATP N))
                                  (EQUAL (EXPT X N) (N-EXPT X N))))
                        NIL NIL)
                       ((:SYSTEM . "arithmetic/equalities.lisp")
                        :REMOVE)))
   (:RUNE-ALIST (((:DEFINITION NOT) :REMOVE)
                 ((:REWRITE COMMUTATIVITY-OF-+) :REMOVE)
                 ((:REWRITE N-EXPT-EXPT)
                  (((INTEGERP I)
                    (NOT (NATP N))
                    (EQUAL (EXPT X N) (N-EXPT X N))))
                  ((IMPLIES (AND (NOT (INTEGERP I)) (NATP N))
                            (EQUAL (EXPT X N) (N-EXPT X N))))
                  NIL NIL)
                 ((:REWRITE DISTRIBUTIVITY-OF-/-OVER-*)
                  :REMOVE)
                 ((:COMPOUND-RECOGNIZER NATP-COMPOUND-RECOGNIZER)
                  (((INTEGERP I)
                    (NOT (NATP N))
                    (EQUAL (EXPT X N) (N-EXPT X N))))
                  ((IMPLIES (AND (NOT (INTEGERP I)) (NATP N))
                            (EQUAL (EXPT X N) (N-EXPT X N))))
                  NIL NIL)
                 ((:REWRITE COMMUTATIVITY-2-OF-*)
                  :REMOVE)
                 ((:DEFINITION CHOOSE) :REMOVE)))
   (:SYMBOL-TABLE
        ((NOT . :BUILTIN)
         (NATP-COMPOUND-RECOGNIZER . :BUILTIN)
         (NATP . :BUILTIN)
         (N-EXPT-EXPT :SYSTEM . "arithmetic/binomial.lisp")
         (N-EXPT :SYSTEM . "arithmetic/binomial.lisp")
         (IMPLIES . :BUILTIN)
         (EXPT . :BUILTIN)
         (EQUAL . :BUILTIN)
         (DISTRIBUTIVITY-OF-/-OVER-* :SYSTEM . "arithmetic/equalities.lisp")
         (COMMUTATIVITY-OF-+ . :BUILTIN)
         (COMMUTATIVITY-2-OF-* :SYSTEM . "arithmetic/equalities.lisp")
         (CHOOSE :SYSTEM . "arithmetic/binomial.lisp")
         (BINARY-APPEND . :BUILTIN)
         (< . :BUILTIN)))))

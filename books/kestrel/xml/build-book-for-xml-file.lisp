; Parsing an XML file and building an ACL2 book to represent it
;
; Copyright (C) 2014-2025 Kestrel Institute
;
; License: A 3-clause BSD license. See the file books/3BSD-mod.txt.
;
; Author: Eric Smith (eric.smith@kestrel.edu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package "ACL2")

(include-book "xml-parser")
(include-book "misc/file-io" :dir :system) ; for write-list

(defun build-book-for-xml-file-fn (input-xml-file output-file-name defconst-name state)
  (declare (xargs :guard (and (stringp input-xml-file)
                              (stringp output-file-name)
                              (stringp defconst-name))
                  :stobjs state
                  :mode :program ; todo: because of write-list
                  ;; :verify-guards nil ; todo
                  )) ;todo: require stars at beginning and end
  (mv-let (erp elements-and-strings state)
    (parse-xml-file input-xml-file
                    t ;todo: think about this
                    state)
    (if erp
        (prog2$ (cw "Error building book for XML file ~x0: ~x1." input-xml-file erp)
                (mv erp nil state))
      (write-list `(";; This file was automatically generated by build-book-for-xml-file."
                    (in-package "ACL2")
                    (defconst ,(intern defconst-name "ACL2") ',elements-and-strings))
                  output-file-name
                  'build-book-for-xml-file
                  state))))

(defmacro build-book-for-xml-file (input-xml-file output-file-name defconst-name)
  `(build-book-for-xml-file-fn ',input-xml-file ',output-file-name ',defconst-name state))

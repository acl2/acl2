; NOTE: This file has been automatically generated.

(in-package "ACL2")

; This file was written by evaluating the form:
#||
(WRITE-TD "td-cands")
||#

(defconst *td-wf-rel-alist* (quote
((NAT-LIST-< :SYSTEM . "std/basic/two-nats-measure") (L<))))

(defconst *td-candidates* (quote
(((JUSTIFICATION (I MAXIMUM)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (IFIX MAXIMUM)
                                  (UNARY-- (NFIX I))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I MAXIMUM)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (IFIX MAXIMUM)
                                   (UNARY-- (NFIX I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (IFIX MAXIMUM)
                          (UNARY-- (NFIX I))))))
    ((NOT (< (NFIX I) (IFIX MAXIMUM)))
     (NOT (CHAR-EQUAL (CHAR STR1 (NFIX I))
                      (CHAR STR2 (NFIX I))))
     (O< (NFIX (BINARY-+ (IFIX MAXIMUM)
                         (UNARY-- (NFIX (BINARY-+ '1 (NFIX I))))))
         (NFIX (BINARY-+ (IFIX MAXIMUM)
                         (UNARY-- (NFIX I)))))))
   (STRING-EQUAL1 4)))
 ((JUSTIFICATION (PRINT-BASE ACC X)
                 (NIL O-P . O<)
                 ((IF (NOT (IF (INTEGERP X)
                               (IF (NATP ACC)
                                   (IF (< ACC '1152921504606846975)
                                       (PRINT-BASE-P PRINT-BASE)
                                     'NIL)
                                 'NIL)
                             'NIL))
                      '0
                    (IF (< X '0)
                        (BINARY-+ '1 (UNARY-- X))
                      (IF (< X PRINT-BASE) '0 X)))
                  IF :LAMBDAS MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PRINT-BASE ACC X)
                  (NIL O-P . O<)
                  ((IF (NOT (IF (INTEGERP X)
                                (IF (NATP ACC)
                                    (IF (< ACC '1152921504606846975)
                                        (PRINT-BASE-P PRINT-BASE)
                                      'NIL)
                                  'NIL)
                              'NIL))
                       '0
                     (IF (< X '0)
                         (BINARY-+ '1 (UNARY-- X))
                       (IF (< X PRINT-BASE) '0 X)))
                   IF :LAMBDAS MV-LIST RETURN-LAST))
   (((O-P (IF (IF (INTEGERP X)
                  (IF (IF (INTEGERP ACC)
                          (IF (< ACC '0) 'NIL 'T)
                        'NIL)
                      (IF (< ACC '1152921504606846975)
                          (PRINT-BASE-P PRINT-BASE)
                        'NIL)
                    'NIL)
                'NIL)
              (IF (< X '0)
                  (BINARY-+ '1 (UNARY-- X))
                (IF (< X PRINT-BASE) '0 X))
            '0)))
    ((NOT (INTEGERP X))
     (NOT (INTEGERP ACC))
     (< ACC '0)
     (NOT (PRINT-BASE-P PRINT-BASE))
     (NOT (< ACC '1152921504606846975))
     (NOT (< X '0))
     (O< (IF (IF (INTEGERP (UNARY-- X))
                 (IF (IF (INTEGERP (BINARY-+ '1 ACC))
                         (IF (< (BINARY-+ '1 ACC) '0) 'NIL 'T)
                       'NIL)
                     (IF (< (BINARY-+ '1 ACC)
                            '1152921504606846975)
                         (PRINT-BASE-P PRINT-BASE)
                       'NIL)
                   'NIL)
               'NIL)
             (IF (< (UNARY-- X) '0)
                 (BINARY-+ '1 (UNARY-- (UNARY-- X)))
               (IF (< (UNARY-- X) PRINT-BASE)
                   '0
                 (UNARY-- X)))
           '0)
         (IF (IF (INTEGERP X)
                 (IF (IF (INTEGERP ACC)
                         (IF (< ACC '0) 'NIL 'T)
                       'NIL)
                     (IF (< ACC '1152921504606846975)
                         (PRINT-BASE-P PRINT-BASE)
                       'NIL)
                   'NIL)
               'NIL)
             (IF (< X '0)
                 (BINARY-+ '1 (UNARY-- X))
               (IF (< X PRINT-BASE) '0 X))
           '0)))
    ((NOT (INTEGERP X))
     (NOT (INTEGERP ACC))
     (< ACC '0)
     (NOT (PRINT-BASE-P PRINT-BASE))
     (NOT (< ACC '1152921504606846975))
     (< X '0)
     (< X PRINT-BASE)
     (O< (IF (IF (INTEGERP (TRUNCATE X PRINT-BASE))
                 (IF (IF (INTEGERP (BINARY-+ '1 ACC))
                         (IF (< (BINARY-+ '1 ACC) '0) 'NIL 'T)
                       'NIL)
                     (IF (< (BINARY-+ '1 ACC)
                            '1152921504606846975)
                         (PRINT-BASE-P PRINT-BASE)
                       'NIL)
                   'NIL)
               'NIL)
             (IF (< (TRUNCATE X PRINT-BASE) '0)
                 (BINARY-+ '1
                           (UNARY-- (TRUNCATE X PRINT-BASE)))
               (IF (< (TRUNCATE X PRINT-BASE) PRINT-BASE)
                   '0
                 (TRUNCATE X PRINT-BASE)))
           '0)
         (IF (IF (INTEGERP X)
                 (IF (IF (INTEGERP ACC)
                         (IF (< ACC '0) 'NIL 'T)
                       'NIL)
                     (IF (< ACC '1152921504606846975)
                         (PRINT-BASE-P PRINT-BASE)
                       'NIL)
                   'NIL)
               'NIL)
             (IF (< X '0)
                 (BINARY-+ '1 (UNARY-- X))
               (IF (< X PRINT-BASE) '0 X))
           '0))))
   (FLSZ-INTEGER 3)))
 ((JUSTIFICATION (COL N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BINARY-* '2 N) COL))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (COL N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-* '2 N) COL))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-* '2 N) COL))))
    ((NOT (INTEGERP N))
     (< N '0)
     (NOT (INTEGERP COL))
     (< COL '0)
     (NOT (INTEGERP HARD-RIGHT-MARGIN))
     (< HARD-RIGHT-MARGIN '0)
     (EQUAL N '0)
     (< HARD-RIGHT-MARGIN COL)
     (O< (NFIX (BINARY-+ (BINARY-* '2 (BINARY-+ '-1 N))
                         (BINARY-+ '1 COL)))
         (NFIX (BINARY-+ (BINARY-* '2 N) COL))))
    ((NOT (INTEGERP N))
     (< N '0)
     (NOT (INTEGERP COL))
     (< COL '0)
     (NOT (INTEGERP HARD-RIGHT-MARGIN))
     (< HARD-RIGHT-MARGIN '0)
     (EQUAL N '0)
     (NOT (< HARD-RIGHT-MARGIN COL))
     (O< (NFIX (BINARY-+ (BINARY-* '2 N) '0))
         (NFIX (BINARY-+ (BINARY-* '2 N) COL)))))
   (SPACES1 5)))
 ((JUSTIFICATION (J I)
                 (NIL O-P . O<)
                 ((FROM-TO-BY-MEASURE I J)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (J I)
                  (NIL O-P . O<)
                  ((FROM-TO-BY-MEASURE I J)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FROM-TO-BY-MEASURE I J)))
    ((NOT (INTEGERP I))
     (NOT (INTEGERP J))
     (NOT (INTEGERP K))
     (NOT (< '0 K))
     (< J I)
     (O< (FROM-TO-BY-MEASURE I (BINARY-+ J (UNARY-- K)))
         (FROM-TO-BY-MEASURE I J))))
   (FROM-TO-BY-AC 4))
  ((JUSTIFICATION (J I)
                  (NIL O-P . O<)
                  ((FROM-TO-BY-MEASURE I J)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FROM-TO-BY-MEASURE I J)))
    ((NOT (INTEGERP I))
     (NOT (INTEGERP J))
     (NOT (INTEGERP K))
     (NOT (< '0 K))
     (< J I)
     (O< (FROM-TO-BY-MEASURE (BINARY-+ I K) J)
         (FROM-TO-BY-MEASURE I J))))
   (FROM-TO-BY 3)))
 ((JUSTIFICATION (LEN N P)
                 (NIL O-P . O<)
                 ((IF (IF (NATP P)
                          (IF (NATP N)
                              (IF (NATP LEN) (< P LEN) 'NIL)
                            'NIL)
                        'NIL)
                      (BINARY-+ (BINARY-+ '1 LEN) (UNARY-- P))
                    '0)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (LEN N P)
                  (NIL O-P . O<)
                  ((IF (IF (NATP P)
                           (IF (NATP N)
                               (IF (NATP LEN) (< P LEN) 'NIL)
                             'NIL)
                         'NIL)
                       (BINARY-+ (BINARY-+ '1 LEN) (UNARY-- P))
                     '0)
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (IF (IF (INTEGERP P)
                      (IF (< P '0) 'NIL 'T)
                    'NIL)
                  (IF (IF (INTEGERP N)
                          (IF (< N '0) 'NIL 'T)
                        'NIL)
                      (IF (IF (INTEGERP LEN)
                              (IF (< LEN '0) 'NIL 'T)
                            'NIL)
                          (< P LEN)
                        'NIL)
                    'NIL)
                'NIL)
              (BINARY-+ (BINARY-+ '1 LEN) (UNARY-- P))
            '0)))
    ((NOT (INTEGERP P))
     (< P '0)
     (NOT (INTEGERP N))
     (< N '0)
     (NOT (INTEGERP LEN))
     (< LEN '0)
     (NOT (< P LEN))
     (EQUAL (CHAR S P) '#\Newline)
     (O< (IF (IF (IF (INTEGERP (BINARY-+ '1 P))
                     (IF (< (BINARY-+ '1 P) '0) 'NIL 'T)
                   'NIL)
                 (IF (IF (INTEGERP N)
                         (IF (< N '0) 'NIL 'T)
                       'NIL)
                     (IF (IF (INTEGERP LEN)
                             (IF (< LEN '0) 'NIL 'T)
                           'NIL)
                         (< (BINARY-+ '1 P) LEN)
                       'NIL)
                   'NIL)
               'NIL)
             (BINARY-+ (BINARY-+ '1 LEN)
                       (UNARY-- (BINARY-+ '1 P)))
           '0)
         (IF (IF (IF (INTEGERP P)
                     (IF (< P '0) 'NIL 'T)
                   'NIL)
                 (IF (IF (INTEGERP N)
                         (IF (< N '0) 'NIL 'T)
                       'NIL)
                     (IF (IF (INTEGERP LEN)
                             (IF (< LEN '0) 'NIL 'T)
                           'NIL)
                         (< P LEN)
                       'NIL)
                   'NIL)
               'NIL)
             (BINARY-+ (BINARY-+ '1 LEN) (UNARY-- P))
           '0)))
    ((NOT (INTEGERP P))
     (< P '0)
     (< N '0)
     (NOT (INTEGERP LEN))
     (< LEN '0)
     (NOT (< P LEN))
     (NOT (EQUAL (CHAR S P) '#\Newline))
     (NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (IF (IF (IF (INTEGERP (BINARY-+ '1 P))
                     (IF (< (BINARY-+ '1 P) '0) 'NIL 'T)
                   'NIL)
                 (IF (IF (INTEGERP (BINARY-+ '-1 N))
                         (IF (< (BINARY-+ '-1 N) '0) 'NIL 'T)
                       'NIL)
                     (IF (IF (INTEGERP LEN)
                             (IF (< LEN '0) 'NIL 'T)
                           'NIL)
                         (< (BINARY-+ '1 P) LEN)
                       'NIL)
                   'NIL)
               'NIL)
             (BINARY-+ (BINARY-+ '1 LEN)
                       (UNARY-- (BINARY-+ '1 P)))
           '0)
         (IF (IF (IF (INTEGERP P)
                     (IF (< P '0) 'NIL 'T)
                   'NIL)
                 (IF (IF (INTEGERP N)
                         (IF (< N '0) 'NIL 'T)
                       'NIL)
                     (IF (IF (INTEGERP LEN)
                             (IF (< LEN '0) 'NIL 'T)
                           'NIL)
                         (< P LEN)
                       'NIL)
                   'NIL)
               'NIL)
             (BINARY-+ (BINARY-+ '1 LEN) (UNARY-- P))
           '0))))
   (NEWLINE-AFTER 4 :SYSTEM . "tools/show-diff-lines")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SIMPLE-TERM-VARS)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SIMPLE-TERM-VARS)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SIMPLE-TERM-VARS)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'SIMPLE-TERM-VARS)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'SIMPLE-TERM-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'SIMPLE-TERM-VARS)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SIMPLE-TERM-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SIMPLE-TERM-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (SIMPLE-TERM-VARS-FLAG 2 :SYSTEM
                          . "clause-processors/term-vars")))
 ((JUSTIFICATION (AVOID BASE N)
                 (NIL O-P . O<)
                 ((NEW-SYMBOL1-MEASURE N BASE AVOID)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AVOID BASE N)
                  (NIL O-P . O<)
                  ((NEW-SYMBOL1-MEASURE N BASE AVOID)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NEW-SYMBOL1-MEASURE N BASE AVOID)))
    ((NOT (MEMBER-EQUAL (SYMBOL-N BASE (NFIX N))
                        AVOID))
     (O< (NEW-SYMBOL1-MEASURE (BINARY-+ '1 (NFIX N))
                              BASE AVOID)
         (NEW-SYMBOL1-MEASURE N BASE AVOID))))
   (NEW-SYMBOL1 3 :SYSTEM
                . "clause-processors/generalize")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SUBSTITUTE-INTO-TERM)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SUBSTITUTE-INTO-TERM)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SUBSTITUTE-INTO-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (SUBSTITUTE-INTO-TERM-FLAG 3 :SYSTEM
                              . "clause-processors/unify-subst")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'MAGIC-EV)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'MAGIC-EV)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'MAGIC-EV)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'MAGIC-EV)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'MAGIC-EV)
     (NOT (CONSP X))
     (MV-NTH '0
             (TD-STUB-6 'MAGIC-EV
                        (CAR X)
                        ALIST STATE HARD-ERRP AOKP))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR X)))
           (ACL2-COUNT (CAR (CDR X))))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (MV-NTH '0
             (TD-STUB-6 'MAGIC-EV
                        (CAR (CDR X))
                        ALIST STATE HARD-ERRP AOKP))
     (MV-NTH '1
             (TD-STUB-6 'MAGIC-EV
                        (CAR (CDR X))
                        ALIST STATE HARD-ERRP AOKP))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CDR X))))))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (MV-NTH '0
             (TD-STUB-6 'MAGIC-EV
                        (CAR (CDR X))
                        ALIST STATE HARD-ERRP AOKP))
     (NOT (MV-NTH '1
                  (TD-STUB-6 'MAGIC-EV
                             (CAR (CDR X))
                             ALIST STATE HARD-ERRP AOKP)))
     (EQUAL (CAR (CDR X))
            (CAR (CDR (CDR X))))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR X))))
           (ACL2-COUNT (CAR (CDR (CDR X)))))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (MV-NTH '0
             (TD-STUB-6 'MAGIC-EV-LST
                        (CDR X)
                        ALIST STATE HARD-ERRP AOKP))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'MAGIC-EV))
     (NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (EQUAL (CAR X) 'IF)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'MAGIC-EV)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (MAGIC-EV-FLG 6 :SYSTEM
                 .
                 "clause-processors/meta-extract-user")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SEXPR)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SEXPR)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SEXPR)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SEXPR)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'SEXPR)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'SEXPR)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (4V-SEXPR-FLAG 2 :SYSTEM
                  . "centaur/4v-sexpr/sexpr-eval")))
 ((JUSTIFICATION (Y X)
                 (NIL O-P . O<)
                 ((BINARY-+ (AIG-AND-COUNT X)
                            (AIG-AND-COUNT Y))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (AIG-AND-COUNT X)
                             (AIG-AND-COUNT Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (AIG-AND-COUNT X)
                    (AIG-AND-COUNT Y))))
    ((NOT (EQUAL (MV-NTH '0 (AIG-AND-MAIN X Y))
                 ':REDUCED))
     (O< (BINARY-+ (AIG-AND-COUNT (MV-NTH '1 (AIG-AND-MAIN X Y)))
                   (AIG-AND-COUNT (MV-NTH '2 (AIG-AND-MAIN X Y))))
         (BINARY-+ (AIG-AND-COUNT X)
                   (AIG-AND-COUNT Y)))))
   (AIG-BINARY-AND 2 :SYSTEM . "centaur/aig/aig-base")))
 ((JUSTIFICATION (X FLAG)
                 (NIL T . NAT-LIST-<)
                 ((IF (EQL FLAG 'RW)
                      (CONS '1
                            (CONS '0 (CONS (ACL2-COUNT X) 'NIL)))
                    (CONS '1
                          (CONS '0 (CONS (ACL2-COUNT X) 'NIL))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL T . NAT-LIST-<)
                  ((IF (EQL FLAG 'RW)
                       (CONS '1
                             (CONS '0 (CONS (ACL2-COUNT X) 'NIL)))
                     (CONS '1
                           (CONS '0 (CONS (ACL2-COUNT X) 'NIL))))
                   IF MV-LIST RETURN-LAST))
   (((NOT (CONSP X))
     (NAT-LIST-< (IF 'NIL
                     (CONS '1
                           (CONS '0
                                 (CONS (ACL2-COUNT (CDR X)) 'NIL)))
                   (CONS '1
                         (CONS '0
                               (CONS (ACL2-COUNT (CDR X)) 'NIL))))
                 (IF (EQUAL FLAG 'RW)
                     (CONS '1
                           (CONS '0 (CONS (ACL2-COUNT X) 'NIL)))
                   (CONS '1
                         (CONS '0 (CONS (ACL2-COUNT X) 'NIL))))))
    ((EQUAL FLAG 'RW)
     (NOT (CONSP X))
     (NAT-LIST-< (IF 'T
                     (CONS '1
                           (CONS '0
                                 (CONS (ACL2-COUNT (CAR X)) 'NIL)))
                   (CONS '1
                         (CONS '0
                               (CONS (ACL2-COUNT (CAR X)) 'NIL))))
                 (IF (EQUAL FLAG 'RW)
                     (CONS '1
                           (CONS '0 (CONS (ACL2-COUNT X) 'NIL)))
                   (CONS '1
                         (CONS '0
                               (CONS (ACL2-COUNT X) 'NIL)))))))
   (SEXPR-REWRITE-FLAG 3 :SYSTEM
                       . "centaur/4v-sexpr/sexpr-rewrites")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::BETA-REDUCE-TERM)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::BETA-REDUCE-TERM)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM))
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::BETA-REDUCE-TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::BETA-REDUCE-FLAG 2 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (AIGNET::N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (IFIX AIGNET::N)
                                  (UNARY-- (IFIX '1))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (IFIX AIGNET::N)
                                   (UNARY-- (IFIX '1))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (IFIX AIGNET::N)
                          (UNARY-- (IFIX '1))))))
    ((NOT (INTEGERP (BINARY-+ (IFIX AIGNET::N)
                              (UNARY-- (IFIX '1)))))
     (NOT (< '0
             (BINARY-+ (IFIX AIGNET::N)
                       (UNARY-- (IFIX '1)))))
     (O< (NFIX (BINARY-+ (IFIX (BINARY-+ '-1 (LIFIX$INLINE AIGNET::N)))
                         (UNARY-- (IFIX '1))))
         (NFIX (BINARY-+ (IFIX AIGNET::N)
                         (UNARY-- (IFIX '1)))))))
   (AIGNET::AIGNET->CNF-VALS-ITER 6 :SYSTEM . "centaur/aignet/cnf")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((AIGNET::AXI-TERM-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((AIGNET::AXI-TERM-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGNET::AXI-TERM-COUNT X)))
    ((EQUAL (AIGNET::AXI-TERM-KIND$INLINE X)
            ':CONST)
     (EQUAL (AIGNET::AXI-TERM-KIND$INLINE X)
            ':VAR)
     (O< (AIGNET::AXI-TERM-COUNT (AIGNET::AXI-LIT->ABS$INLINE (AIGNET::AXI-GATE->RIGHT$INLINE X)))
         (AIGNET::AXI-TERM-COUNT X)))
    ((EQUAL (AIGNET::AXI-TERM-KIND$INLINE X)
            ':CONST)
     (EQUAL (AIGNET::AXI-TERM-KIND$INLINE X)
            ':VAR)
     (O< (AIGNET::AXI-TERM-COUNT (AIGNET::AXI-LIT->ABS$INLINE (AIGNET::AXI-GATE->LEFT$INLINE X)))
         (AIGNET::AXI-TERM-COUNT X))))
   (AIGNET::AXI-TERM-VARS 1 :SYSTEM
                          . "centaur/aignet/construction")))
 ((JUSTIFICATION (AIGNET::N AIGNET::FRAMES)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::FRAMES)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::FRAMES-NROWS AIGNET::FRAMES)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-FRAMES-TO-AIG-ENVS-AUX 3 :SYSTEM
                                          . "centaur/aignet/from-hons-aig")
   (AIGNET::AIGNET-SIM-FRAMES-REC :SYSTEM . "centaur/aignet/eval")))
 ((JUSTIFICATION (N)
                 (NIL O-P . O<)
                 ((NFIX N) . :ALL))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) . :ALL))
   (((O-P (NFIX N)))
    ((NOT (INTEGERP (FLOOR (LNFIX$INLINE N) '10)))
     (NOT (< '0 (FLOOR (LNFIX$INLINE N) '10)))
     (O< (NFIX (FLOOR (LNFIX$INLINE N) '10))
         (NFIX N))))
   (WRITE-ASCII-NAT 3 :SYSTEM . "centaur/aig/aiger-help")))
 ((JUSTIFICATION (STATE BUF STREAM)
                 (NIL O-P . O<)
                 ((AIGER-BUF-MEASURE STREAM BUF STATE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STATE BUF STREAM)
                  (NIL O-P . O<)
                  ((AIGER-BUF-MEASURE STREAM BUF STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGER-BUF-MEASURE STREAM BUF STATE)))
    ((NOT (INTEGERP (MV-NTH '0
                            (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))))
     (< (MV-NTH '0
                (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
        '48)
     (< '57
        (MV-NTH '0
                (PEEK-BYTE-BUF$INLINE STREAM BUF STATE)))
     (O< (AIGER-BUF-MEASURE STREAM
                            (MV-NTH '0
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))))
                            (MV-NTH '1
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE)))))
         (AIGER-BUF-MEASURE STREAM BUF STATE))))
   (READ-ASCII-NAT1 4 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (STATE BUF STREAM)
                  (NIL O-P . O<)
                  ((AIGER-BUF-MEASURE STREAM BUF STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGER-BUF-MEASURE STREAM BUF STATE)))
    ((NOT (EQUAL (MV-NTH '0
                         (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                 (CHAR-CODE CHAR)))
     (O< (AIGER-BUF-MEASURE STREAM
                            (MV-NTH '0
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))))
                            (MV-NTH '1
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE)))))
         (AIGER-BUF-MEASURE STREAM BUF STATE))))
   (SKIP-ASCII-CHARS 4 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (STATE BUF STREAM)
                  (NIL O-P . O<)
                  ((AIGER-BUF-MEASURE STREAM BUF STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGER-BUF-MEASURE STREAM BUF STATE)))
    ((NOT (INTEGERP (MV-NTH '0
                            (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))))
     (NOT (MEMBER-EQUAL (CODE-CHAR (MV-NTH '0
                                           (PEEK-BYTE-BUF$INLINE STREAM BUF STATE)))
                        '(#\Space #\Tab)))
     (O< (AIGER-BUF-MEASURE STREAM
                            (MV-NTH '0
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))))
                            (MV-NTH '1
                                    (SKIP-BYTE-BUF$INLINE STREAM
                                                          (MV-NTH '1
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE))
                                                          (MV-NTH '2
                                                                  (PEEK-BYTE-BUF$INLINE STREAM BUF STATE)))))
         (AIGER-BUF-MEASURE STREAM BUF STATE))))
   (SKIP-LINESPACE 3 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (STATE BUF STREAM)
                  (NIL O-P . O<)
                  ((AIGER-BUF-MEASURE STREAM BUF STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGER-BUF-MEASURE STREAM BUF STATE)))
    ((NOT (INTEGERP (MV-NTH '0
                            (PEEK-BYTE-BUF$INLINE STREAM
                                                  (MV-NTH '0
                                                          (SKIP-LINESPACE STREAM BUF STATE))
                                                  (MV-NTH '1
                                                          (SKIP-LINESPACE STREAM BUF STATE))))))
     (< (MV-NTH '0
                (PEEK-BYTE-BUF$INLINE STREAM
                                      (MV-NTH '0
                                              (SKIP-LINESPACE STREAM BUF STATE))
                                      (MV-NTH '1
                                              (SKIP-LINESPACE STREAM BUF STATE))))
        '48)
     (< '57
        (MV-NTH '0
                (PEEK-BYTE-BUF$INLINE STREAM
                                      (MV-NTH '0
                                              (SKIP-LINESPACE STREAM BUF STATE))
                                      (MV-NTH '1
                                              (SKIP-LINESPACE STREAM BUF STATE)))))
     (O< (AIGER-BUF-MEASURE STREAM
                            (MV-NTH '1
                                    (READ-ASCII-NAT STREAM
                                                    (MV-NTH '1
                                                            (PEEK-BYTE-BUF$INLINE STREAM
                                                                                  (MV-NTH '0
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))
                                                                                  (MV-NTH '1
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))))
                                                    (MV-NTH '2
                                                            (PEEK-BYTE-BUF$INLINE STREAM
                                                                                  (MV-NTH '0
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))
                                                                                  (MV-NTH '1
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))))))
                            (MV-NTH '2
                                    (READ-ASCII-NAT STREAM
                                                    (MV-NTH '1
                                                            (PEEK-BYTE-BUF$INLINE STREAM
                                                                                  (MV-NTH '0
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))
                                                                                  (MV-NTH '1
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))))
                                                    (MV-NTH '2
                                                            (PEEK-BYTE-BUF$INLINE STREAM
                                                                                  (MV-NTH '0
                                                                                          (SKIP-LINESPACE STREAM BUF STATE))
                                                                                  (MV-NTH '1
                                                                                          (SKIP-LINESPACE STREAM BUF STATE)))))))
         (AIGER-BUF-MEASURE STREAM BUF STATE))))
   (READ-NATS-IN-LINE 3 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (STATE BUF STREAM)
                  (NIL O-P . O<)
                  ((AIGER-BUF-MEASURE STREAM BUF STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGER-BUF-MEASURE STREAM BUF STATE)))
    ((NOT (MV-NTH '0
                  (READ-BYTE-BUF$INLINE STREAM BUF STATE)))
     (NOT (LOGBITP '7
                   (MV-NTH '0
                           (READ-BYTE-BUF$INLINE STREAM BUF STATE))))
     (O< (AIGER-BUF-MEASURE STREAM
                            (MV-NTH '1
                                    (READ-BYTE-BUF$INLINE STREAM BUF STATE))
                            (MV-NTH '2
                                    (READ-BYTE-BUF$INLINE STREAM BUF STATE)))
         (AIGER-BUF-MEASURE STREAM BUF STATE))))
   (READ-BYTECODED-NAT 3 :SYSTEM . "centaur/aig/aiger-help")))
 ((JUSTIFICATION (CLAUSE TERM FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'TERM)
                      (ACL2-COUNT TERM)
                    (ACL2-COUNT CLAUSE))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CLAUSE TERM FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'TERM)
                       (ACL2-COUNT TERM)
                     (ACL2-COUNT CLAUSE))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'TERM)
              (ACL2-COUNT TERM)
            (ACL2-COUNT CLAUSE))))
    ((EQUAL FLAG 'TERM)
     (NOT (CONSP CLAUSE))
     (O< (IF 'T
             (ACL2-COUNT (CAR CLAUSE))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT TERM)
           (ACL2-COUNT CLAUSE))))
    ((EQUAL FLAG 'TERM)
     (NOT (CONSP CLAUSE))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR CLAUSE)))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT TERM)
           (ACL2-COUNT CLAUSE))))
    ((NOT (EQUAL FLAG 'TERM))
     (NOT (CONSP TERM))
     (EQUAL (CAR TERM) 'QUOTE)
     (MEMBER-EQUAL (CAR TERM)
                   '(EVAL-BDD EVAL-BDD-LIST))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR TERM)))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT TERM)
           (ACL2-COUNT CLAUSE)))))
   (COLLECT-EVAL-BDD-VALS-FLAG 3 :SYSTEM . "centaur/ubdds/witness")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::TERM-RW)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::TERM-RW)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::TERM-RW)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (HONS-GET X GL::MEM)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::TERM-RW-IND 5 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::TERM-RW-ALIST)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::TERM-RW-ALIST)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (HONS-GET X GL::MEM)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::TERM-RW-ALIST-IND 6 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (COUNT)
                 (NIL O-P . O<)
                 ((ABS (IFIX COUNT))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ABS (IFIX I)) IF MV-LIST RETURN-LAST))
   (((O-P (ABS (IFIX I))))
    ((NOT (INTEGERP I))
     (EQUAL I '0)
     (EQUAL (FIX R) '0)
     (< '0 I)
     (O< (ABS (IFIX (BINARY-+ I '1)))
         (ABS (IFIX I))))
    ((NOT (INTEGERP I))
     (EQUAL I '0)
     (EQUAL (FIX R) '0)
     (NOT (< '0 I))
     (O< (ABS (IFIX (BINARY-+ I '-1)))
         (ABS (IFIX I)))))
   (EXPT 2))
  ((JUSTIFICATION (COUNT)
                  (NIL O-P . O<)
                  ((ABS (IFIX COUNT))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABS (IFIX COUNT))))
    ((NOT (INTEGERP COUNT))
     (EQUAL COUNT '0)
     (< COUNT '0)
     (O< (ABS (IFIX (BINARY-+ '-1 COUNT)))
         (ABS (IFIX COUNT))))
    ((NOT (INTEGERP COUNT))
     (EQUAL COUNT '0)
     (NOT (< COUNT '0))
     (O< (ABS (IFIX (BINARY-+ '1 COUNT)))
         (ABS (IFIX COUNT)))))
   (BITOPS::ASH**-IND 2 :SYSTEM
                      . "centaur/bitops/ihsext-basics")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::NUM-REGS AIGNET)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::REG-COPY-VALUES 6 :SYSTEM . "centaur/aignet/copying")
   (AIGNET::AIGNET-VALS-COPY-REGS :SYSTEM . "centaur/aignet/cube-sat")
   (AIGNET::AIGNET-FINISH-REG-UBDD-ORDER :SYSTEM . "centaur/aignet/parametrize")
   (AIGNET::OBSERVABILITY-FIXED-REGS :SYSTEM
                                     . "centaur/aignet/observability")
   (AIGNET::AIGNET-SELF-CONSTPROP-INIT-REGS :SYSTEM
                                            . "centaur/aignet/self-constprop")
   (AIGNET::AIGNET-BALANCE-NXSTS :SYSTEM . "centaur/aignet/balance")
   (AIGNET::AIGNET-VALS->REGVALS-AFTER-INVALS :SYSTEM . "centaur/aignet/fraig")
   (AIGNET::S32V-RANDOMIZE-REGS :SYSTEM . "centaur/aignet/vecsim")
   (AIGNET::AIGNET-GET-IPASIR-CTREX-REGVALS :SYSTEM . "centaur/aignet/ipasir")))
 ((JUSTIFICATION (AIGNET::N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '4
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '4
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '4
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ '4
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ '4
                       (UNARY-- (NFIX AIGNET::N)))))
     (TRUTH::DEPENDS-ON4$INLINE AIGNET::N AIGNET::TRUTH)
     (O< (NFIX (BINARY-+ '4
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ '4
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::TRUTH4-DEPS-BOUNDED 2 :SYSTEM . "centaur/aignet/cuts4")))
 ((JUSTIFICATION (AIGNET::SIZE0 AIGNET::SIZE1)
                 (NIL O-P . O<)
                 ((BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                            (LNFIX$INLINE AIGNET::SIZE0))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::SIZE0 AIGNET::SIZE1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                             (LNFIX$INLINE AIGNET::SIZE0))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                    (LNFIX$INLINE AIGNET::SIZE0))))
    ((NOT (INTEGERP AIGNET::SIZE0))
     (NOT (< '0 AIGNET::SIZE0))
     (NOT (INTEGERP AIGNET::SIZE1))
     (NOT (< '0 AIGNET::SIZE1))
     (NOT (EQUAL (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX0 AIGNET::CUTSDB)
                 (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX1 AIGNET::CUTSDB)))
     (O< (BINARY-+ (LNFIX$INLINE (BINARY-+ '-1 AIGNET::SIZE1))
                   (LNFIX$INLINE (BINARY-+ '-1 AIGNET::SIZE0)))
         (BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                   (LNFIX$INLINE AIGNET::SIZE0))))
    ((NOT (INTEGERP AIGNET::SIZE0))
     (NOT (< '0 AIGNET::SIZE0))
     (NOT (INTEGERP AIGNET::SIZE1))
     (NOT (< '0 AIGNET::SIZE1))
     (EQUAL (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX0 AIGNET::CUTSDB)
            (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX1 AIGNET::CUTSDB))
     (NOT (< (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX0 AIGNET::CUTSDB)
             (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX1 AIGNET::CUTSDB)))
     (O< (BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                   (LNFIX$INLINE (BINARY-+ '-1 AIGNET::SIZE0)))
         (BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                   (LNFIX$INLINE AIGNET::SIZE0))))
    ((NOT (INTEGERP AIGNET::SIZE0))
     (NOT (< '0 AIGNET::SIZE0))
     (NOT (INTEGERP AIGNET::SIZE1))
     (NOT (< '0 AIGNET::SIZE1))
     (EQUAL (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX0 AIGNET::CUTSDB)
            (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX1 AIGNET::CUTSDB))
     (< (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX0 AIGNET::CUTSDB)
        (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX1 AIGNET::CUTSDB))
     (O< (BINARY-+ (LNFIX$INLINE (BINARY-+ '-1 AIGNET::SIZE1))
                   (LNFIX$INLINE AIGNET::SIZE0))
         (BINARY-+ (LNFIX$INLINE AIGNET::SIZE1)
                   (LNFIX$INLINE AIGNET::SIZE0)))))
   (AIGNET::LEAVES-MERGE-COUNT 5 :SYSTEM . "centaur/aignet/cuts4")))
 ((JUSTIFICATION (TRUTH::N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (ASH '1 '16)
                                  (UNARY-- (NFIX TRUTH::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (TRUTH::N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (ASH '1 '16)
                                   (UNARY-- (NFIX TRUTH::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (ASH '1 '16)
                          (UNARY-- (NFIX TRUTH::N))))))
    ((NOT (INTEGERP (BINARY-+ (ASH '1 '16)
                              (UNARY-- (NFIX TRUTH::N)))))
     (NOT (< '0
             (BINARY-+ (ASH '1 '16)
                       (UNARY-- (NFIX TRUTH::N)))))
     (O< (NFIX (BINARY-+ (ASH '1 '16)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE TRUTH::N))))))
         (NFIX (BINARY-+ (ASH '1 '16)
                         (UNARY-- (NFIX TRUTH::N)))))))
   (TRUTH::RECORD-ALL-NPN4-PERMS 4 :SYSTEM . "centaur/truth/perm4")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-DERIVE-TRUTH4S 3 :SYSTEM . "centaur/aignet/rwlib")
   (AIGNET::SWEEP-OBSERVABILITY-DOM-SUPERGATES-TAILREC :SYSTEM
                                                       . "centaur/aignet/dom-supergate-sweep")
   (AIGNET::AIGNET-CONSTPROP-STATS :SYSTEM . "centaur/aignet/constprop")
   (AIGNET::AIGNET-SELF-CONSTPROP-COPY-INIT :SYSTEM
                                            . "centaur/aignet/self-constprop")
   (AIGNET::FRAIG-SWEEP-AUX :SYSTEM . "centaur/aignet/fraig")
   (AIGNET::AIGNET-RECORD-LEVELS-AUX :SYSTEM . "centaur/aignet/levels")
   (AIGNET::STRASH-DELETE-NODES-ABOVE :SYSTEM . "centaur/aignet/rewrite")
   (AIGNET::COUNT-XORS-REC :SYSTEM . "centaur/aignet/stats")))
 ((JUSTIFICATION (AIGNET::N AIGNET::CLASSES)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::CLASSES)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::CLASSES-SIZE AIGNET::CLASSES)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::SHOW-CLASS-NEXTS 2 :SYSTEM
                             . "centaur/aignet/equiv-classes")
   (AIGNET::FRAIG-ADD-EQUIV-CLASS-OUTPUTS-AUX-1 :SYSTEM . "centaur/aignet/fraig")))
 ((JUSTIFICATION (AIGNET::N AIGNET::AIGNET-LEVELS)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::AIGNET-LEVELS)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::U32-LENGTH AIGNET::AIGNET-LEVELS)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-UNMARK-HIGHER-LEVELS 4 :SYSTEM . "centaur/aignet/fraig")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-BALANCE-OUTS 9 :SYSTEM . "centaur/aignet/balance")
   (AIGNET::AIGNET-OUTPUT-LITS :SYSTEM
                               . "centaur/aignet/simplify-marked")))
 ((JUSTIFICATION (SATLINK::LIT)
                 (NIL O-P . O<)
                 ((SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SATLINK::LIT)
                  (NIL O-P . O<)
                  ((SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
    ((EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA))
     (NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                AIGNET))
                 '1))
     (O< (SATLINK::LIT->VAR$INLINE (AIGNET::SNODE->FANIN$INLINE (AIGNET::ID->SLOT1 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                                   AIGNET)))
         (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
    ((EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA))
     (NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                AIGNET))
                 '1))
     (O< (SATLINK::LIT->VAR$INLINE (AIGNET::SNODE->FANIN$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                                   AIGNET)))
         (SATLINK::LIT->VAR$INLINE SATLINK::LIT))))
   (AIGNET::EVAL-CUT-IMPLEMENTATION-COPY-REC 8 :SYSTEM . "centaur/aignet/rewrite"))
  ((JUSTIFICATION (SATLINK::LIT)
                  (NIL O-P . O<)
                  ((SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
    ((EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA3))
     (NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                AIGNET))
                 '1))
     (EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA2))
     (O< (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN1 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                            AIGNET))
         (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
    ((EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA3))
     (NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                AIGNET))
                 '1))
     (EQUAL '1
            (AIGNET::EBA-GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                 AIGNET::EBA2))
     (O< (SATLINK::LIT->VAR$INLINE (AIGNET::SNODE->FANIN$INLINE (AIGNET::ID->SLOT0 (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                                                                                   AIGNET)))
         (SATLINK::LIT->VAR$INLINE SATLINK::LIT))))
   (AIGNET::CUT-IMPL-FIND-COPIES-REC 8 :SYSTEM . "centaur/aignet/rewrite"))
  ((JUSTIFICATION (SATLINK::LIT)
                  (NIL O-P . O<)
                  ((SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
    ((NOT (INTEGERP (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
     (NOT (< '0
             (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
     (EQUAL '0
            (GET-BIT (SATLINK::LIT->VAR$INLINE SATLINK::LIT)
                     AIGNET::CONSTMARKS))
     (NOT (< (SATLINK::LIT->VAR$INLINE (AIGNET::LIT-COPY$INLINE SATLINK::LIT AIGNET::LITCLASSES))
             (SATLINK::LIT->VAR$INLINE SATLINK::LIT)))
     (O< (SATLINK::LIT->VAR$INLINE (AIGNET::LIT-COPY$INLINE SATLINK::LIT AIGNET::LITCLASSES))
         (SATLINK::LIT->VAR$INLINE SATLINK::LIT))))
   (AIGNET::LITCLASS-PATH-COMPRESS 4 :SYSTEM
                                   . "centaur/aignet/self-constprop")))
 ((JUSTIFICATION (AIGNET::N AIGNET::OBS-SDOM-ARRAY)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::OBS-SDOM-ARRAY)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::OBS-SDOM-ARRAY-COLLECT 2 :SYSTEM
                                   .
                                   "centaur/aignet/internal-observability-super")
   (AIGNET::MARK-UNREACHABLE-NODES :SYSTEM
                                   . "centaur/aignet/unreachability"))
  ((JUSTIFICATION (AIGNET::N AIGNET::OBS-SDOM-ARRAY)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (< (LNFIX$INLINE AIGNET::N)
             (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)))
     (O< (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::SDOMINFO-LENGTH AIGNET::OBS-SDOM-ARRAY)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::COLLECT-UNREACHABLE-NODES 3 :SYSTEM
                                      . "centaur/aignet/unreachability")))
 ((JUSTIFICATION (BIGMEM-ASYMMETRIC::I BIGMEM-ASYMMETRIC::BM)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                                  (UNARY-- BIGMEM-ASYMMETRIC::I)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (BIGMEM-ASYMMETRIC::I BIGMEM-ASYMMETRIC::BM)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                                   (UNARY-- BIGMEM-ASYMMETRIC::I)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                          (UNARY-- BIGMEM-ASYMMETRIC::I)))))
    ((NOT (INTEGERP (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                              (UNARY-- BIGMEM-ASYMMETRIC::I))))
     (NOT (< '0
             (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                       (UNARY-- BIGMEM-ASYMMETRIC::I))))
     (O< (NFIX (BINARY-+ (BIGMEM-ASYMMETRIC::AL (BIGMEM-ASYMMETRIC::WRITE-MEM$C$INLINE BIGMEM-ASYMMETRIC::I '0
                                                                                       BIGMEM-ASYMMETRIC::BM))
                         (UNARY-- (BINARY-+ '1 BIGMEM-ASYMMETRIC::I))))
         (NFIX (BINARY-+ (BIGMEM-ASYMMETRIC::AL BIGMEM-ASYMMETRIC::BM)
                         (UNARY-- BIGMEM-ASYMMETRIC::I))))))
   (BIGMEM-ASYMMETRIC::INIT-AI-ZERO-SMALL 2 :SYSTEM
                                          .
                                          "centaur/bigmems/bigmem-asymmetric/concrete-asymmetric")))
 ((JUSTIFICATION (OCCS OCC MOD FLAG)
                 (NIL T . NAT-LIST-<)
                 ((IF (EQL FLAG 'MOD)
                      (CONS (ACL2-COUNT MOD) (CONS '5 'NIL))
                    (IF (EQL FLAG 'OCC)
                        (CONS (ACL2-COUNT OCC) (CONS '6 'NIL))
                      (CONS (ACL2-COUNT OCCS)
                            (CONS '4 'NIL))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (OCCS OCC MOD FLAG)
                  (NIL T . NAT-LIST-<)
                  ((IF (EQL FLAG 'MOD)
                       (CONS (ACL2-COUNT MOD) (CONS '5 'NIL))
                     (IF (EQL FLAG 'OCC)
                         (CONS (ACL2-COUNT OCC) (CONS '6 'NIL))
                       (CONS (ACL2-COUNT OCCS)
                             (CONS '4 'NIL))))
                   IF MV-LIST RETURN-LAST))
   (((NOT (EQUAL FLAG 'OCC))
     (NAT-LIST-< (IF 'T
                     (CONS (ACL2-COUNT (GPL ':OP OCC)) '(5))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(6))
                     (CONS (ACL2-COUNT 'NIL) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(5))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(6))
                     (CONS (ACL2-COUNT OCCS) '(4))))))
    ((EQUAL FLAG 'MOD)
     (EQUAL FLAG 'OCC)
     (NOT (CONSP OCCS))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(5))
                   (IF 'T
                       (CONS (ACL2-COUNT (CAR OCCS)) '(6))
                     (CONS (ACL2-COUNT 'NIL) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(5))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(6))
                     (CONS (ACL2-COUNT OCCS) '(4))))))
    ((EQUAL FLAG 'MOD)
     (EQUAL FLAG 'OCC)
     (NOT (CONSP OCCS))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(5))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(6))
                     (CONS (ACL2-COUNT (CDR OCCS)) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(5))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(6))
                     (CONS (ACL2-COUNT OCCS) '(4))))))
    ((NOT (EQUAL FLAG 'MOD))
     (GPL ':X MOD)
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(5))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(6))
                     (CONS (ACL2-COUNT (GPL ':OCCS MOD))
                           '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(5))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(6))
                     (CONS (ACL2-COUNT OCCS) '(4)))))))
   (MOD-FLAG 4 :SYSTEM
             . "centaur/esim/esim-sexpr-support")))
 ((JUSTIFICATION (FORMS)
                 (NIL T . NAT-LIST-<)
                 ((ACL2-COUNT FORMS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL T . NAT-LIST-<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((NOT (CONSP X))
     (NAT-LIST-< (ACL2-COUNT (CAR X))
                 (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NAT-LIST-< (ACL2-COUNT (CDR X))
                 (ACL2-COUNT X))))
   (STRINGIFY 1 :SYSTEM
              . "centaur/esim/esim-sexpr-support"))
  ((JUSTIFICATION (X)
                  (NIL T . NAT-LIST-<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((NOT (CONSP X))
     (NAT-LIST-< (ACL2-COUNT (CDR X))
                 (ACL2-COUNT X))))
   (STRINGIFY-LIST 1 :SYSTEM
                   . "centaur/esim/esim-sexpr-support")
   (4V-X-RES :SYSTEM . "centaur/esim/esim-spec")
   (ESIM-SEXPR-INDICES-OCCS :SYSTEM . "centaur/esim/esim-sexpr"))
  ((JUSTIFICATION (FORMS)
                  (NIL T . NAT-LIST-<)
                  ((ACL2-COUNT FORMS)
                   IF MV-LIST RETURN-LAST))
   (((NOT (CONSP FORMS))
     (NAT-LIST-< (ACL2-COUNT (CDR FORMS))
                 (ACL2-COUNT FORMS)))
    ((NOT (CONSP FORMS))
     (IF (CONSP (CAR FORMS))
         (EQUAL (CAR (CAR FORMS)) 'TEMPLATE)
       'NIL)
     (NAT-LIST-< (ACL2-COUNT (CAR FORMS))
                 (ACL2-COUNT FORMS)))
    ((NOT (CONSP FORMS))
     (NOT (CONSP (CAR FORMS)))
     (NOT (EQUAL (CAR (CAR FORMS)) 'TEMPLATE))
     (NOT (CHECK-FEATURES FEATURES (CAR (CDR (CAR FORMS)))))
     (NAT-LIST-< (ACL2-COUNT (CDR (CDR (CAR FORMS))))
                 (ACL2-COUNT FORMS))))
   (REPLACE-TEMPLATES 2 :SYSTEM . "centaur/esim/esim-sexpr")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE (CDR (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::X)))))
   (VL2014::VL-SCOPEITEM-ALIST-COUNT 1 :SYSTEM
                                     . "centaur/vl2014/mlib/scopestack")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X))))
    ((NOT (EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE VL2014::X)
                 ':LOCAL))
     (O< (ACL2-COUNT (VL2014::VL-SCOPESTACK-FIX$INLINE (VL2014::VL-SCOPESTACK-LOCAL->SUPER$INLINE VL2014::X)))
         (ACL2-COUNT (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X)))))
   (VL2014::VL-SCOPESTACK-COUNT 1 :SYSTEM
                                . "centaur/vl2014/mlib/scopestack")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-REPORTCARD-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-REPORTCARD-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-REPORTCARD-COUNT VL2014::X)))
    ((NOT (CONSP (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X)))
     (O< (VL2014::VL-REPORTCARD-COUNT (CDR (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X)))
         (VL2014::VL-REPORTCARD-COUNT VL2014::X))))
   (VL2014::VL-CLEAN-REPORTCARD-AUX 2 :SYSTEM
                                    . "centaur/vl2014/mlib/reportcard")
   (VL2014::VL-PRINT-REPORTCARD-AUX-FN :SYSTEM
                                       .
                                       "centaur/vl2014/mlib/print-warnings")))
 ((JUSTIFICATION (STR::HARD-RIGHT-MARGIN STR::COL N)
                 (NIL O-P . O<)
                 ((TWO-NATS-MEASURE (NFIX N)
                                    (NFIX (BINARY-+ (NFIX STR::COL)
                                                    (UNARY-- (POS-FIX STR::HARD-RIGHT-MARGIN)))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STR::HARD-RIGHT-MARGIN STR::COL N)
                  (NIL O-P . O<)
                  ((TWO-NATS-MEASURE (NFIX N)
                                     (NFIX (BINARY-+ (NFIX STR::COL)
                                                     (UNARY-- (POS-FIX STR::HARD-RIGHT-MARGIN)))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (TWO-NATS-MEASURE (NFIX N)
                            (NFIX (BINARY-+ (NFIX STR::COL)
                                            (UNARY-- (POS-FIX STR::HARD-RIGHT-MARGIN)))))))
    ((NOT (INTEGERP (NFIX N)))
     (NOT (< '0 (NFIX N)))
     (< (POS-FIX STR::HARD-RIGHT-MARGIN)
        (NFIX STR::COL))
     (O< (TWO-NATS-MEASURE (NFIX (BINARY-+ '-1 (NFIX N)))
                           (NFIX (BINARY-+ (NFIX (BINARY-+ '1 (NFIX STR::COL)))
                                           (UNARY-- (POS-FIX (POS-FIX STR::HARD-RIGHT-MARGIN))))))
         (TWO-NATS-MEASURE (NFIX N)
                           (NFIX (BINARY-+ (NFIX STR::COL)
                                           (UNARY-- (POS-FIX STR::HARD-RIGHT-MARGIN)))))))
    ((NOT (INTEGERP (NFIX N)))
     (NOT (< '0 (NFIX N)))
     (NOT (< (POS-FIX STR::HARD-RIGHT-MARGIN)
             (NFIX STR::COL)))
     (O< (TWO-NATS-MEASURE (NFIX (NFIX N))
                           (NFIX (BINARY-+ (NFIX '0)
                                           (UNARY-- (POS-FIX (POS-FIX STR::HARD-RIGHT-MARGIN))))))
         (TWO-NATS-MEASURE (NFIX N)
                           (NFIX (BINARY-+ (NFIX STR::COL)
                                           (UNARY-- (POS-FIX STR::HARD-RIGHT-MARGIN))))))))
   (STR::SPACES1 4 :SYSTEM . "std/strings/pretty")))
 ((JUSTIFICATION (OCCS)
                 (NIL T . NAT-LIST-<)
                 ((LEN OCCS) IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (OCCS)
                  (NIL T . NAT-LIST-<)
                  ((LEN OCCS) IF MV-LIST RETURN-LAST))
   (((NOT (CONSP OCCS))
     (NOT (CONSP (GPL ':OCCS MOD)))
     (NAT-LIST-< (LEN (CDR OCCS))
                 (LEN OCCS))))
   (ESIM-OCCS-IND 4 :SYSTEM . "centaur/esim/esim-spec")))
 ((JUSTIFICATION (GL::INTERP-PROFILER)
                 (NIL O-P . O<)
                 ((LEN (GL::PROF-STACK GL::INTERP-PROFILER))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (GL::INTERP-PROFILER)
                  (NIL O-P . O<)
                  ((LEN (GL::PROF-STACK GL::INTERP-PROFILER))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (GL::PROF-STACK GL::INTERP-PROFILER))))
    ((NOT (GL::PROF-ENABLEDP GL::INTERP-PROFILER))
     (NOT (CONSP (GL::PROF-STACK GL::INTERP-PROFILER)))
     (O< (LEN (GL::PROF-STACK (GL::PROF-POP-INCREMENT 'NIL
                                                      GL::INTERP-PROFILER)))
         (LEN (GL::PROF-STACK GL::INTERP-PROFILER)))))
   (GL::PROF-UNWIND-STACK-AUX 1 :SYSTEM . "centaur/gl/prof")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((IF X (BINARY-+ '1 (LEN X)) '0)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((IF X (BINARY-+ '1 (LEN X)) '0)
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF X (BINARY-+ '1 (LEN X)) '0)))
    ((EQUAL X 'NIL)
     (O< (IF (CDR X)
             (BINARY-+ '1 (LEN (CDR X)))
           '0)
         (IF X (BINARY-+ '1 (LEN X)) '0))))
   (STEPS-TO-NIL 1 :SYSTEM
                 . "system/merge-sort-term-order")))
 ((JUSTIFICATION (GL::IDX GL::BVAR-DB)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                                  (UNARY-- (NFIX GL::IDX))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N GL::BVAR-DB)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                       (UNARY-- (NFIX N)))))
     (O< (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                         (UNARY-- (NFIX N)))))))
   (GL::PARAMETRIZE-BVAR-DB-AUX 4 :SYSTEM . "centaur/gl/param")
   (GL::GLCP-CTREX-BVAR-DB-TO-TERM-DEP-MAP :SYSTEM . "centaur/gl/ctrex-utils"))
  ((JUSTIFICATION (GL::IDX GL::BVAR-DB)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                                   (UNARY-- (NFIX GL::IDX))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                          (UNARY-- (NFIX GL::IDX))))))
    ((NOT (INTEGERP (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                              (UNARY-- (LNFIX$INLINE GL::IDX)))))
     (NOT (< '0
             (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                       (UNARY-- (LNFIX$INLINE GL::IDX)))))
     (O< (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE GL::IDX))))))
         (NFIX (BINARY-+ (GL::NEXT-BVAR GL::BVAR-DB)
                         (UNARY-- (NFIX GL::IDX)))))))
   (GL::GLMC-BVAR-DB-TO-STATE-UPDATES 3 :SYSTEM
                                      . "centaur/glmc/glmc-generic-defs")))
 ((JUSTIFICATION (DEPGRAPH::PREV DEPGRAPH::CURR
                                 DEPGRAPH::GRAPH DEPGRAPH::ORIG)
                 (NIL O-P . O<)
                 ((SET::CARDINALITY (SET::DIFFERENCE (SET::UNION DEPGRAPH::ORIG
                                                                 (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))
                                                     (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (DEPGRAPH::PREV DEPGRAPH::CURR
                                  DEPGRAPH::GRAPH DEPGRAPH::ORIG)
                  (NIL O-P . O<)
                  ((SET::CARDINALITY (SET::DIFFERENCE (SET::UNION DEPGRAPH::ORIG
                                                                  (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))
                                                      (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (SET::CARDINALITY (SET::DIFFERENCE (SET::UNION DEPGRAPH::ORIG
                                                         (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))
                                             (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV)))))
    ((NOT (SET::SUBSET (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV)
                       (SET::UNION DEPGRAPH::ORIG
                                   (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))))
     (SET::SUBSET (DEPGRAPH::TRANSDEPS-DIRECT-FOR-NODES DEPGRAPH::CURR DEPGRAPH::GRAPH)
                  (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV))
     (O< (SET::CARDINALITY (SET::DIFFERENCE (SET::UNION DEPGRAPH::ORIG
                                                        (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))
                                            (SET::UNION (SET::DIFFERENCE (DEPGRAPH::TRANSDEPS-DIRECT-FOR-NODES DEPGRAPH::CURR DEPGRAPH::GRAPH)
                                                                         (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV))
                                                        (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV))))
         (SET::CARDINALITY (SET::DIFFERENCE (SET::UNION DEPGRAPH::ORIG
                                                        (DEPGRAPH::TRANSDEPS-ALLNODES DEPGRAPH::GRAPH))
                                            (SET::UNION DEPGRAPH::CURR DEPGRAPH::PREV))))))
   (DEPGRAPH::TRANSDEPS-AUX 4 :SYSTEM
                            . "centaur/depgraph/transdeps")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'PSEUDO-TERM-FIX)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'PSEUDO-TERM-FIX)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'PSEUDO-TERM-FIX)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PSEUDO-TERM-FIX)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'PSEUDO-TERM-FIX))
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (SYMBOLP (CAR X))
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (SYMBOLP (CAR X)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'PSEUDO-TERM-FIX)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (PSEUDO-TERM-FIX-FLAG 2 :SYSTEM
                         . "clause-processors/pseudo-term-fty")))
 ((JUSTIFICATION (CMR::REFCOUNTS)
                 (NIL O-P . O<)
                 ((LEN (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CMR::REFCOUNTS)
                  (NIL O-P . O<)
                  ((LEN (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS))))
    ((NOT (CONSP (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS)))
     (O< (LEN (CMR::TERM-REFCOUNTS-FIX$INLINE (CDR (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS))))
         (LEN (CMR::TERM-REFCOUNTS-FIX$INLINE CMR::REFCOUNTS)))))
   (CMR::COLLECT-MULTIREF-TERMS 1 :SYSTEM . "centaur/meta/let-abs")))
 ((JUSTIFICATION (RP::KEYS)
                 (NIL O-P . O<)
                 ((RP::CONS-COUNT RP::KEYS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (RP::KEYS)
                  (NIL O-P . O<)
                  ((RP::CONS-COUNT RP::KEYS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (RP::CONS-COUNT RP::KEYS)))
    ((NOT (CONSP RP::KEYS))
     (O< (RP::CONS-COUNT (CDR RP::KEYS))
         (RP::CONS-COUNT RP::KEYS))))
   (RP::HONS-GET-LIST-VALUES-TERM 2 :SYSTEM
                                  .
                                  "projects/rp-rewriter/meta/hons-get-meta")))
 ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
                      (ACL2-COUNT SVL::X)
                    (ACL2-COUNT SVL::LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
                       (ACL2-COUNT SVL::X)
                     (ACL2-COUNT SVL::LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
              (ACL2-COUNT SVL::X)
            (ACL2-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
     (NOT (CONSP SVL::LST))
     (O< (IF 'T
             (ACL2-COUNT (CAR SVL::LST))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
     (NOT (CONSP SVL::LST))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR SVL::LST)))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST))))
    ((NOT (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG))
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':VAR)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':QUOTE)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':NODE)
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR SVL::X)))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL$-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST)))))
   (SVL::SVEXL-NODE-EVAL$-WOG-FLAG 5 :SYSTEM
                                   .
                                   "centaur/svl/svexl/svexl-eval-dollar")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 (((LAMBDA (X) (ACL2-COUNT X))
                   (SV::PATH-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  (((LAMBDA (X) (ACL2-COUNT X))
                    (SV::PATH-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (SV::PATH-FIX$INLINE X))))
    ((NOT (EQUAL (SV::PATH-KIND$INLINE X)
                 ':SCOPE))
     (O< (ACL2-COUNT (SV::PATH-FIX$INLINE (SV::PATH-SCOPE->SUBPATH$INLINE X)))
         (ACL2-COUNT (SV::PATH-FIX$INLINE X)))))
   (SV::PATH-COUNT 1 :SYSTEM . "centaur/sv/mods/address")))
 ((JUSTIFICATION (BITOPS::SLICES)
                 (NIL O-P . O<)
                 ((LPOSFIX$INLINE BITOPS::SLICES)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::ITERS)
                  (NIL O-P . O<)
                  ((LPOSFIX$INLINE AIGNET::ITERS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LPOSFIX$INLINE AIGNET::ITERS)))
    ((EQUAL (LPOSFIX$INLINE AIGNET::ITERS)
            '1)
     (O< (LPOSFIX$INLINE (BINARY-+ '-1
                                   (LPOSFIX$INLINE AIGNET::ITERS)))
         (LPOSFIX$INLINE AIGNET::ITERS))))
   (AIGNET::CONSTPROP-ITER 4 :SYSTEM . "centaur/aignet/constprop"))
  ((JUSTIFICATION (BITOPS::SLICES)
                  (NIL O-P . O<)
                  ((LPOSFIX$INLINE BITOPS::SLICES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LPOSFIX$INLINE BITOPS::SLICES)))
    ((EQUAL '1
            (LPOSFIX$INLINE BITOPS::SLICES))
     (O< (LPOSFIX$INLINE (BINARY-+ (LPOSFIX$INLINE BITOPS::SLICES)
                                   (UNARY-- (LOGCDR$INLINE (LPOSFIX$INLINE BITOPS::SLICES)))))
         (LPOSFIX$INLINE BITOPS::SLICES)))
    ((EQUAL '1
            (LPOSFIX$INLINE BITOPS::SLICES))
     (O< (LPOSFIX$INLINE (LOGCDR$INLINE (LPOSFIX$INLINE BITOPS::SLICES)))
         (LPOSFIX$INLINE BITOPS::SLICES))))
   (BITOPS::FAST-PSEL-REC 5 :SYSTEM
                          . "centaur/bitops/fast-part-select")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 (((LAMBDA (X) (ACL2-COUNT X))
                   (BITOPS::SPARSEINT$-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  (((LAMBDA (X) (ACL2-COUNT X))
                    (BITOPS::SPARSEINT$-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (BITOPS::SPARSEINT$-FIX$INLINE X))))
    ((NOT (EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
                 ':CONCAT))
     (O< (ACL2-COUNT (BITOPS::SPARSEINT$-FIX$INLINE (BITOPS::SPARSEINT$-CONCAT->MSBS$INLINE X)))
         (ACL2-COUNT (BITOPS::SPARSEINT$-FIX$INLINE X))))
    ((NOT (EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
                 ':CONCAT))
     (O< (ACL2-COUNT (BITOPS::SPARSEINT$-FIX$INLINE (BITOPS::SPARSEINT$-CONCAT->LSBS$INLINE X)))
         (ACL2-COUNT (BITOPS::SPARSEINT$-FIX$INLINE X)))))
   (BITOPS::SPARSEINT$-COUNT 1
                             :SYSTEM . "centaur/bitops/sparseint")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::ASSIGNS-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::ASSIGNS-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::ASSIGNS-FIX$INLINE X))))
    ((NOT (CONSP (SV::ASSIGNS-FIX$INLINE X)))
     (O< (LEN (SV::ASSIGNS-FIX$INLINE (CDR (SV::ASSIGNS-FIX$INLINE X))))
         (LEN (SV::ASSIGNS-FIX$INLINE X)))))
   (SV::ASSIGNS-VARS 1 :SYSTEM . "centaur/sv/mods/lhs")
   (SV::ASSIGNS-TO-OVERRIDES-NREV :SYSTEM . "centaur/sv/mods/compile")
   (SV::ASSIGNS->SEGMENT-DRIVERS-AUX :SYSTEM
                                     . "centaur/sv/mods/norm-netlist")
   (SV::ASSIGNS-NAMED->INDEXED :SYSTEM . "centaur/sv/mods/moddb")
   (SV::ASSIGNS-SUBST-NREV :SYSTEM
                           . "centaur/sv/mods/alias-norm")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::LHSPAIRS-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::LHSPAIRS-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::LHSPAIRS-FIX$INLINE X))))
    ((NOT (CONSP (SV::LHSPAIRS-FIX$INLINE X)))
     (O< (LEN (SV::LHSPAIRS-FIX$INLINE (CDR (SV::LHSPAIRS-FIX$INLINE X))))
         (LEN (SV::LHSPAIRS-FIX$INLINE X)))))
   (SV::LHSPAIRS-VARS 1 :SYSTEM . "centaur/sv/mods/lhs")
   (SV::LHSPAIRS-NAMED->INDEXED-AUX-NREV :SYSTEM . "centaur/sv/mods/moddb")
   (SV::ALIASES-PUT-PAIRS :SYSTEM
                          . "centaur/sv/mods/alias-norm")))
 ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL SVL::FLAG 'SVL::EXPR)
                      (RP::CONS-COUNT SVL::X)
                    (RP::CONS-COUNT SVL::LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (ARGS SVL::X SVL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL SVL::FLAG 'SVL::EXPR)
                       (RP::CONS-COUNT SVL::X)
                     (RP::CONS-COUNT ARGS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL SVL::FLAG 'SVL::EXPR)
              (RP::CONS-COUNT SVL::X)
            (RP::CONS-COUNT ARGS))))
    ((EQUAL SVL::FLAG 'SVL::EXPR)
     (NOT (CONSP ARGS))
     (O< (IF 'T
             (RP::CONS-COUNT (CAR ARGS))
           (RP::CONS-COUNT 'NIL))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT ARGS))))
    ((EQUAL SVL::FLAG 'SVL::EXPR)
     (NOT (CONSP ARGS))
     (O< (IF 'NIL
             (RP::CONS-COUNT 'NIL)
           (RP::CONS-COUNT (CDR ARGS)))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT ARGS))))
    ((NOT (EQUAL SVL::FLAG 'SVL::EXPR))
     (EQUAL (SVL::SVEX-KIND-WOG$INLINE SVL::X)
            ':QUOTE)
     (EQUAL (SVL::SVEX-KIND-WOG$INLINE SVL::X)
            ':VAR)
     (O< (IF 'NIL
             (RP::CONS-COUNT 'NIL)
           (RP::CONS-COUNT (CDR SVL::X)))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT ARGS)))))
   (SVL::SVEX-EVAL-WOG-FLAG 4 :SYSTEM . "centaur/svl/svex-eval-wog")
   (SVL::SVEX-EVAL-WOG-META-FLAG :SYSTEM
                                 . "centaur/svl/meta/svex-eval-wog-meta")
   (SVL::SVEX-EVAL$-WOG-FLAG :SYSTEM
                             . "centaur/svl/svex-eval-dollar-wog"))
  ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL SVL::FLAG 'SVL::EXPR)
                       (RP::CONS-COUNT SVL::X)
                     (RP::CONS-COUNT SVL::LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL SVL::FLAG 'SVL::EXPR)
              (RP::CONS-COUNT SVL::X)
            (RP::CONS-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::EXPR)
     (NOT (CONSP SVL::LST))
     (O< (IF 'T
             (RP::CONS-COUNT (CAR SVL::LST))
           (RP::CONS-COUNT 'NIL))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::EXPR)
     (NOT (CONSP SVL::LST))
     (O< (IF 'NIL
             (RP::CONS-COUNT 'NIL)
           (RP::CONS-COUNT (CDR SVL::LST)))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT SVL::LST))))
    ((NOT (EQUAL SVL::FLAG 'SVL::EXPR))
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':QUOTE)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':VAR)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':NODE)
     (O< (IF 'NIL
             (RP::CONS-COUNT 'NIL)
           (RP::CONS-COUNT (CDR SVL::X)))
         (IF (EQUAL SVL::FLAG 'SVL::EXPR)
             (RP::CONS-COUNT SVL::X)
           (RP::CONS-COUNT SVL::LST)))))
   (SVL::SVEXL-NODE-EVAL-WOG-META-FLAG 6 :SYSTEM
                                       .
                                       "centaur/svl/meta/svex-eval-wog-meta")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::NETEVAL-ORDERING-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::NETEVAL-ORDERING-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::NETEVAL-ORDERING-FIX$INLINE X))))
    ((NOT (CONSP (SV::NETEVAL-ORDERING-FIX$INLINE X)))
     (O< (LEN (SV::NETEVAL-ORDERING-FIX$INLINE (CDR (SV::NETEVAL-ORDERING-FIX$INLINE X))))
         (LEN (SV::NETEVAL-ORDERING-FIX$INLINE X)))))
   (SV::NETEVAL-ORDERING-SELFINDUCT 1 :SYSTEM
                                    .
                                    "centaur/sv/svex/compose-theory-base")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::NETEVAL-SIGORDERING-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::NETEVAL-SIGORDERING-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::NETEVAL-SIGORDERING-COUNT X)))
    ((NOT (EQUAL (SV::NETEVAL-SIGORDERING-KIND$INLINE X)
                 ':SEGMENT))
     (O< (SV::NETEVAL-SIGORDERING-COUNT (SV::NETEVAL-SIGORDERING-SEGMENT->REST$INLINE X))
         (SV::NETEVAL-SIGORDERING-COUNT X))))
   (SV::NETEVAL-SIGORDERING-IND 1 :SYSTEM
                                .
                                "centaur/sv/svex/compose-theory-base"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::NETEVAL-SIGORDERING-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::NETEVAL-SIGORDERING-COUNT X)))
    ((NOT (INTEGERP SV::WIDTH))
     (NOT (< '0 SV::WIDTH))
     (EQUAL (SV::NETEVAL-SIGORDERING-KIND$INLINE X)
            ':REMAINDER)
     (NOT (< (SV::NETEVAL-SIGORDERING-SEGMENT->WIDTH$INLINE X)
             SV::WIDTH))
     (O< (SV::NETEVAL-SIGORDERING-COUNT (SV::NETEVAL-SIGORDERING-SEGMENT->REST$INLINE X))
         (SV::NETEVAL-SIGORDERING-COUNT X))))
   (SV::NETEVAL-SIGORDERING-CONCAT 3 :SYSTEM
                                   .
                                   "centaur/sv/svex/compose-theory-base")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::SVEX-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVEX-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVEX-COUNT X)))
    ((BITOPS::SPARSEINT-EQUAL$INLINE (SV::4VMASK-FIX$INLINE SV::MASK)
                                     '0)
     (NOT (MV-NTH '0 (SV::MATCH-CONCAT X)))
     (O< (SV::SVEX-COUNT (MV-NTH '3 (SV::MATCH-CONCAT X)))
         (SV::SVEX-COUNT X))))
   (SV::NORMALIZE-CONCAT 2 :SYSTEM
                         . "centaur/sv/svex/rewrite-rules")))
 ((JUSTIFICATION (SV::MASKS SV::LOOP-UPDATES)
                 (NIL T . NAT-LIST-<)
                 ((SV::SVEX-MASK-ALIST-MEASURE (SV::SVEX-ALIST-KEYS SV::LOOP-UPDATES)
                                               SV::MASKS)
                  IF :LAMBDAS MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::MASKS SV::LOOP-UPDATES)
                  (NIL T . NAT-LIST-<)
                  ((SV::SVEX-MASK-ALIST-MEASURE (SV::SVEX-ALIST-KEYS SV::LOOP-UPDATES)
                                                SV::MASKS)
                   IF :LAMBDAS MV-LIST RETURN-LAST))
   (((NOT (SV::CHECK-MASKS-STATS SV::LOOP-UPDATES SV::MASKS
                                 (SV::SVEX-ASSIGNS-PROPAGATE-MASKS SV::MASKS SV::LOOP-UPDATES)))
     (NOT (EQUAL (SV::CHECK-MASKS-STATS SV::LOOP-UPDATES SV::MASKS
                                        (SV::SVEX-ASSIGNS-PROPAGATE-MASKS SV::MASKS SV::LOOP-UPDATES))
                 'T))
     (NAT-LIST-< (SV::SVEX-MASK-ALIST-MEASURE (SV::SVEX-ALIST-KEYS (SV::SVEX-ALIST-FILTER-NONZERO-MASKS (SV::SVEX-ALIST-FIX$INLINE SV::LOOP-UPDATES)
                                                                                                        (SV::SVEX-ASSIGNS-PROPAGATE-MASKS SV::MASKS SV::LOOP-UPDATES)))
                                              (SV::SVEX-ASSIGNS-PROPAGATE-MASKS SV::MASKS SV::LOOP-UPDATES))
                 (SV::SVEX-MASK-ALIST-MEASURE (SV::SVEX-ALIST-KEYS SV::LOOP-UPDATES)
                                              SV::MASKS))))
   (SV::SVEX-ALIST-MASKCOMPOSE-ITER 3 :SYSTEM
                                    . "centaur/sv/svex/mask-compose")))
 ((JUSTIFICATION (SV::STACK)
                 (NIL O-P . O<)
                 ((LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::STACK)
                  (NIL O-P . O<)
                  ((LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
    ((NOT (CONSP (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK)))
     (EQUAL (SV::SVEX/INDEX-FIX$INLINE SV::KEY)
            (CAR (CAR (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
     (O< (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE (CDR (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
         (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK)))))
   (SV::SVEX-SCCS-GET-SCC 2 :SYSTEM
                          . "centaur/sv/svex/scc-compose"))
  ((JUSTIFICATION (SV::STACK)
                  (NIL O-P . O<)
                  ((LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
    ((NOT (CONSP (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK)))
     (EQUAL (SV::SVEX/INDEX-FIX$INLINE SV::KEY)
            (CAR (CAR (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
     (O< (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE (FAST-ALIST-POP (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK))))
         (LEN (SV::SVEX/INDEX-NAT-ALIST-FIX$INLINE SV::STACK)))))
   (SV::SVEX-SCCS-POP-STACK 2 :SYSTEM
                            . "centaur/sv/svex/scc-compose")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 (((LAMBDA (X) (ACL2-COUNT X))
                   (SV::SVAR-SPLIT-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  (((LAMBDA (X) (ACL2-COUNT X))
                    (SV::SVAR-SPLIT-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (SV::SVAR-SPLIT-FIX$INLINE X))))
    ((NOT (EQUAL (SV::SVAR-SPLIT-KIND$INLINE X)
                 ':SEGMENT))
     (O< (ACL2-COUNT (SV::SVAR-SPLIT-FIX$INLINE (SV::SVAR-SPLIT-SEGMENT->REST$INLINE X)))
         (ACL2-COUNT (SV::SVAR-SPLIT-FIX$INLINE X)))))
   (SV::SVAR-SPLIT-COUNT 1 :SYSTEM
                         .
                         "centaur/sv/svex/compose-theory-split")))
 ((JUSTIFICATION (SV::A.LOWER SV::A.UPPER SV::B.LOWER SV::B.UPPER)
                 (NIL O-P . O<)
                 ((BINARY-+ (LEN SV::B.UPPER)
                            (BINARY-+ (LEN SV::B.LOWER)
                                      (BINARY-+ (LEN SV::A.UPPER)
                                                (LEN SV::A.LOWER))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (D C B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A)
                             (BINARY-+ (LEN B)
                                       (BINARY-+ (LEN C) (LEN D))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A)
                    (BINARY-+ (LEN B)
                              (BINARY-+ (LEN C) (LEN D))))))
    ((IF (MV-NTH '2 (GL::FIRST/REST/END A))
         (IF (MV-NTH '2 (GL::FIRST/REST/END B))
             (IF (MV-NTH '2 (GL::FIRST/REST/END C))
                 (MV-NTH '2 (GL::FIRST/REST/END D))
               'NIL)
           'NIL)
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END A)))
                   (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END B)))
                             (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END C)))
                                       (LEN (MV-NTH '1 (GL::FIRST/REST/END D))))))
         (BINARY-+ (LEN A)
                   (BINARY-+ (LEN B)
                             (BINARY-+ (LEN C) (LEN D)))))))
   (GL::BFR-LOGAND-SSSS 4
                        :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (SV::A.LOWER SV::A.UPPER SV::B.LOWER SV::B.UPPER)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN SV::B.UPPER)
                             (BINARY-+ (LEN SV::B.LOWER)
                                       (BINARY-+ (LEN SV::A.UPPER)
                                                 (LEN SV::A.LOWER))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN SV::B.UPPER)
                    (BINARY-+ (LEN SV::B.LOWER)
                              (BINARY-+ (LEN SV::A.UPPER)
                                        (LEN SV::A.LOWER))))))
    ((SV::AND4 (MV-NTH '2
                       (GL::FIRST/REST/END SV::B.UPPER))
               (MV-NTH '2
                       (GL::FIRST/REST/END SV::B.LOWER))
               (MV-NTH '2
                       (GL::FIRST/REST/END SV::A.UPPER))
               (MV-NTH '2
                       (GL::FIRST/REST/END SV::A.LOWER)))
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (GL::FIRST/REST/END SV::B.UPPER)))
                   (BINARY-+ (LEN (MV-NTH '1
                                          (GL::FIRST/REST/END SV::B.LOWER)))
                             (BINARY-+ (LEN (MV-NTH '1
                                                    (GL::FIRST/REST/END SV::A.UPPER)))
                                       (LEN (MV-NTH '1
                                                    (GL::FIRST/REST/END SV::A.LOWER))))))
         (BINARY-+ (LEN SV::B.UPPER)
                   (BINARY-+ (LEN SV::B.LOWER)
                             (BINARY-+ (LEN SV::A.UPPER)
                                       (LEN SV::A.LOWER)))))))
   (SV::A4VEC-===*-AUX 4
                       :SYSTEM . "centaur/sv/svex/a4vec-ops")))
 ((JUSTIFICATION (SV::MASK)
                 (NIL O-P . O<)
                 ((BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE SV::MASK))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::MASK)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE SV::MASK))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE SV::MASK))))
    ((BITOPS::SPARSEINT-EQUAL$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK))
                                     '0)
     (O< (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (BITOPS::SPARSEINT-RIGHTSHIFT$INLINE '1
                                                                                                          (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK)))))
         (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE SV::MASK)))))
   (SV::4VMASK-TO-A4VEC-REC 3 :SYSTEM . "centaur/sv/svex/symbolic")
   (FGL::FGL-4VMASK-TO-A4VEC-REC-ENV :SYSTEM
                                     . "centaur/fgl/svex-primitives")))
 ((JUSTIFICATION (SV::N SV::ALIASES)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                                  (UNARY-- (NFIX SV::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::N SV::ALIASES)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE SV::N))))))
         (NFIX (BINARY-+ (SV::ALIASS-LENGTH SV::ALIASES)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::COLLECT-ALIASES 2
                        :SYSTEM . "centaur/sv/mods/alias-norm")
   (SV::ALIASES-COLLECT-NORMED-ADDRESSES :SYSTEM . "centaur/sv/vl/use-set")
   (SV::SVTV-DEBUG-EVAL-ALIASES :SYSTEM . "centaur/sv/svtv/debug")
   (SV::ALIASES-TO-VAR-DECL-MAP-AUX :SYSTEM . "centaur/sv/mods/compile")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 (((LAMBDA (X) (ACL2-COUNT X))
                   (SV::MODSCOPE-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  (((LAMBDA (X) (ACL2-COUNT X))
                    (SV::MODSCOPE-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (SV::MODSCOPE-FIX$INLINE X))))
    ((NOT (EQUAL (SV::MODSCOPE-KIND$INLINE X)
                 ':NESTED))
     (O< (ACL2-COUNT (SV::MODSCOPE-FIX$INLINE (SV::MODSCOPE-NESTED->UPPER$INLINE X)))
         (ACL2-COUNT (SV::MODSCOPE-FIX$INLINE X)))))
   (SV::MODSCOPE-COUNT 1 :SYSTEM . "centaur/sv/mods/moddb")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::MODSCOPE-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::MODSCOPE-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::MODSCOPE-COUNT X)))
    ((EQUAL (SV::MODSCOPE-KIND$INLINE X)
            ':TOP)
     (O< (SV::MODSCOPE-COUNT (SV::MODSCOPE-NESTED->UPPER$INLINE X))
         (SV::MODSCOPE-COUNT X))))
   (SV::MODSCOPE->TOP 1 :SYSTEM . "centaur/sv/mods/moddb")))
 ((JUSTIFICATION (SV::N SV::INDNAMEMEMO)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                                  (UNARY-- (NFIX SV::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::N SV::INDNAMEMEMO)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE SV::N))))))
         (NFIX (BINARY-+ (SV::INDNAMES-LENGTH SV::INDNAMEMEMO)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::INDNAMEMEMO-TO-VAR-DECL-MAP 3 :SYSTEM . "centaur/sv/mods/compile")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X)))
     (O< (ACL2-COUNT (VL::VL-SCOPEITEM-ALIST-FIX$INLINE (CDR (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X))))
         (ACL2-COUNT (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::X)))))
   (VL::VL-SCOPEITEM-ALIST-COUNT 1 :SYSTEM
                                 . "centaur/vl/mlib/scopestack")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-SCOPESTACK-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-SCOPESTACK-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-SCOPESTACK-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VL-SCOPESTACK-KIND$INLINE VL::X)
                 ':LOCAL))
     (O< (ACL2-COUNT (VL::VL-SCOPESTACK-FIX$INLINE (VL::VL-SCOPESTACK-LOCAL->SUPER$INLINE VL::X)))
         (ACL2-COUNT (VL::VL-SCOPESTACK-FIX$INLINE VL::X)))))
   (VL::VL-SCOPESTACK-COUNT 1 :SYSTEM
                            . "centaur/vl/mlib/scopestack")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-SCOPEEXPR-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-SCOPEEXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-SCOPEEXPR-COUNT VL::X)))
    ((EQUAL (VL::VL-SCOPEEXPR-KIND$INLINE VL::X)
            ':END)
     (O< (VL::VL-SCOPEEXPR-COUNT (VL::VL-SCOPEEXPR-COLON->REST$INLINE VL::X))
         (VL::VL-SCOPEEXPR-COUNT VL::X))))
   (VL::VL-SCOPEEXPR->SUBEXPRS 1
                               :SYSTEM . "centaur/vl/mlib/expr-tools")
   (VL::VL-SCOPEEXPR-SPLIT-RIGHT :SYSTEM
                                 .
                                 "centaur/vl/transforms/annotate/argresolve")
   (VL::VL-SCOPEEXPR->HID :SYSTEM . "centaur/vl/mlib/hid-tools")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-CALL-NAMEDARGS-FIX$INLINE (CDR (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X))))
         (LEN (VL::VL-CALL-NAMEDARGS-FIX$INLINE VL::X)))))
   (VL::VL-CALL-NAMEDARGS->SUBEXPRS 1 :SYSTEM
                                    . "centaur/vl/mlib/expr-tools")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-DATATYPE-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-DATATYPE-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-DATATYPE-COUNT VL::X)))
    ((CONSP (VL::VL-DATATYPE->UDIMS VL::X))
     (NOT (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
                 ':VL-ENUM))
     (O< (VL::VL-DATATYPE-COUNT (VL::VL-ENUM->BASETYPE$INLINE VL::X))
         (VL::VL-DATATYPE-COUNT VL::X)))
    ((CONSP (VL::VL-DATATYPE->UDIMS VL::X))
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-CORETYPE)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-STRUCT)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-UNION)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-ENUM)
     (NOT (VL::VL-USERTYPE->RES$INLINE VL::X))
     (O< (VL::VL-DATATYPE-COUNT (VL::VL-USERTYPE->RES$INLINE VL::X))
         (VL::VL-DATATYPE-COUNT VL::X))))
   (VL::VL-DATATYPE-ARITHCLASS 1 :SYSTEM
                               . "centaur/vl/mlib/arithclass")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::SCOPES)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES))))
    ((NOT (CONSP (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES)))
     (NOT (CONSP (CDR (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES))))
     (O< (LEN (VL::VL-ELABSCOPES-FIX$INLINE (MV-NTH '0
                                                    (VL::VL-ELABSCOPES-POP/UPDATE-ONE (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES)))))
         (LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::SCOPES)))))
   (VL::VL-ELABSCOPES-ROOT/UPDATE 1
                                  :SYSTEM . "centaur/vl/mlib/elabindex"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-ELABSCOPES-FIX$INLINE VL::X)))
     (NOT (CONSP (CDR (VL::VL-ELABSCOPES-FIX$INLINE VL::X))))
     (O< (LEN (VL::VL-ELABSCOPES-FIX$INLINE (CDR (VL::VL-ELABSCOPES-FIX$INLINE VL::X))))
         (LEN (VL::VL-ELABSCOPES-FIX$INLINE VL::X)))))
   (VL::VL-ELABSCOPES->ELABTRAVERSAL 1
                                     :SYSTEM . "centaur/vl/mlib/elabindex")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::SVEX-SELECT-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVEX-SELECT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVEX-SELECT-COUNT X)))
    ((EQUAL (SV::SVEX-SELECT-KIND$INLINE X)
            ':VAR)
     (O< (SV::SVEX-SELECT-COUNT (SV::SVEX-SELECT-PART->SUBEXP$INLINE X))
         (SV::SVEX-SELECT-COUNT X))))
   (SV::SVEX-SELECT-TO-SVEX 1 :SYSTEM . "centaur/sv/svex/select"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVEX-SELECT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVEX-SELECT-COUNT X)))
    ((EQUAL (SV::SVEX-SELECT-KIND$INLINE (SV::SVEX-SELECT-FIX$INLINE X))
            ':VAR)
     (O< (SV::SVEX-SELECT-COUNT (SV::SVEX-SELECT-PART->SUBEXP$INLINE (SV::SVEX-SELECT-FIX$INLINE X)))
         (SV::SVEX-SELECT-COUNT X))))
   (SV::SVEX-SELECT-REPLACE-INDICES 2 :SYSTEM . "centaur/sv/svex/select"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVEX-SELECT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVEX-SELECT-COUNT X)))
    ((SV::SVEX-SELECT-STATICP X)
     (O< (SV::SVEX-SELECT-COUNT (SV::SVEX-SELECT-PART->SUBEXP$INLINE X))
         (SV::SVEX-SELECT-COUNT X))))
   (SV::SVEX-SELECT-STATICIFY-ASSIGNMENT 3 :SYSTEM . "centaur/sv/svex/select")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-SVEX-KEYVALLIST-FIX$INLINE (CDR (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-SVEX-KEYVALLIST-FIX$INLINE VL::X)))))
   (VL::VL-SVEX-KEYVALLIST-VARS 1 :SYSTEM . "centaur/sv/vl/expr")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-KEYVALLIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-KEYVALLIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-KEYVALLIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-KEYVALLIST-FIX$INLINE VL::X)))
     (EQUAL (VL::VL-PATTERNKEY-KIND$INLINE (CAR (CAR (VL::VL-KEYVALLIST-FIX$INLINE VL::X))))
            ':DEFAULT)
     (O< (LEN (VL::VL-KEYVALLIST-FIX$INLINE (CDR (VL::VL-KEYVALLIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-KEYVALLIST-FIX$INLINE VL::X)))))
   (VL::VL-KEYVAL-DEFAULT-LOOKUP 1 :SYSTEM . "centaur/sv/vl/expr")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VTTREE-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VTTREE-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VTTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':BRANCH))
     (O< (ACL2-COUNT (VL::VTTREE-FIX$INLINE (VL::VTTREE-BRANCH->LEFT$INLINE VL::X)))
         (ACL2-COUNT (VL::VTTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':BRANCH))
     (O< (ACL2-COUNT (VL::VTTREE-FIX$INLINE (VL::VTTREE-BRANCH->RIGHT$INLINE VL::X)))
         (ACL2-COUNT (VL::VTTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (ACL2-COUNT (VL::VTTREE-FIX$INLINE (VL::VTTREE-CONTEXT->SUBTREE$INLINE VL::X)))
         (ACL2-COUNT (VL::VTTREE-FIX$INLINE VL::X)))))
   (VL::VTTREE-COUNT 1 :SYSTEM . "centaur/sv/vl/expr")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-CASELIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-CASELIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-CASELIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-CASELIST-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-CASELIST-FIX$INLINE (CDR (VL::VL-CASELIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-CASELIST-FIX$INLINE VL::X)))))
   (VL::VL-CASELIST->CASEEXPRS 1 :SYSTEM . "centaur/sv/vl/vl-svstmt")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-REPORTCARD-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-REPORTCARD-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-REPORTCARD-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-REPORTCARD-FIX$INLINE VL::X)))
     (O< (ACL2-COUNT (VL::VL-REPORTCARD-FIX$INLINE (CDR (VL::VL-REPORTCARD-FIX$INLINE VL::X))))
         (ACL2-COUNT (VL::VL-REPORTCARD-FIX$INLINE VL::X)))))
   (VL::VL-REPORTCARD-COUNT 1 :SYSTEM
                            . "centaur/vl/mlib/reportcard")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-HIDEXPR-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-HIDEXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-HIDEXPR-COUNT VL::X)))
    ((EQUAL (VL::VL-HIDEXPR-KIND$INLINE VL::X)
            ':END)
     (O< (VL::VL-HIDEXPR-COUNT (VL::VL-HIDEXPR-DOT->REST$INLINE VL::X))
         (VL::VL-HIDEXPR-COUNT VL::X))))
   (VL::VL-HIDEXPR->SUBEXPRS 1
                             :SYSTEM . "centaur/vl/mlib/expr-tools")
   (VL::VL-HIDEXPR-INDEX-COUNT :SYSTEM . "centaur/vl/mlib/hid-tools"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-HIDEXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-HIDEXPR-COUNT VL::X)))
    ((EQUAL (VL::VL-HIDEXPR-KIND$INLINE (VL::VL-HIDEXPR-FIX$INLINE VL::X))
            ':END)
     (EQUAL (VL::VL-HIDEXPR-KIND$INLINE (VL::VL-HIDEXPR-DOT->REST$INLINE (VL::VL-HIDEXPR-FIX$INLINE VL::X)))
            ':END)
     (O< (VL::VL-HIDEXPR-COUNT (VL::VL-HIDEXPR-DOT->REST$INLINE (VL::VL-HIDEXPR-FIX$INLINE VL::X)))
         (VL::VL-HIDEXPR-COUNT VL::X))))
   (VL::VL-HIDEXPR-SPLIT-RIGHT 1 :SYSTEM
                               .
                               "centaur/vl/transforms/annotate/argresolve")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-MAYBE-EXPRLIST-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-MAYBE-EXPRLIST-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-MAYBE-EXPRLIST-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (O< (VL::VL-MAYBE-EXPRLIST-COUNT (CDR VL::X))
         (VL::VL-MAYBE-EXPRLIST-COUNT VL::X))))
   (VL::VL-MAYBE-EXPRLIST-PROHIBIT-INCEXPRS 2 :SYSTEM
                                            .
                                            "centaur/vl/transforms/annotate/increment-elim")))
 ((JUSTIFICATION (SV::BRACKETED-PARTS)
                 (NIL O-P . O<)
                 ((LEN SV::BRACKETED-PARTS)
                  IF :LAMBDAS MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::BRACKETED-PARTS)
                  (NIL O-P . O<)
                  ((LEN SV::BRACKETED-PARTS)
                   IF :LAMBDAS MV-LIST RETURN-LAST))
   (((O-P (LEN SV::BRACKETED-PARTS)))
    ((NOT (CONSP (CDR SV::BRACKETED-PARTS)))
     (O< (LEN (CDR SV::BRACKETED-PARTS))
         (LEN SV::BRACKETED-PARTS))))
   (SV::SVTV-PARSE-PATH-INDICES 3 :SYSTEM . "centaur/sv/svtv/expand")
   (FGL::MINOR-STACK->DEBUG :SYSTEM . "centaur/fgl/helper-utils")
   (FGL::FGL-MINOR-STACK-CONCRETIZE-FN :SYSTEM . "centaur/fgl/stack-ev")))
 ((JUSTIFICATION (SV::STATES SV::OUTS)
                 (NIL O-P . O<)
                 ((MAX (LEN SV::OUTS) (LEN SV::STATES))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::ELSE-ST SV::THEN-ST)
                  (NIL O-P . O<)
                  ((MAX (LEN SV::THEN-ST)
                        (LEN SV::ELSE-ST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (MAX (LEN SV::THEN-ST)
               (LEN SV::ELSE-ST))))
    ((NOT (CONSP SV::THEN-ST))
     (NOT (CONSP SV::ELSE-ST))
     (O< (MAX (LEN (CDR SV::THEN-ST))
              (LEN (CDR SV::ELSE-ST)))
         (MAX (LEN SV::THEN-ST)
              (LEN SV::ELSE-ST)))))
   (SV::SVSTACK-MERGE-BRANCHES 3 :SYSTEM
                               . "centaur/sv/vl/svstmt-compile"))
  ((JUSTIFICATION (SV::STATES SV::OUTS)
                  (NIL O-P . O<)
                  ((MAX (LEN SV::OUTS) (LEN SV::STATES))
                   IF MV-LIST RETURN-LAST))
   (((O-P (MAX (LEN SV::OUTS) (LEN SV::STATES))))
    ((IF (IF (CONSP SV::OUTS) 'NIL 'T)
         (IF (CONSP SV::STATES) 'NIL 'T)
       'NIL)
     (O< (MAX (LEN (CDR SV::OUTS))
              (LEN (CDR SV::STATES)))
         (MAX (LEN SV::OUTS) (LEN SV::STATES)))))
   (SV::FSM-PRINT-RUN 7
                      :SYSTEM . "centaur/sv/svtv/fsm-base")))
 ((JUSTIFICATION (SV::N SV::VCD-WIREMAP)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                                  (UNARY-- (NFIX SV::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::N SV::VCD-WIREMAP)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE SV::N))))))
         (NFIX (BINARY-+ (SV::VCDWIRES-LENGTH SV::VCD-WIREMAP)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::VCD-DUMP-FIRST-SNAPSHOT-AUX 4 :SYSTEM . "centaur/sv/svtv/vcd")))
 ((JUSTIFICATION (STATE)
                 (NIL O-P . O<)
                 ((FILE-MEASURE 'ACL2-INPUT-CHANNEL::STANDARD-OBJECT-INPUT-0
                                STATE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STATE)
                  (NIL O-P . O<)
                  ((FILE-MEASURE 'ACL2-INPUT-CHANNEL::STANDARD-OBJECT-INPUT-0
                                 STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FILE-MEASURE 'ACL2-INPUT-CHANNEL::STANDARD-OBJECT-INPUT-0
                        STATE)))
    ((MV-NTH '0
             (SV::SVTV-CHASE-REP-FN SV::MODDB
                                    SV::SVTV-CHASE-DATA SV::ALIASES STATE))
     (O< (FILE-MEASURE 'ACL2-INPUT-CHANNEL::STANDARD-OBJECT-INPUT-0
                       (MV-NTH '2
                               (SV::SVTV-CHASE-REP-FN SV::MODDB
                                                      SV::SVTV-CHASE-DATA SV::ALIASES STATE)))
         (FILE-MEASURE 'ACL2-INPUT-CHANNEL::STANDARD-OBJECT-INPUT-0
                       STATE))))
   (SV::SVTV-CHASE-REPL1-FN 4 :SYSTEM
                            . "centaur/sv/svtv/chase-base")))
 ((JUSTIFICATION (N FGL::BVAR-DB)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                                  (UNARY-- (NFIX N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N FGL::BVAR-DB)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                       (UNARY-- (NFIX N)))))
     (O< (NFIX (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (FGL::NEXT-BVAR FGL::BVAR-DB)
                         (UNARY-- (NFIX N)))))))
   (FGL::BVAR-DB-DEBUG-AUX 2 :SYSTEM . "centaur/fgl/bvar-db")
   (FGL::BVAR-DB-OBJECTLIST :SYSTEM . "centaur/fgl/transform")
   (FGL::BVAR-DB-TO-BFR-ENV-AUX :SYSTEM . "centaur/fgl/clauseproc")
   (FGL::BVAR-DB-ADD-TO-CGRAPH-AUX :SYSTEM . "centaur/fgl/ctrex-utils")))
 ((JUSTIFICATION (INTSTACK$C)
                 (NIL O-P . O<)
                 ((NFIX (INTSTACK$C-COUNT INTSTACK$C))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (INTSTACK$C)
                  (NIL O-P . O<)
                  ((NFIX (INTSTACK$C-COUNT INTSTACK$C))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (INTSTACK$C-COUNT INTSTACK$C))))
    ((NOT (< (LNFIX$INLINE N)
             (LNFIX$INLINE (INTSTACK$C-COUNT INTSTACK$C))))
     (O< (NFIX (INTSTACK$C-COUNT (INTSTACK$C-POP INTSTACK$C)))
         (NFIX (INTSTACK$C-COUNT INTSTACK$C)))))
   (INTSTACK$C-REWIND 2 :SYSTEM . "centaur/misc/intstack")))
 ((JUSTIFICATION (AIGNET::NBALIST-STOBJ)
                 (NIL O-P . O<)
                 ((AIGNET::NBALIST-STOBJ-LEN AIGNET::NBALIST-STOBJ)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::NBALIST-STOBJ)
                  (NIL O-P . O<)
                  ((AIGNET::NBALIST-STOBJ-LEN AIGNET::NBALIST-STOBJ)
                   IF MV-LIST RETURN-LAST))
   (((O-P (AIGNET::NBALIST-STOBJ-LEN AIGNET::NBALIST-STOBJ)))
    ((NOT (< (NFIX LEN)
             (AIGNET::NBALIST-STOBJ-LEN AIGNET::NBALIST-STOBJ)))
     (O< (AIGNET::NBALIST-STOBJ-LEN (AIGNET::NBALIST-STOBJ-POP AIGNET::NBALIST-STOBJ))
         (AIGNET::NBALIST-STOBJ-LEN AIGNET::NBALIST-STOBJ))))
   (AIGNET::NBALIST-STOBJ-REWIND 2 :SYSTEM
                                 . "centaur/fgl/pathcond-aignet")))
 ((JUSTIFICATION (AIGNET::N AIGNET::AIGNET-PATHCOND)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::AIGNET-PATHCOND)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::AIGNET-PATHCOND-LEN AIGNET::AIGNET-PATHCOND)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-PATHCOND-TO-CNF-AUX 7 :SYSTEM
                                       . "centaur/fgl/pathcond-aignet-ipasir")
   (AIGNET::AIGNET-PATHCOND-BFRLIST-AUX :SYSTEM
                                        . "centaur/fgl/mark-bfrs-pathcond")))
 ((JUSTIFICATION (FGL::BOTTOM FGL::NEXT)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                                  (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (FGL::BOTTOM FGL::NEXT)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                                   (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                          (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM))))))
    ((NOT (INTEGERP (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                              (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM)))))
     (NOT (< '0
             (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                       (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM)))))
     (O< (NFIX (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE (FGL::SCRATCH-DECR-NONTAGIDX (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)))
                         (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM)))))
         (NFIX (BINARY-+ (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::NEXT)
                         (UNARY-- (FGL::SCRATCH-NONTAGIDX-FIX$INLINE FGL::BOTTOM)))))))
   (FGL::STACK$C-BUILD-SCRATCH 3 :SYSTEM . "centaur/fgl/stack")))
 ((JUSTIFICATION (FGL::TOP)
                 (NIL O-P . O<)
                 ((LNFIX$INLINE FGL::TOP) CONS))
  ((JUSTIFICATION (FGL::TOP)
                  (NIL O-P . O<)
                  ((LNFIX$INLINE FGL::TOP) CONS))
   (((O-P (LNFIX$INLINE FGL::TOP)))
    ((NOT (< (LNFIX$INLINE FGL::BOTTOM)
             (LNFIX$INLINE FGL::TOP)))
     (O< (LNFIX$INLINE (BINARY-+ '-1 (LNFIX$INLINE FGL::TOP)))
         (LNFIX$INLINE FGL::TOP))))
   (FGL::STACK$C-BUILD-MINOR-FRAMES 3 :SYSTEM . "centaur/fgl/stack"))
  ((JUSTIFICATION (FGL::TOP)
                  (NIL O-P . O<)
                  ((LNFIX$INLINE FGL::TOP) CONS))
   (((O-P (LNFIX$INLINE FGL::TOP)))
    ((EQUAL (LNFIX$INLINE FGL::TOP) '0)
     (O< (LNFIX$INLINE (BINARY-+ '-1 (LNFIX$INLINE FGL::TOP)))
         (LNFIX$INLINE FGL::TOP))))
   (FGL::STACK$C-BUILD-MAJOR-FRAMES 2 :SYSTEM . "centaur/fgl/stack")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((PSEUDO-TERM-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((PSEUDO-TERM-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PSEUDO-TERM-COUNT X)))
    ((NOT (EQUAL (PSEUDO-TERM-KIND$INLINE X)
                 ':LAMBDA))
     (O< (PSEUDO-TERM-COUNT (PSEUDO-TERM-LAMBDA->BODY X))
         (PSEUDO-TERM-COUNT X))))
   (CMR::LAMBDA-NEST-TO-BINDINGLIST 1 :SYSTEM . "centaur/meta/bindinglist")
   (FGL::FLATTEN-AND*-HYP :SYSTEM
                          . "centaur/fgl/primitives-stub"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((PSEUDO-TERM-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PSEUDO-TERM-COUNT X)))
    ((NOT (EQUAL (PSEUDO-TERM-KIND$INLINE X)
                 ':FNCALL))
     (NOT (EQUAL (PSEUDO-TERM-FNCALL->FN X) 'IF))
     (NOT (EQUAL (CAR (CDR (CDR (PSEUDO-TERM-CALL->ARGS X))))
                 ''NIL))
     (O< (PSEUDO-TERM-COUNT (CAR (CDR (PSEUDO-TERM-CALL->ARGS X))))
         (PSEUDO-TERM-COUNT X)))
    ((NOT (EQUAL (PSEUDO-TERM-KIND$INLINE X)
                 ':FNCALL))
     (NOT (EQUAL (PSEUDO-TERM-FNCALL->FN X) 'IF))
     (NOT (EQUAL (CAR (CDR (CDR (PSEUDO-TERM-CALL->ARGS X))))
                 ''NIL))
     (O< (PSEUDO-TERM-COUNT (CAR (PSEUDO-TERM-CALL->ARGS X)))
         (PSEUDO-TERM-COUNT X))))
   (CMR::PARSE-REWRITE-HYPS 1
                            :SYSTEM . "centaur/meta/parse-rewrite"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((PSEUDO-TERM-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PSEUDO-TERM-COUNT X)))
    ((MEMBER-EQUAL (PSEUDO-TERM-KIND$INLINE X)
                   '(:NULL :QUOTE))
     (EQUAL (PSEUDO-TERM-KIND$INLINE X)
            ':VAR)
     (EQUAL (PSEUDO-TERM-KIND$INLINE X)
            ':FNCALL)
     (O< (PSEUDO-TERM-COUNT (PSEUDO-TERM-LAMBDA->BODY X))
         (PSEUDO-TERM-COUNT X))))
   (FGL::EXPAND-AN-IMPLIES 2 :SYSTEM . "centaur/fgl/casesplit")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((FGL::FGL-OBJECT-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((FGL::FGL-OBJECT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FGL::FGL-OBJECT-COUNT X)))
    ((EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-CONCRETE)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-BOOLEAN)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-INTEGER)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-ITE)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-APPLY)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-VAR)
     (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
            ':G-MAP)
     (O< (FGL::FGL-OBJECT-COUNT (FGL::G-CONS->CDR$INLINE X))
         (FGL::FGL-OBJECT-COUNT X))))
   (FGL::FGL-OBJECT-APPEND 2 :SYSTEM . "centaur/fgl/primitives"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((FGL::FGL-OBJECT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FGL::FGL-OBJECT-COUNT X)))
    ((NOT (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
                 ':G-ITE))
     (NOT (EQUAL (FGL::FGL-OBJECT-KIND$INLINE (FGL::G-ITE->TEST$INLINE X))
                 ':G-BOOLEAN))
     (O< (FGL::FGL-OBJECT-COUNT (FGL::G-ITE->THEN$INLINE X))
         (FGL::FGL-OBJECT-COUNT X)))
    ((NOT (EQUAL (FGL::FGL-OBJECT-KIND$INLINE X)
                 ':G-ITE))
     (NOT (EQUAL (FGL::FGL-OBJECT-KIND$INLINE (FGL::G-ITE->TEST$INLINE X))
                 ':G-BOOLEAN))
     (NOT (MV-NTH '0
                  (TD-STUB-4 N (FGL::G-ITE->THEN$INLINE X)
                             FGL::INTERP-ST STATE)))
     (O< (FGL::FGL-OBJECT-COUNT (FGL::G-ITE->ELSE$INLINE X))
         (FGL::FGL-OBJECT-COUNT X))))
   (FGL::GOBJ-N-BIT-UNSIGNED-INTEGER-FIX 4 :SYSTEM
                                         . "centaur/fgl/svex-primitives")))
 ((JUSTIFICATION (VL::SEARCHCACHE)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::SEARCHCACHE)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))))
    ((NOT (CONSP (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))
     (HONS-GET (VL::STRING-FIX$INLINE VL::FILENAME)
               (CDR (CAR (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))))
     (O< (LEN (VL::VL-DIRLIST-CACHE-FIX$INLINE (CDR (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))))
         (LEN (VL::VL-DIRLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))))
   (VL::VL-CACHE-FIND-FILE-AUX 2 :SYSTEM
                               . "centaur/vl/loader/find-file")))
 ((JUSTIFICATION (VL::ECHARS)
                 (NIL O-P . O<)
                 ((ACL2-COUNT (VL::VL-ECHARLIST-FIX$INLINE VL::ECHARS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::ECHARS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT (VL::VL-ECHARLIST-FIX$INLINE VL::ECHARS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-ECHARLIST-FIX$INLINE VL::ECHARS))))
    ((NOT (MV-NTH '0
                  (VL::VL-PARSE-DEFINE-ACTUAL VL::NAME VL::ECHARS VL::LOC 'NIL
                                              'NIL
                                              VL::PPST)))
     (NOT (MV-NTH '1
                  (VL::VL-PARSE-DEFINE-ACTUAL VL::NAME VL::ECHARS VL::LOC 'NIL
                                              'NIL
                                              VL::PPST)))
     (O< (ACL2-COUNT (VL::VL-ECHARLIST-FIX$INLINE (MV-NTH '3
                                                          (VL::VL-PARSE-DEFINE-ACTUAL VL::NAME VL::ECHARS VL::LOC 'NIL
                                                                                      'NIL
                                                                                      VL::PPST))))
         (ACL2-COUNT (VL::VL-ECHARLIST-FIX$INLINE VL::ECHARS)))))
   (VL::VL-PARSE-DEFINE-ACTUALS 4 :SYSTEM
                                .
                                "centaur/vl/loader/preprocessor/top")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-LUCIDDB-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-LUCIDDB-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-LUCIDDB-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-LUCIDDB-FIX$INLINE VL::X)))
     (O< (ACL2-COUNT (VL::VL-LUCIDDB-FIX$INLINE (CDR (VL::VL-LUCIDDB-FIX$INLINE VL::X))))
         (ACL2-COUNT (VL::VL-LUCIDDB-FIX$INLINE VL::X)))))
   (VL::VL-LUCIDDB-COUNT 1 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-LUCIDDB-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-LUCIDDB-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-LUCIDDB-COUNT VL::X)))
    ((NOT (CONSP (VL::VL-LUCIDDB-FIX$INLINE VL::X)))
     (O< (VL::VL-LUCIDDB-COUNT (CDR (VL::VL-LUCIDDB-FIX$INLINE VL::X)))
         (VL::VL-LUCIDDB-COUNT VL::X))))
   (VL::VL-PP-LUCIDDB-AUX-FN 2 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (MERGE)
                 (NIL O-P . O<)
                 ((VL::VL-LUCIDMERGEALIST-COUNT MERGE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (MERGE)
                  (NIL O-P . O<)
                  ((VL::VL-LUCIDMERGEALIST-COUNT MERGE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-LUCIDMERGEALIST-COUNT MERGE)))
    ((NOT (CONSP (VL::VL-LUCIDMERGEALIST-FIX$INLINE MERGE)))
     (O< (VL::VL-LUCIDMERGEALIST-COUNT (CDR (VL::VL-LUCIDMERGEALIST-FIX$INLINE MERGE)))
         (VL::VL-LUCIDMERGEALIST-COUNT MERGE))))
   (VL::VL-LUCID-DO-MERGES 1 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (VL::ATTS)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-ATTS-FIX$INLINE VL::ATTS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::ATTS)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-ATTS-FIX$INLINE VL::ATTS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-ATTS-FIX$INLINE VL::ATTS))))
    ((NOT (CONSP (VL::VL-ATTS-FIX$INLINE VL::ATTS)))
     (VL::VL-LINT-ATTNAME-SAYS-IGNORE (CAR (CAR (VL::VL-ATTS-FIX$INLINE VL::ATTS)))
                                      VL::MASHED-WARNING-TYPE)
     (O< (LEN (VL::VL-ATTS-FIX$INLINE (CDR (VL::VL-ATTS-FIX$INLINE VL::ATTS))))
         (LEN (VL::VL-ATTS-FIX$INLINE VL::ATTS)))))
   (VL::VL-LINT-ATTS-SAY-IGNORE 2 :SYSTEM
                                . "centaur/vl/lint/suppress-warnings")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-WARNINGTREE-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-WARNINGTREE-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-WARNINGTREE-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (VL::VL-WARNINGTREE-COUNT (VL::VL-WARNINGTREE->SUBTREE$INLINE VL::X))
         (VL::VL-WARNINGTREE-COUNT VL::X)))
    ((EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':NULL)
     (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':WARNING)
     (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':CONTEXT)
     (O< (VL::VL-WARNINGTREE-COUNT (VL::VL-WARNINGTREE->LEFT$INLINE VL::X))
         (VL::VL-WARNINGTREE-COUNT VL::X)))
    ((EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':NULL)
     (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':WARNING)
     (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
            ':CONTEXT)
     (O< (VL::VL-WARNINGTREE-COUNT (VL::VL-WARNINGTREE->RIGHT$INLINE VL::X))
         (VL::VL-WARNINGTREE-COUNT VL::X))))
   (VL::VL-WARNINGTREE-FLATTEN-AUX 3 :SYSTEM
                                   . "centaur/vl/util/warningtree")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-ODDINFOLIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-ODDINFOLIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-ODDINFOLIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-ODDINFOLIST-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-ODDINFOLIST-FIX$INLINE (CDR (VL::VL-ODDINFOLIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-ODDINFOLIST-FIX$INLINE VL::X)))))
   (VL::VL-ODDINFOLIST-DETAILS-FN 3 :SYSTEM . "centaur/vl/lint/oddexpr")))
 ((JUSTIFICATION (VL::LOW VL::HIGH)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (IFIX VL::HIGH)
                                  (UNARY-- (IFIX VL::LOW))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::A VL::B)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (IFIX VL::B)
                                   (UNARY-- (IFIX VL::A))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (IFIX VL::B)
                          (UNARY-- (IFIX VL::A))))))
    ((NOT (INTEGERP (BINARY-+ (LIFIX$INLINE VL::B)
                              (UNARY-- (LIFIX$INLINE VL::A)))))
     (NOT (< '0
             (BINARY-+ (LIFIX$INLINE VL::B)
                       (UNARY-- (LIFIX$INLINE VL::A)))))
     (O< (NFIX (BINARY-+ (IFIX (LIFIX$INLINE VL::B))
                         (UNARY-- (IFIX (BINARY-+ '1 (LIFIX$INLINE VL::A))))))
         (NFIX (BINARY-+ (IFIX VL::B)
                         (UNARY-- (IFIX VL::A)))))))
   (VL::INTS-FROM 2 :SYSTEM . "centaur/vl/lint/lucid"))
  ((JUSTIFICATION (VL::LOW VL::HIGH)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (IFIX VL::HIGH)
                                   (UNARY-- (IFIX VL::LOW))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (IFIX VL::HIGH)
                          (UNARY-- (IFIX VL::LOW))))))
    ((NOT (INTEGERP (BINARY-+ (IFIX VL::HIGH)
                              (UNARY-- (IFIX VL::LOW)))))
     (NOT (< '0
             (BINARY-+ (IFIX VL::HIGH)
                       (UNARY-- (IFIX VL::LOW)))))
     (O< (NFIX (BINARY-+ (IFIX VL::HIGH)
                         (UNARY-- (IFIX (BINARY-+ (LIFIX$INLINE VL::LOW) '1)))))
         (NFIX (BINARY-+ (IFIX VL::HIGH)
                         (UNARY-- (IFIX VL::LOW)))))))
   (VL::VL-SELFASSIGN-BITS 3 :SYSTEM
                           . "centaur/vl/lint/selfassigns")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-IFDEF-USE-MAP-FIX$INLINE (CDR (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X))))
         (LEN (VL::VL-IFDEF-USE-MAP-FIX$INLINE VL::X)))))
   (VL::VL-CLEAN-IFDEF-MAP 1 :SYSTEM
                           . "centaur/vl/lint/ifdef-report")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-REPORTCARD-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-REPORTCARD-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-REPORTCARD-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-REPORTCARD-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-REPORTCARD-FIX$INLINE (CDR (VL::VL-REPORTCARD-FIX$INLINE VL::X))))
         (LEN (VL::VL-REPORTCARD-FIX$INLINE VL::X)))))
   (VL::VL-REPORTCARD-REMOVE-SUPPRESSED 1 :SYSTEM . "centaur/vl/kit/lint")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-LUCIDDB-FIX$INLINE (CDR (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X)))))
   (VL2014::VL-LUCIDDB-COUNT 1
                             :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-LUCIDDB-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-LUCIDDB-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-LUCIDDB-COUNT VL2014::X)))
    ((NOT (CONSP (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X)))
     (O< (VL2014::VL-LUCIDDB-COUNT (CDR (VL2014::VL-LUCIDDB-FIX$INLINE VL2014::X)))
         (VL2014::VL-LUCIDDB-COUNT VL2014::X))))
   (VL2014::VL-PP-LUCIDDB-AUX-FN 2
                                 :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (MERGE)
                 (NIL O-P . O<)
                 ((VL2014::VL-LUCIDMERGEALIST-COUNT MERGE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (MERGE)
                  (NIL O-P . O<)
                  ((VL2014::VL-LUCIDMERGEALIST-COUNT MERGE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-LUCIDMERGEALIST-COUNT MERGE)))
    ((NOT (CONSP (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE MERGE)))
     (O< (VL2014::VL-LUCIDMERGEALIST-COUNT (CDR (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE MERGE)))
         (VL2014::VL-LUCIDMERGEALIST-COUNT MERGE))))
   (VL2014::VL-LUCID-DO-MERGES 1
                               :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-SIGMA-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-SIGMA-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-SIGMA-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-SIGMA-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-SIGMA-FIX$INLINE (CDR (VL2014::VL-SIGMA-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-SIGMA-FIX$INLINE VL2014::X)))))
   (VL2014::VL-SIGMA-COUNT 1
                           :SYSTEM . "centaur/vl2014/mlib/subst")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-EXPR-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPR-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-HIDEXPR->ENDP$INLINE VL2014::X)
     (O< (VL2014::VL-EXPR-COUNT (VL2014::VL-HIDEXPR->REST VL2014::X))
         (VL2014::VL-EXPR-COUNT VL2014::X))))
   (VL2014::VL-HIDEXPR-COLLECT-INDICES 1 :SYSTEM
                                       . "centaur/vl2014/mlib/hid-tools")
   (VL2014::VL-EXPLODE-HID :SYSTEM
                           . "centaur/esim/stv/stv-expand"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPR-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-ATOM-P$INLINE VL2014::X)
     (O< (VL2014::VL-EXPR-COUNT (CAR (VL2014::VL-NONATOM->ARGS$INLINE VL2014::X)))
         (VL2014::VL-EXPR-COUNT VL2014::X))))
   (VL2014::VL-HIDINDEX->NAME 1 :SYSTEM
                              . "centaur/vl2014/mlib/hid-tools"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPR-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-ATOM-P$INLINE VL2014::X)
     (NOT (VL2014::VL-OP-EQUIV$INLINE (VL2014::VL-NONATOM->OP$INLINE VL2014::X)
                                      ':VL-SCOPE))
     (O< (VL2014::VL-EXPR-COUNT (CAR (CDR (VL2014::VL-NONATOM->ARGS$INLINE VL2014::X))))
         (VL2014::VL-EXPR-COUNT VL2014::X))))
   (VL2014::VL-SCOPEEXPR->SCOPES 1 :SYSTEM
                                 . "centaur/vl2014/mlib/hid-tools"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPR-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-ATOM-P$INLINE (VL2014::VL-EXPR-FIX$INLINE VL2014::X))
     (NOT (MEMBER-EQUAL (VL2014::VL-NONATOM->OP$INLINE (VL2014::VL-EXPR-FIX$INLINE VL2014::X))
                        '(:VL-INDEX :VL-BITSELECT)))
     (O< (VL2014::VL-EXPR-COUNT (CAR (VL2014::VL-NONATOM->ARGS$INLINE (VL2014::VL-EXPR-FIX$INLINE VL2014::X))))
         (VL2014::VL-EXPR-COUNT VL2014::X))))
   (VL2014::VL-INDEX-FIND-TYPE 3 :SYSTEM
                               . "centaur/vl2014/mlib/hid-tools"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPR-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-ATOM-P$INLINE VL2014::X)
     (NOT (EQUAL (VL2014::VL-NONATOM->OP$INLINE VL2014::X)
                 ':VL-QMARK))
     (O< (VL2014::VL-EXPR-COUNT (CAR (CDR (VL2014::VL-NONATOM->ARGS$INLINE VL2014::X))))
         (VL2014::VL-EXPR-COUNT VL2014::X)))
    ((VL2014::VL-ATOM-P$INLINE VL2014::X)
     (NOT (EQUAL (VL2014::VL-NONATOM->OP$INLINE VL2014::X)
                 ':VL-QMARK))
     (NOT (TD-STUB-2 VL2014::WIDTH
                     (CAR (CDR (VL2014::VL-NONATOM->ARGS$INLINE VL2014::X)))))
     (O< (VL2014::VL-EXPR-COUNT (CAR (CDR (CDR (VL2014::VL-NONATOM->ARGS$INLINE VL2014::X)))))
         (VL2014::VL-EXPR-COUNT VL2014::X))))
   (VL2014::VL-OKAY-TO-TRUNCATE-EXPR 2 :SYSTEM
                                     . "centaur/vl2014/transforms/sizing")))
 ((JUSTIFICATION (VL2014::BLAME-ALIST)
                 (NIL O-P . O<)
                 ((VL2014::VL-BLAMEALIST-COUNT VL2014::BLAME-ALIST)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::BLAME-ALIST)
                  (NIL O-P . O<)
                  ((VL2014::VL-BLAMEALIST-COUNT VL2014::BLAME-ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-BLAMEALIST-COUNT VL2014::BLAME-ALIST)))
    ((NOT (CONSP (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::BLAME-ALIST)))
     (O< (VL2014::VL-BLAMEALIST-COUNT (CDR (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::BLAME-ALIST)))
         (VL2014::VL-BLAMEALIST-COUNT VL2014::BLAME-ALIST))))
   (VL2014::VL-BLAME-ALIST-TO-REPORTCARD 2 :SYSTEM
                                         . "centaur/vl2014/mlib/remove-bad")))
 ((JUSTIFICATION (VL2014::CLKS)
                 (NIL O-P . O<)
                 ((BINARY-+ '1 (LEN VL2014::CLKS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::CLKS)
                  (NIL O-P . O<)
                  ((BINARY-+ '1 (LEN VL2014::CLKS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ '1 (LEN VL2014::CLKS))))
    ((NOT (CONSP (CDR VL2014::CLKS)))
     (O< (BINARY-+ '1 (LEN (CDR VL2014::CLKS)))
         (BINARY-+ '1 (LEN VL2014::CLKS)))))
   (VL2014::VL-NEDGEFLOP-SOME-EDGE-SEXPR 2 :SYSTEM
                                         .
                                         "centaur/vl2014/transforms/always/nedgeflop")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'FIND-MATCHING-TERMS)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'FIND-MATCHING-TERMS)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'FIND-MATCHING-TERMS)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'FIND-MATCHING-TERMS)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'FIND-MATCHING-TERMS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'FIND-MATCHING-TERMS)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'FIND-MATCHING-TERMS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'FIND-MATCHING-TERMS)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (FIND-MATCHING-TERMS-FLG 4 :SYSTEM
                            . "clause-processors/instantiate")))
 ((JUSTIFICATION (N I)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                                  N))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N I)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                                   N))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                          N))))
    ((NOT (INTEGERP I))
     (NOT (< '0 I))
     (NOT (< I '1000))
     (NOT (INTEGERP N))
     (NOT (INTEGERP ITH-PRIME))
     (< ITH-PRIME '2)
     (< N (BINARY-* ITH-PRIME ITH-PRIME))
     (NOT (INTEGERP (BINARY-* N (UNARY-/ ITH-PRIME))))
     (O< (NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                         (BINARY-* N (UNARY-/ ITH-PRIME))))
         (NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                         N))))
    ((NOT (INTEGERP I))
     (NOT (< '0 I))
     (NOT (< I '1000))
     (NOT (INTEGERP N))
     (NOT (INTEGERP ITH-PRIME))
     (< ITH-PRIME '2)
     (< N (BINARY-* ITH-PRIME ITH-PRIME))
     (INTEGERP (BINARY-* N (UNARY-/ ITH-PRIME)))
     (NOT (< I '998))
     (O< (NFIX (BINARY-+ (BINARY-+ '1001
                                   (UNARY-- (BINARY-+ '1 I)))
                         N))
         (NFIX (BINARY-+ (BINARY-+ '1001 (UNARY-- I))
                         N)))))
   (PRIME-FACTORS-2 4 :SYSTEM
                    . "arithmetic-5/lib/basic-ops/common")))
 ((JUSTIFICATION (Y X)
                 (NIL O-P . O<)
                 ((ABS (BINARY-* (IFIX X) (IFIX Y)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((ABS (BINARY-* (IFIX X) (IFIX Y)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABS (BINARY-* (IFIX X) (IFIX Y)))))
    ((NOT (INTEGERP X))
     (NOT (INTEGERP Y))
     (EQUAL X '0)
     (EQUAL Y '0)
     (EQUAL X Y)
     (O< (ABS (BINARY-* (IFIX (RTL::FL (BINARY-* X '1/2)))
                        (IFIX (RTL::FL (BINARY-* Y '1/2)))))
         (ABS (BINARY-* (IFIX X) (IFIX Y))))))
   (RTL::LOG-INDUCT 2 :SYSTEM . "rtl/rel11/lib/log")))
 ((JUSTIFICATION (N I)
                 (NIL O-P . O<)
                 ((IFIX (IF (NOT (< I N))
                            '0
                          (BINARY-+ N (UNARY-- I))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N I)
                  (NIL O-P . O<)
                  ((IFIX (IF (NOT (< I N))
                             '0
                           (BINARY-+ N (UNARY-- I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IFIX (IF (< I N)
                    (BINARY-+ N (UNARY-- I))
                  '0))))
    ((NOT (INTEGERP (BINARY-+ N (UNARY-- I))))
     (NOT (< '0 (BINARY-+ N (UNARY-- I))))
     (O< (IFIX (IF (< (BINARY-+ '1 I) N)
                   (BINARY-+ N (UNARY-- (BINARY-+ '1 I)))
                 '0))
         (IFIX (IF (< I N)
                   (BINARY-+ N (UNARY-- I))
                 '0)))))
   (TRUNCATED-INTEGER-SIN/COS-TABLE-FN 6 :SYSTEM . "misc/sin-cos")))
 ((JUSTIFICATION (CGEN::VS)
                 (NIL LEXP . L<)
                 ((ACL2-COUNT CGEN::VS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CGEN::VS)
                  (NIL LEXP . L<)
                  ((ACL2-COUNT CGEN::VS)
                   IF MV-LIST RETURN-LAST))
   (((LEXP (ACL2-COUNT CGEN::VS)))
    ((NOT (CONSP CGEN::VS))
     (L< (ACL2-COUNT (CDR CGEN::VS))
         (ACL2-COUNT CGEN::VS))))
   (CGEN::DFS-ALL-VERTICES 5 :SYSTEM
                           . "acl2s/cgen/simple-graph-array")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((X86ISA::POWER-OF-2P-MEASURE X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((X86ISA::POWER-OF-2P-MEASURE X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (X86ISA::POWER-OF-2P-MEASURE X)))
    ((NOT (INTEGERP X))
     (< X '0)
     (NOT (< '1 X))
     (O< (X86ISA::POWER-OF-2P-MEASURE (BINARY-* '1/2 X))
         (X86ISA::POWER-OF-2P-MEASURE X))))
   (X86ISA::IS-POWER-OF-2P 1 :SYSTEM
                           .
                           "projects/x86isa/machine/rflags-spec")))
 ((JUSTIFICATION (X86ISA::START-REG)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '8
                                  (UNARY-- X86ISA::START-REG)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X86ISA::START-REG)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '8
                                   (UNARY-- X86ISA::START-REG)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '8
                          (UNARY-- X86ISA::START-REG)))))
    ((NOT (UNSIGNED-BYTE-P '3 X86ISA::START-REG))
     (EQUAL X86ISA::CNT '0)
     (MV-NTH '0
             (X86ISA::RME80$INLINE X86ISA::PROC-MODE
                                   X86ISA::START-ADDR X86ISA::SEG-REG ':R
                                   X86ISA::INST-AC? X86ISA::X86))
     (EQUAL (BINARY-+ '-1 X86ISA::CNT) '0)
     (O< (NFIX (BINARY-+ '8
                         (UNARY-- (BINARY-+ '1 X86ISA::START-REG))))
         (NFIX (BINARY-+ '8
                         (UNARY-- X86ISA::START-REG))))))
   (X86ISA::READ-MM-REGS 7 :SYSTEM
                         .
                         "projects/x86isa/machine/instructions/x87"))
  ((JUSTIFICATION (X86ISA::START-REG)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '8
                                   (UNARY-- X86ISA::START-REG)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '8
                          (UNARY-- X86ISA::START-REG)))))
    ((< (BINARY-+ '8
                  (UNARY-- X86ISA::START-REG))
        '0)
     (NOT (INTEGERP X86ISA::START-REG))
     (< X86ISA::START-REG '0)
     (EQUAL X86ISA::START-REG '8)
     (O< (NFIX (BINARY-+ '8
                         (UNARY-- (BINARY-+ '1 X86ISA::START-REG))))
         (NFIX (BINARY-+ '8
                         (UNARY-- X86ISA::START-REG))))))
   (X86ISA::SET-FP-TAG-FN 4 :SYSTEM
                          .
                          "projects/x86isa/machine/instructions/x87")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((X86ISA::SDM-INSTRUCTION-TABLE-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((X86ISA::SDM-INSTRUCTION-TABLE-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (X86ISA::SDM-INSTRUCTION-TABLE-COUNT X)))
    ((NOT (CONSP (X86ISA::SDM-INSTRUCTION-TABLE-FIX$INLINE X)))
     (O< (X86ISA::SDM-INSTRUCTION-TABLE-COUNT (CDR (X86ISA::SDM-INSTRUCTION-TABLE-FIX$INLINE X)))
         (X86ISA::SDM-INSTRUCTION-TABLE-COUNT X)))
    ((NOT (CONSP (X86ISA::SDM-INSTRUCTION-TABLE-FIX$INLINE X)))
     (O< (X86ISA::SDM-INSTRUCTION-TABLE-COUNT (X86ISA::SDM-INSTRUCTION-TABLE-ENTRY->SUBSECS$INLINE (CDR (CAR (X86ISA::SDM-INSTRUCTION-TABLE-FIX$INLINE X)))))
         (X86ISA::SDM-INSTRUCTION-TABLE-COUNT X))))
   (X86ISA::SDM-INSTRUCTION-TABLE-IMPLEMENTED-INSTRUCTIONS 1 :SYSTEM
                                                           .
                                                           "projects/x86isa/machine/catalogue-base")
   (X86ISA::SDM-INSTRUCTION-TABLE-INSTRUCTION-COUNTS :SYSTEM
                                                     .
                                                     "projects/x86isa/machine/catalogue-doc")))
 ((JUSTIFICATION (STATE X86ISA::CHANNEL)
                 (NIL O-P . O<)
                 ((FILE-MEASURE X86ISA::CHANNEL STATE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STATE CHANNEL)
                  (NIL O-P . O<)
                  ((FILE-MEASURE CHANNEL STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FILE-MEASURE CHANNEL STATE)))
    ((NOT (STATE-P STATE))
     (NOT (MV-NTH '0 (READ-CHAR$ CHANNEL STATE)))
     (O< (FILE-MEASURE CHANNEL
                       (MV-NTH '1 (READ-CHAR$ CHANNEL STATE)))
         (FILE-MEASURE CHANNEL STATE))))
   (TR-READ-CHAR$-ALL 3 :SYSTEM
                      . "std/io/read-file-characters"))
  ((JUSTIFICATION (STATE CHANNEL)
                  (NIL O-P . O<)
                  ((FILE-MEASURE CHANNEL STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FILE-MEASURE CHANNEL STATE)))
    ((NOT (STATE-P STATE))
     (MV-NTH '0 (READ-OBJECT CHANNEL STATE))
     (O< (FILE-MEASURE CHANNEL
                       (MV-NTH '2 (READ-OBJECT CHANNEL STATE)))
         (FILE-MEASURE CHANNEL STATE))))
   (TR-READ-OBJECT-ALL 3 :SYSTEM . "std/io/read-file-objects")
   (VL::VL-READ-ZIP-AUX :SYSTEM . "centaur/vl/kit/zipfile"))
  ((JUSTIFICATION (STATE X86ISA::CHANNEL)
                  (NIL O-P . O<)
                  ((FILE-MEASURE X86ISA::CHANNEL STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FILE-MEASURE X86ISA::CHANNEL STATE)))
    ((NOT (MV-NTH '0
                  (READ-BYTE$ X86ISA::CHANNEL STATE)))
     (O< (FILE-MEASURE X86ISA::CHANNEL
                       (MV-NTH '1
                               (READ-BYTE$ X86ISA::CHANNEL STATE)))
         (FILE-MEASURE X86ISA::CHANNEL STATE))))
   (X86ISA::READ-CHANNEL-INTO-BYTE-LIST 3 :SYSTEM
                                        .
                                        "projects/x86isa/tools/execution/execloaders")))
 ((JUSTIFICATION (PROOF-CHECKER-ARRAY::I MAX)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ MAX (UNARY-- PROOF-CHECKER-ARRAY::I)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ N (UNARY-- I)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ N (UNARY-- I)))))
    ((NOT (INTEGERP (BINARY-+ N (UNARY-- I))))
     (NOT (< '0 (BINARY-+ N (UNARY-- I))))
     (O< (NFIX (BINARY-+ N (UNARY-- (BINARY-+ I '1))))
         (NFIX (BINARY-+ N (UNARY-- I))))))
   (COMPRESS11 5))
  ((JUSTIFICATION (X J)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ J (UNARY-- X)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ J (UNARY-- X)))))
    ((NOT (INTEGERP (BINARY-+ J (UNARY-- X))))
     (NOT (< '0 (BINARY-+ J (UNARY-- X))))
     (O< (NFIX (BINARY-+ J (UNARY-- (BINARY-+ '1 X))))
         (NFIX (BINARY-+ J (UNARY-- X))))))
   (COMPRESS211 6))
  ((JUSTIFICATION (LRAT::POS LEN)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ LEN (UNARY-- LRAT::POS)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ LEN (UNARY-- LRAT::POS)))))
    ((NOT (EQUAL (CHAR LRAT::STR LRAT::POS)
                 '#\Space))
     (NOT (INTEGERP (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS)))))
     (NOT (< '0
             (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS)))))
     (O< (NFIX (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS))))
         (NFIX (BINARY-+ LEN (UNARY-- LRAT::POS))))))
   (LRAT::LRAT-FLG-POS-SKIP-SPACES 3 :SYSTEM
                                   .
                                   "projects/sat/lrat/stobj-based/lrat-parser"))
  ((JUSTIFICATION (LRAT::POS LEN)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ LEN (UNARY-- LRAT::POS)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ LEN (UNARY-- LRAT::POS)))))
    ((NOT (< LRAT::POS '72057594037927936))
     (EQUAL (CHAR LRAT::STR LRAT::POS)
            '#\Newline)
     (NOT (INTEGERP (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS)))))
     (NOT (< '0
             (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS)))))
     (O< (NFIX (BINARY-+ LEN (UNARY-- (BINARY-+ '1 LRAT::POS))))
         (NFIX (BINARY-+ LEN (UNARY-- LRAT::POS))))))
   (LRAT::POS-TO-EOL+1 3 :SYSTEM
                       .
                       "projects/sat/lrat/stobj-based/lrat-parser"))
  ((JUSTIFICATION (X86ISA::START-ADDR X86ISA::HALT-ADDR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ X86ISA::HALT-ADDR
                                   (UNARY-- X86ISA::START-ADDR)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ X86ISA::HALT-ADDR
                          (UNARY-- X86ISA::START-ADDR)))))
    ((NOT (INTEGERP X86ISA::START-ADDR))
     (NOT (INTEGERP X86ISA::HALT-ADDR))
     (NOT (< X86ISA::START-ADDR X86ISA::HALT-ADDR))
     (O< (NFIX (BINARY-+ X86ISA::HALT-ADDR
                         (UNARY-- (BINARY-+ '1 X86ISA::START-ADDR))))
         (NFIX (BINARY-+ X86ISA::HALT-ADDR
                         (UNARY-- X86ISA::START-ADDR))))))
   (X86ISA::MAKE-FIB32-ADDR-ALST 2 :SYSTEM
                                 .
                                 "projects/x86isa/tools/execution/examples/fibonacci32"))
  ((JUSTIFICATION (FARRAY::I MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ MAX (UNARY-- FARRAY::I)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ MAX (UNARY-- FARRAY::I)))))
    ((NOT (INTEGERP FARRAY::I))
     (< FARRAY::I '0)
     (NOT (< FARRAY::I (FARRAY::MEM-LEN FARRAY::ST)))
     (NOT (INTEGERP MAX))
     (< MAX '0)
     (NOT (< MAX (FARRAY::MEM-LEN FARRAY::ST)))
     (< MAX FARRAY::I)
     (EQUAL FARRAY::I MAX)
     (O< (NFIX (BINARY-+ MAX (UNARY-- (BINARY-+ '1 FARRAY::I))))
         (NFIX (BINARY-+ MAX (UNARY-- FARRAY::I))))))
   (FARRAY::PRINT-ST1 3 :SYSTEM . "projects/farray/farray"))
  ((JUSTIFICATION (PROOF-CHECKER-ARRAY::I MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ MAX (UNARY-- PROOF-CHECKER-ARRAY::I)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ MAX (UNARY-- PROOF-CHECKER-ARRAY::I)))))
    ((NOT (INTEGERP PROOF-CHECKER-ARRAY::I))
     (< PROOF-CHECKER-ARRAY::I '0)
     (NOT (< PROOF-CHECKER-ARRAY::I
             (PROOF-CHECKER-ARRAY::MEM-LEN PROOF-CHECKER-ARRAY::ST)))
     (NOT (INTEGERP MAX))
     (< MAX '0)
     (NOT (< MAX
             (PROOF-CHECKER-ARRAY::MEM-LEN PROOF-CHECKER-ARRAY::ST)))
     (< MAX PROOF-CHECKER-ARRAY::I)
     (EQUAL PROOF-CHECKER-ARRAY::I MAX)
     (O< (NFIX (BINARY-+ MAX
                         (UNARY-- (BINARY-+ '1 PROOF-CHECKER-ARRAY::I))))
         (NFIX (BINARY-+ MAX
                         (UNARY-- PROOF-CHECKER-ARRAY::I))))))
   (PROOF-CHECKER-ARRAY::PRINT-ST1 3 :SYSTEM
                                   .
                                   "projects/sat/proof-checker-array/farray")))
 ((JUSTIFICATION (PROOF-CHECKER-ARRAY::I)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '1 PROOF-CHECKER-ARRAY::I))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1 I))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1 I))))
    ((NOT (INTEGERP I))
     (< I '0)
     (EQUAL CHR (CHAR STR I))
     (O< (NFIX (BINARY-+ '1 (BINARY-+ '-1 I)))
         (NFIX (BINARY-+ '1 I)))))
   (MEMBER-CHAR-STRINGP 3))
  ((JUSTIFICATION (MAX1)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1 MAX1))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1 MAX1))))
    ((NOT (INTEGERP MAX1))
     (< MAX1 '0)
     (NOT (EQUAL (CHAR STR1 MAX1)
                 (CHAR STR2 MAX2)))
     (O< (NFIX (BINARY-+ '1 (BINARY-+ '-1 MAX1)))
         (NFIX (BINARY-+ '1 MAX1)))))
   (TERMINAL-SUBSTRINGP1 4))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1 I))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1 I))))
    ((NOT (INTEGERP I))
     (< I '0)
     (NOT (INTEGERP J))
     (< J '0)
     (< I J)
     (EQUAL (RTL::BITN X I) (RTL::BITN Y I))
     (O< (NFIX (BINARY-+ '1 (BINARY-+ '-1 I)))
         (NFIX (BINARY-+ '1 I)))))
   (RTL::GEN 4 :SYSTEM . "rtl/rel11/lib/add"))
  ((JUSTIFICATION (PROOF-CHECKER-ARRAY::I)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1 PROOF-CHECKER-ARRAY::I))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1 PROOF-CHECKER-ARRAY::I))))
    ((NOT (PROOF-CHECKER-ARRAY::FARRAYP PROOF-CHECKER-ARRAY::START
                                        PROOF-CHECKER-ARRAY::ST))
     (NOT (PROOF-CHECKER-ARRAY::FIELDP PROOF-CHECKER-ARRAY::F
                                       PROOF-CHECKER-ARRAY::START
                                       PROOF-CHECKER-ARRAY::ST))
     (IF (PROOF-CHECKER-ARRAY::FIELD-OFFSETP PROOF-CHECKER-ARRAY::I
                                             PROOF-CHECKER-ARRAY::F
                                             PROOF-CHECKER-ARRAY::START
                                             PROOF-CHECKER-ARRAY::ST)
         'NIL
       (NOT (EQUAL PROOF-CHECKER-ARRAY::I '-1)))
     (EQUAL PROOF-CHECKER-ARRAY::I '-1)
     (O< (NFIX (BINARY-+ '1
                         (BINARY-+ '-1 PROOF-CHECKER-ARRAY::I)))
         (NFIX (BINARY-+ '1 PROOF-CHECKER-ARRAY::I)))))
   (PROOF-CHECKER-ARRAY::PROJECT1 4 :SYSTEM
                                  .
                                  "projects/sat/proof-checker-array/assignment-equiv")))
 ((JUSTIFICATION (L2 L1)
                 (NIL O-P . O<)
                 ((BINARY-+ (LEN L1) (LEN L2))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (LEXORDER (CAR L1) (CAR L2))
     (O< (BINARY-+ (LEN L1) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (LEXORDER (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN L2))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (MERGE-LEXORDER 3))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (EQUAL (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (EQUAL (CAR L1) (CAR L2))
     (NOT (SYMBOL< (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN L2))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (EQUAL (CAR L1) (CAR L2))
     (SYMBOL< (CAR L1) (CAR L2))
     (O< (BINARY-+ (LEN L1) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (STRICT-MERGE-SYMBOL< 3))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (SYMBOL< (CAR L1) (CAR L2))
     (O< (BINARY-+ (LEN L1) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (SYMBOL< (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN L2))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (MERGE-SYMBOL< 3))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (COMPARE< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (COMPARE< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (COMPARABLE-MERGE 2 :SYSTEM . "defsort/generic"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((IF (IF (CONSP X) 'NIL 'T)
         (IF (CONSP Y) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (LEN (CDR X)) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (GL::CDR-BOTH 2 :SYSTEM . "centaur/gl/rws"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (<< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (<< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (<<-MERGE 2 :SYSTEM . "defsort/uniquep"))
  ((JUSTIFICATION (B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A) (LEN B))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A) (LEN B))))
    ((NOT (CONSP A))
     (NOT (CONSP B))
     (NOT (EQUAL (CAR A) (CAR B)))
     (O< (BINARY-+ (LEN (CDR A)) (LEN B))
         (BINARY-+ (LEN A) (LEN B))))
    ((NOT (CONSP A))
     (NOT (CONSP B))
     (EQUAL (CAR A) (CAR B))
     (NOT (FAST-ALPHORDER (CAR B) (CAR A)))
     (O< (BINARY-+ (LEN A) (LEN (CDR B)))
         (BINARY-+ (LEN A) (LEN B))))
    ((NOT (CONSP A))
     (NOT (CONSP B))
     (FAST-ALPHORDER (CAR B) (CAR A))
     (O< (BINARY-+ (LEN (CDR A)) (LEN B))
         (BINARY-+ (LEN A) (LEN B)))))
   (HONS-ALPHORDER-MERGE 2 :SYSTEM
                         . "centaur/misc/hons-alphorder-merge"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (STR::ISTR<$INLINE (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (STR::ISTR<$INLINE (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (STR::ISTR-MERGE 2 :SYSTEM . "std/strings/isort"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (SHORTER-P (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (SHORTER-P (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (LEN-MERGE 2 :SYSTEM
              . "centaur/4v-sexpr/sexpr-loop-debug"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (ATOM< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (ATOM< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (ALPHORDER-MERGE 2 :SYSTEM . "centaur/aig/aig-vars-ext"))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((IF (IF (CONSP L1) 'NIL 'T)
         (IF (CONSP L2) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (IF (CONSP L1)
                                    (CONS (CAR L1) (CONS (CDR L1) 'NIL))
                                  '(NIL NIL))))
                   (LEN (MV-NTH '1
                                (IF (CONSP L2)
                                    (CONS (CAR L2) (CONS (CDR L2) 'NIL))
                                  '(NIL NIL)))))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (Q-ZIPPER 2 :SYSTEM . "centaur/ubdds/param"))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (SYMBOL< (CAR (CAR L1)) (CAR (CAR L2)))
     (O< (BINARY-+ (LEN L1) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (SYMBOL< (CAR (CAR L1)) (CAR (CAR L2))))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN L2))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (MERGE-SYMBOL-ALIST-< 3 :SYSTEM . "misc/symbol-btree"))
  ((JUSTIFICATION (GL::V2 GL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN GL::V1) (LEN GL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN GL::V1) (LEN GL::V2))))
    ((IF (MV-NTH '2 (GL::FIRST/REST/END GL::V1))
         (MV-NTH '2 (GL::FIRST/REST/END GL::V2))
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END GL::V1)))
                   (LEN (MV-NTH '1
                                (GL::FIRST/REST/END GL::V2))))
         (BINARY-+ (LEN GL::V1) (LEN GL::V2)))))
   (GL::BFR-+-SS 3 :SYSTEM
                 . "centaur/gl/symbolic-arithmetic")
   (GL::BFR-LOGNOR-SS :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A) (LEN B))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A) (LEN B))))
    ((IF (IF (CONSP A) 'NIL 'T)
         (IF (CONSP B) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (CONS (CAR A) (CONS (CDR A) 'NIL))))
                   (LEN (MV-NTH '1
                                (CONS (CAR B) (CONS (CDR B) 'NIL)))))
         (BINARY-+ (LEN A) (LEN B)))))
   (GL::BFR-=-UU 2 :SYSTEM
                 . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-=-UU :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (GL::V2 GL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN GL::V1) (LEN GL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN GL::V1) (LEN GL::V2))))
    ((MV-NTH '2 (GL::FIRST/REST/END GL::V1))
     (O< (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END GL::V1)))
                   (LEN GL::V2))
         (BINARY-+ (LEN GL::V1) (LEN GL::V2)))))
   (GL::BFR-*-SS 2 :SYSTEM
                 . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-*-SS :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A) (LEN B))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A) (LEN B))))
    ((MV-NTH '2 (GL::FIRST/REST/END A))
     (MV-NTH '2 (GL::FIRST/REST/END B))
     (O< (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END A)))
                   (LEN (MV-NTH '1 (GL::FIRST/REST/END B))))
         (BINARY-+ (LEN A) (LEN B)))))
   (GL::BFR-LOGAND-SS 2 :SYSTEM
                      . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-LOGAND-SS :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (AIGNET::NAT<$INLINE (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (AIGNET::NAT<$INLINE (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (AIGNET::NATSORT-MERGE 2 :SYSTEM . "centaur/aignet/rwlib"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (AIGNET::LIT<$INLINE (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (AIGNET::LIT<$INLINE (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (AIGNET::LITERAL-SORT-MERGE 2 :SYSTEM
                               . "centaur/aignet/literal-sort"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (AIGNET::LEVELS-SORT-< (CAR Y)
                            (CAR X)
                            AIGNET::LEVELS)
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (AIGNET::LEVELS-SORT-< (CAR Y)
                                 (CAR X)
                                 AIGNET::LEVELS))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (AIGNET::LEVELS-SORT-MERGE 3 :SYSTEM . "centaur/aignet/balance"))
  ((JUSTIFICATION (AIGNET::DOMS AIGNET::LITS)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN AIGNET::LITS)
                             (LEN AIGNET::DOMS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN AIGNET::LITS)
                    (LEN AIGNET::DOMS))))
    ((NOT (CONSP AIGNET::LITS))
     (NOT (CONSP AIGNET::DOMS))
     (< (SATLINK::LIT->VAR$INLINE (CAR AIGNET::DOMS))
        (SATLINK::LIT->VAR$INLINE (CAR AIGNET::LITS)))
     (O< (BINARY-+ (LEN (CDR AIGNET::LITS))
                   (LEN AIGNET::DOMS))
         (BINARY-+ (LEN AIGNET::LITS)
                   (LEN AIGNET::DOMS))))
    ((NOT (CONSP AIGNET::LITS))
     (NOT (CONSP AIGNET::DOMS))
     (NOT (< (SATLINK::LIT->VAR$INLINE (CAR AIGNET::DOMS))
             (SATLINK::LIT->VAR$INLINE (CAR AIGNET::LITS))))
     (O< (BINARY-+ (LEN AIGNET::LITS)
                   (LEN (CDR AIGNET::DOMS)))
         (BINARY-+ (LEN AIGNET::LITS)
                   (LEN AIGNET::DOMS)))))
   (AIGNET::XOR-SUPERGATE-UNDER-DOMINATORS 2 :SYSTEM
                                           . "centaur/aignet/dom-supergate-sweep"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL2014::VL-WARNING-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL2014::VL-WARNING-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL2014::VL-WARNING-MERGE 2 :SYSTEM
                             . "centaur/vl2014/util/warnings"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (GL::PROF-ENTRY-COMPARE-TRIES (CAR Y)
                                   (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (GL::PROF-ENTRY-COMPARE-TRIES (CAR Y)
                                        (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (GL::PROF-ENTRY-TRIES-MERGE 2 :SYSTEM . "centaur/gl/prof"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (GL::PROF-ENTRY-COMPARE-FRAMES (CAR Y)
                                    (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (GL::PROF-ENTRY-COMPARE-FRAMES (CAR Y)
                                         (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (GL::PROF-ENTRY-FRAMES-MERGE 2 :SYSTEM . "centaur/gl/prof"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (ALPHANUM-OBJ-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (ALPHANUM-OBJ-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (ALPHA-MERGE 2
                :SYSTEM . "centaur/misc/alphanum-sort"))
  ((JUSTIFICATION (RP::SET2 RP::SET1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN RP::SET1) (LEN RP::SET2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN RP::SET1)
                    (LEN RP::SET2))))
    ((NOT (CONSP RP::SET1))
     (NOT (CONSP RP::SET2))
     (NOT (EQUAL (CAR RP::SET1) (CAR RP::SET2)))
     (O< (BINARY-+ (LEN (CDR RP::SET1))
                   (LEN (CDR RP::SET2)))
         (BINARY-+ (LEN RP::SET1)
                   (LEN RP::SET2))))
    ((NOT (CONSP RP::SET1))
     (NOT (CONSP RP::SET2))
     (EQUAL (CAR RP::SET1) (CAR RP::SET2))
     (NOT (LEXORDER (CAR RP::SET1)
                    (CAR RP::SET2)))
     (O< (BINARY-+ (LEN (CDR RP::SET1))
                   (LEN RP::SET2))
         (BINARY-+ (LEN RP::SET1)
                   (LEN RP::SET2))))
    ((NOT (CONSP RP::SET1))
     (NOT (CONSP RP::SET2))
     (EQUAL (CAR RP::SET1) (CAR RP::SET2))
     (LEXORDER (CAR RP::SET1) (CAR RP::SET2))
     (O< (BINARY-+ (LEN RP::SET1)
                   (LEN (CDR RP::SET2)))
         (BINARY-+ (LEN RP::SET1)
                   (LEN RP::SET2)))))
   (RP::SORTED-SET-DIFFERENCE 2 :SYSTEM
                              . "projects/rp-rewriter/macros"))
  ((JUSTIFICATION (RP::L2 RP::L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN RP::L1) (LEN RP::L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN RP::L1) (LEN RP::L2))))
    ((NOT (CONSP RP::L1))
     (NOT (CONSP RP::L2))
     (RP::RULE-RESULT-COMPERATOR (CAR RP::L1)
                                 (CAR RP::L2))
     (O< (BINARY-+ (LEN RP::L1)
                   (LEN (CDR RP::L2)))
         (BINARY-+ (LEN RP::L1) (LEN RP::L2))))
    ((NOT (CONSP RP::L1))
     (NOT (CONSP RP::L2))
     (NOT (RP::RULE-RESULT-COMPERATOR (CAR RP::L1)
                                      (CAR RP::L2)))
     (O< (BINARY-+ (LEN (CDR RP::L1))
                   (LEN RP::L2))
         (BINARY-+ (LEN RP::L1) (LEN RP::L2)))))
   (RP::MERGE-RULE-RESULTS 3 :SYSTEM
                           .
                           "projects/rp-rewriter/rp-state-functions"))
  ((JUSTIFICATION (SVL::L2 SVL::L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN SVL::L1) (LEN SVL::L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN SVL::L1) (LEN SVL::L2))))
    ((NOT (CONSP SVL::L1))
     (NOT (CONSP SVL::L2))
     (APPLY$ SVL::COMPERATOR
             (CONS (CAR SVL::L1)
                   (CONS (CAR SVL::L2) 'NIL)))
     (O< (BINARY-+ (LEN SVL::L1)
                   (LEN (CDR SVL::L2)))
         (BINARY-+ (LEN SVL::L1) (LEN SVL::L2))))
    ((NOT (CONSP SVL::L1))
     (NOT (CONSP SVL::L2))
     (NOT (APPLY$ SVL::COMPERATOR
                  (CONS (CAR SVL::L1)
                        (CONS (CAR SVL::L2) 'NIL))))
     (O< (BINARY-+ (LEN (CDR SVL::L1))
                   (LEN SVL::L2))
         (BINARY-+ (LEN SVL::L1)
                   (LEN SVL::L2)))))
   (SVL::MERGE-COMPERATOR 4 :SYSTEM . "centaur/svl/tools"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (< (SV::DRIVER->STRENGTH$INLINE (CAR X))
        (SV::DRIVER->STRENGTH$INLINE (CAR Y)))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (< (SV::DRIVER->STRENGTH$INLINE (CAR X))
             (SV::DRIVER->STRENGTH$INLINE (CAR Y))))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::DRIVESTRENGTH-MERGE 2 :SYSTEM . "centaur/sv/mods/lhs"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (SV::SEGMENT-DRIVER-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (SV::SEGMENT-DRIVER-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::SEGMENT-DRIVERS-MERGE 2 :SYSTEM
                              . "centaur/sv/mods/norm-netlist"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL::VL-WARNING-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL::VL-WARNING-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL::VL-WARNING-MERGE 2 :SYSTEM . "centaur/vl/util/warnings"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (IF (CONSP (CAR X))
         (SV::SVAR-P (CAR (CAR X)))
       'NIL)
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (CONSP (CAR X)))
     (NOT (SV::SVAR-P (CAR (CAR X))))
     (NOT (CONSP (CAR Y)))
     (NOT (SV::SVAR-P (CAR (CAR Y))))
     (O< (BINARY-+ (LEN (CDR X)) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (CONSP (CAR X)))
     (NOT (SV::SVAR-P (CAR (CAR X))))
     (IF (CONSP (CAR Y))
         (SV::SVAR-P (CAR (CAR Y)))
       'NIL)
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::SVEX-ALISTS-EQUIVALENCE-PRUNE 2 :SYSTEM
                                      .
                                      "centaur/sv/svtv/fsm-override-smart-check"))
  ((JUSTIFICATION (FGL::V2 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN FGL::V1) (LEN FGL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN FGL::V1) (LEN FGL::V2))))
    ((IF (MV-NTH '2
                 (FGL::AABF-FIRST/REST/END FGL::V1))
         (MV-NTH '2
                 (FGL::AABF-FIRST/REST/END FGL::V2))
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (FGL::AABF-FIRST/REST/END FGL::V1)))
                   (LEN (MV-NTH '1
                                (FGL::AABF-FIRST/REST/END FGL::V2))))
         (BINARY-+ (LEN FGL::V1)
                   (LEN FGL::V2)))))
   (FGL::AABF-+-SS 4 :SYSTEM
                   . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (FGL::V2 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN FGL::V1) (LEN FGL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN FGL::V1) (LEN FGL::V2))))
    ((MV-NTH '2
             (FGL::AABF-FIRST/REST/END FGL::V1))
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (FGL::AABF-FIRST/REST/END FGL::V1)))
                   (LEN FGL::V2))
         (BINARY-+ (LEN FGL::V1)
                   (LEN FGL::V2)))))
   (FGL::AABF-*-SS 3 :SYSTEM
                   . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A) (LEN B))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A) (LEN B))))
    ((BINARY-AND* (MV-NTH '2 (FGL::AABF-FIRST/REST/END A))
                  (MV-NTH '2
                          (FGL::AABF-FIRST/REST/END B)))
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (FGL::AABF-FIRST/REST/END A)))
                   (LEN (MV-NTH '1
                                (FGL::AABF-FIRST/REST/END B))))
         (BINARY-+ (LEN A) (LEN B)))))
   (FGL::AABF-<-=-SS 3 :SYSTEM
                     . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (FGL::V2 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN FGL::V1) (LEN FGL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN FGL::V1) (LEN FGL::V2))))
    ((IF (MV-NTH '2
                 (FGL::BFR-FIRST/REST/END FGL::V1))
         (MV-NTH '2
                 (FGL::BFR-FIRST/REST/END FGL::V2))
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (FGL::BFR-FIRST/REST/END FGL::V1)))
                   (LEN (MV-NTH '1
                                (FGL::BFR-FIRST/REST/END FGL::V2))))
         (BINARY-+ (LEN FGL::V1)
                   (LEN FGL::V2)))))
   (FGL::BFR-+-SS 4
                  :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (FGL::V2 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN FGL::V1) (LEN FGL::V2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN FGL::V1) (LEN FGL::V2))))
    ((MV-NTH '2
             (FGL::BFR-FIRST/REST/END FGL::V1))
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (FGL::BFR-FIRST/REST/END FGL::V1)))
                   (LEN FGL::V2))
         (BINARY-+ (LEN FGL::V1)
                   (LEN FGL::V2)))))
   (FGL::BFR-*-SS 3
                  :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A) (LEN B))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A) (LEN B))))
    ((BINARY-AND* (MV-NTH '2 (FGL::BFR-FIRST/REST/END A))
                  (MV-NTH '2 (FGL::BFR-FIRST/REST/END B)))
     (O< (BINARY-+ (LEN (MV-NTH '1 (FGL::BFR-FIRST/REST/END A)))
                   (LEN (MV-NTH '1
                                (FGL::BFR-FIRST/REST/END B))))
         (BINARY-+ (LEN A) (LEN B)))))
   (FGL::BFR-<-=-SS 3
                    :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (FGL::PROF-ENTRY-COMPARE-TRIES (CAR Y)
                                    (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (FGL::PROF-ENTRY-COMPARE-TRIES (CAR Y)
                                         (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (FGL::PROF-ENTRY-TRIES-MERGE 2 :SYSTEM . "centaur/fgl/prof"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (FGL::PROF-ENTRY-COMPARE-FRAMES (CAR Y)
                                     (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (FGL::PROF-ENTRY-COMPARE-FRAMES (CAR Y)
                                          (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (FGL::PROF-ENTRY-FRAMES-MERGE 2 :SYSTEM . "centaur/fgl/prof"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL::SD-PROBLEM-> (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL::SD-PROBLEM-> (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL::SD-PROBLEM-MERGE 2 :SYSTEM
                         . "centaur/vl/lint/skip-detect"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL::PARTSUM-ELT< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL::PARTSUM-ELT< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL::PARTSUMLIST-SORT-MERGE 2 :SYSTEM
                               . "centaur/vl/util/summarize-parts"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (SV::RANGESORT-COMPARE< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (SV::RANGESORT-COMPARE< (CAR Y)
                                  (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::RANGELIST-SORT-MERGE 2 :SYSTEM . "centaur/sv/vl/use-set"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (SV::RANGES-COMBINABLE FIRST (CAR Y)))
     (NOT (CONSP X))
     (NOT (SV::RANGES-COMBINABLE (MV-NTH '0
                                         (SV::RANGELIST-ABSORB FIRST Y))
                                 (CAR X)))
     (NOT (CONSP (MV-NTH '1
                         (SV::RANGELIST-ABSORB FIRST Y))))
     (O< (BINARY-+ (LEN (MV-NTH '1
                                (SV::RANGELIST-ABSORB FIRST Y)))
                   (LEN X))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::RANGELIST-UNION-AUX 3 :SYSTEM . "centaur/sv/vl/use-set"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (SV::PATH< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (SV::PATH< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::PATHLIST-SORT-MERGE 2 :SYSTEM . "centaur/sv/vl/use-set"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (SV::ADDRESS< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (SV::ADDRESS< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (SV::ADDRESSLIST-SORT-MERGE 2 :SYSTEM . "centaur/sv/vl/use-set"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL::VL-PORTDECL-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL::VL-PORTDECL-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL::VL-PORTDECL-SORT-MERGE 2 :SYSTEM
                               . "centaur/vl/server/porttable"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL::VL-COMMENTMAP-ENTRY-< (CAR Y)
                                (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL::VL-COMMENTMAP-ENTRY-< (CAR Y)
                                     (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL::VL-COMMENTMAP-ENTRY-MERGE 2 :SYSTEM
                                  . "centaur/vl/mlib/comment-writer"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL2014::SD-PROBLEM-> (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL2014::SD-PROBLEM-> (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL2014::SD-PROBLEM-MERGE 2 :SYSTEM
                             . "centaur/vl2014/lint/skip-detect"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL2014::VL-EMODWIRE-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL2014::VL-EMODWIRE-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL2014::VL-EMODWIRE-MERGE 2 :SYSTEM
                              . "centaur/esim/vltoe/verilogify"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL2014::VL-COMMENTMAP-ENTRY-< (CAR Y)
                                    (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL2014::VL-COMMENTMAP-ENTRY-< (CAR Y)
                                         (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL2014::VL-COMMENTMAP-ENTRY-MERGE 2 :SYSTEM
                                      . "centaur/vl2014/mlib/comment-writer"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (VL2014::VL-PORTDECL-< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (VL2014::VL-PORTDECL-< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (VL2014::VL-PORTDECL-SORT-MERGE 2 :SYSTEM
                                   . "centaur/vl2014/server/porttable"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (X86ISA::SDM-INSTRUCTION-PAIR-< (CAR Y)
                                     (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (X86ISA::SDM-INSTRUCTION-PAIR-< (CAR Y)
                                          (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (X86ISA::SDM-INSTRUCTION-TABLE-MERGE 2 :SYSTEM
                                        .
                                        "projects/x86isa/machine/catalogue-base"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN X) (LEN Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (< (CAR Y) (CAR X))
     (O< (BINARY-+ (LEN (CDR X)) (LEN Y))
         (BINARY-+ (LEN X) (LEN Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (< (CAR Y) (CAR X)))
     (O< (BINARY-+ (LEN X) (LEN (CDR Y)))
         (BINARY-+ (LEN X) (LEN Y)))))
   (<-MERGE 2 :SYSTEM . "projects/irv/irv"))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN L1) (LEN L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (EQUAL (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (EQUAL (CAR L1) (CAR L2))
     (NOT (< (CAR L1) (CAR L2)))
     (O< (BINARY-+ (LEN (CDR L1)) (LEN L2))
         (BINARY-+ (LEN L1) (LEN L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (EQUAL (CAR L1) (CAR L2))
     (< (CAR L1) (CAR L2))
     (O< (BINARY-+ (LEN L1) (LEN (CDR L2)))
         (BINARY-+ (LEN L1) (LEN L2)))))
   (STRICT-MERGE-< 3 :SYSTEM
                   .
                   "kestrel/auto-termination/strict-merge-sort")))
 ((JUSTIFICATION (ALEOBFT::PREVIOUS-ROUND)
                 (NIL O-P . O<)
                 ((NFIX ALEOBFT::PREVIOUS-ROUND)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (NFIX (BINARY-+ '-1 N)) (NFIX N))))
   (MAKE-N-VARS 4 :SYSTEM
                . "clause-processors/generalize")
   (VL2014::VL-CONSTINT-LSB-BITS-AUX :SYSTEM
                                     . "centaur/vl2014/mlib/constint-bits")
   (FGL::FGL-LIST-TO-TREE-AUX2 :SYSTEM . "centaur/fgl/primitives")
   (SV::SVEX-UNROLL-MULTISTATE-PHASE-STATE :SYSTEM
                                           . "centaur/sv/svtv/compose-phases")
   (VL::VL-STRING->BITS :SYSTEM . "centaur/sv/vl/expr")
   (SV::SVEX-TO-RSH-OF-CONCAT-ACCUMULATE :SYSTEM
                                         . "centaur/sv/svex/rewrite-rules")
   (GL-SYM::|ACL2::HONS-ASSOC-EQUAL$| :SYSTEM . "centaur/gl/gl")
   (PARITY :SYSTEM . "centaur/bitops/parity")
   (AIGNET::AIGNET-OUTPUT-RANGE-COLLECT-IN/REG-UBDD-ORDER :SYSTEM . "centaur/aignet/parametrize")
   (AIGNET::SWEEP-OBSERVABILITY-DOM-SUPERGATES-REC :SYSTEM
                                                   . "centaur/aignet/dom-supergate-sweep")
   (AIGNET::UNREACHABLE-NODE-TOGGLES :SYSTEM
                                     . "centaur/aignet/unreachability")
   (AIGNET::OBS-SDOM-INFO-SET-POS :SYSTEM
                                  .
                                  "centaur/aignet/internal-observability-super")
   (AIGNET::AIGNET-MARK-OUTPUT-NODE-RANGE :SYSTEM . "centaur/aignet/fraig")
   (AIGNET::CONJOIN-OUTPUT-RANGE :SYSTEM
                                 . "centaur/aignet/transform-stub")
   (AIGNET::MERGED-LEAVES-EXPANDMASK :SYSTEM . "centaur/aignet/cuts4")
   (PROVE-4V-EQUIV-CONGS :SYSTEM . "centaur/4v-sexpr/4v-logic"))
  ((JUSTIFICATION (LEN)
                  (NIL O-P . O<)
                  ((NFIX LEN) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX LEN)))
    ((NOT (INTEGERP LEN))
     (NOT (< '0 LEN))
     (EQUAL LEN '1)
     (O< (NFIX (BINARY-+ LEN (UNARY-- (ASH LEN '-1))))
         (NFIX LEN)))
    ((NOT (INTEGERP LEN))
     (NOT (< '0 LEN))
     (EQUAL LEN '1)
     (O< (NFIX (ASH LEN '-1)) (NFIX LEN))))
   (FAST-COMPARABLE-MERGESORT-FIXNUMS 2 :SYSTEM . "defsort/generic")
   (<-MERGESORT-FIXNUM :SYSTEM . "projects/irv/irv")
   (X86ISA::SDM-INSTRUCTION-TABLE-MERGESORT-FIXNUM :SYSTEM
                                                   .
                                                   "projects/x86isa/machine/catalogue-base")
   (VL2014::VL-PORTDECL-SORT-MERGESORT-FIXNUM :SYSTEM
                                              . "centaur/vl2014/server/porttable")
   (VL2014::VL-COMMENTMAP-ENTRY-MERGESORT-FIXNUM :SYSTEM
                                                 . "centaur/vl2014/mlib/comment-writer")
   (VL2014::VL-EMODWIRE-MERGESORT-FIXNUM :SYSTEM
                                         . "centaur/esim/vltoe/verilogify")
   (VL2014::SD-PROBLEM-MERGESORT-FIXNUM :SYSTEM
                                        . "centaur/vl2014/lint/skip-detect")
   (VL::VL-COMMENTMAP-ENTRY-MERGESORT-FIXNUM :SYSTEM
                                             . "centaur/vl/mlib/comment-writer")
   (VL::VL-PORTDECL-SORT-MERGESORT-FIXNUM :SYSTEM . "centaur/vl/server/porttable")
   (SV::RANGELIST-SORT-MERGESORT-FIXNUM :SYSTEM . "centaur/sv/vl/use-set")
   (VL::PARTSUMLIST-SORT-MERGESORT-FIXNUM :SYSTEM
                                          . "centaur/vl/util/summarize-parts")
   (VL::SD-PROBLEM-MERGESORT-FIXNUM :SYSTEM . "centaur/vl/lint/skip-detect")
   (FGL::PROF-ENTRY-TRIES-MERGESORT-FIXNUM :SYSTEM . "centaur/fgl/prof")
   (VL::VL-WARNING-MERGESORT-FIXNUM :SYSTEM . "centaur/vl/util/warnings")
   (SV::SEGMENT-DRIVERS-MERGESORT-FIXNUM :SYSTEM
                                         . "centaur/sv/mods/norm-netlist")
   (SV::DRIVESTRENGTH-MERGESORT-FIXNUM :SYSTEM . "centaur/sv/mods/lhs")
   (ALPHA-MERGESORT-FIXNUM :SYSTEM . "centaur/misc/alphanum-sort")
   (GL::PROF-ENTRY-TRIES-MERGESORT-FIXNUM :SYSTEM . "centaur/gl/prof")
   (VL2014::VL-WARNING-MERGESORT-FIXNUM :SYSTEM
                                        . "centaur/vl2014/util/warnings")
   (AIGNET::LEVELS-SORT-MERGESORT-FIXNUM :SYSTEM . "centaur/aignet/balance")
   (AIGNET::LITERAL-SORT-MERGESORT-FIXNUM :SYSTEM . "centaur/aignet/literal-sort")
   (AIGNET::NATSORT-MERGESORT-FIXNUM :SYSTEM . "centaur/aignet/rwlib")
   (ALPHORDER-MERGESORT-FIXNUM :SYSTEM . "centaur/aig/aig-vars-ext")
   (LEN-MERGESORT-FIXNUM :SYSTEM
                         . "centaur/4v-sexpr/sexpr-loop-debug")
   (STR::ISTR-MERGESORT-FIXNUM :SYSTEM . "std/strings/isort")
   (<<-MERGESORT-FIXNUM :SYSTEM . "defsort/uniquep"))
  ((JUSTIFICATION (ID)
                  (NIL O-P . O<)
                  ((NFIX ID) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX ID)))
    ((NOT (AIGNET::AIGNET-IDP ID AIGNET))
     (NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN1 ID AIGNET)))
         (NFIX ID)))
    ((NOT (AIGNET::AIGNET-IDP ID AIGNET))
     (NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN0 ID AIGNET)))
         (NFIX ID))))
   (AIGNET::ID-EVAL-IND 2 :SYSTEM . "centaur/aignet/semantics"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (NFIX (BINARY-+ '-1 (LIFIX$INLINE N)))
         (NFIX N))))
   (LISTCONSTR-ITER 3 :SYSTEM . "centaur/misc/iter")
   (AIGNET::VECSIM-TO-EVAL-ITER :SYSTEM . "centaur/aignet/vecsim")
   (AIGNET::AIGNET-TRANSLATE-ITER :SYSTEM . "centaur/aignet/to-hons-aig")
   (AIGNET::AIGNET-COPY-DFS-OUTS-ITER :SYSTEM . "centaur/aignet/prune")
   (AIGNET::AIGNET-COPY-COMB-ITER :SYSTEM . "centaur/aignet/copying")
   (AIGNET::AIGNET-EVAL-ITER :SYSTEM . "centaur/aignet/eval")
   (AIGNET::AIGNET-AIGER-NUMBER-NODES-ITER :SYSTEM . "centaur/aignet/aiger")
   (AIGNET::CNF->AIGNET-INVALS-ITER :SYSTEM . "centaur/aignet/cnf")
   (AIGNET::AIGNET-COUNT-GATE-REFS-ITER :SYSTEM . "centaur/aignet/refcounts")
   (AIGNET::FRAME-REGVALS-ITER :SYSTEM . "centaur/aignet/semantics"))
  ((JUSTIFICATION (ID)
                  (NIL O-P . O<)
                  ((NFIX ID) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX ID)))
    ((NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN0 ID AIGNET)))
         (NFIX ID)))
    ((NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (TD-STUB-3 (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN0 ID AIGNET))
                AIGNET::CI-ID AIGNET)
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN1 ID AIGNET)))
         (NFIX ID))))
   (AIGNET::DEPENDS-ON 3 :SYSTEM . "centaur/aignet/deps"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (INTEGERP (ASH (LNFIX$INLINE N) '-7)))
     (NOT (< '0 (ASH (LNFIX$INLINE N) '-7)))
     (O< (NFIX (ASH (LNFIX$INLINE N) '-7))
         (NFIX N))))
   (AIGER-WRITE-DELTA 3 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (INTEGERP (NFIX N)))
     (NOT (< '0 (NFIX N)))
     (O< (NFIX (BINARY-+ '-1 N)) (NFIX N))))
   (FIND-DIFF-OF-LENGTH 3 :SYSTEM . "centaur/ubdds/param"))
  ((JUSTIFICATION (BITOPS::START)
                  (NIL O-P . O<)
                  ((NFIX BITOPS::START)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX BITOPS::START)))
    ((NOT (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                (IF BITOPS::CURR-VAL 'NIL 'T)
                                (IFIX N)))
     BITOPS::CURR-VAL
     (O< (NFIX (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                     (IF BITOPS::CURR-VAL 'NIL 'T)
                                     (IFIX N)))
         (NFIX BITOPS::START)))
    ((NOT (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                (IF BITOPS::CURR-VAL 'NIL 'T)
                                (IFIX N)))
     (NOT (EQUAL (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                       (IF BITOPS::CURR-VAL 'NIL 'T)
                                       (IFIX N))
                 (BINARY-+ '-1
                           (NFIX (NFIX BITOPS::START)))))
     (EQUAL BIT (NFIX BITOPS::START))
     (O< (NFIX (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                     (IF BITOPS::CURR-VAL 'NIL 'T)
                                     (IFIX N)))
         (NFIX BITOPS::START)))
    ((NOT (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                (IF BITOPS::CURR-VAL 'NIL 'T)
                                (IFIX N)))
     (EQUAL (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                  (IF BITOPS::CURR-VAL 'NIL 'T)
                                  (IFIX N))
            (BINARY-+ '-1
                      (NFIX (NFIX BITOPS::START))))
     (IF (< (NFIX BITOPS::START) (NFIX BIT))
         'NIL
       (< (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                (IF BITOPS::CURR-VAL 'NIL 'T)
                                (IFIX N))
          (NFIX BIT)))
     (O< (NFIX (BITOPS::SCAN-FOR-BIT (NFIX BITOPS::START)
                                     (IF BITOPS::CURR-VAL 'NIL 'T)
                                     (IFIX N)))
         (NFIX BITOPS::START))))
   (BITOPS::BIT-SCAN-REC 4 :SYSTEM
                         . "centaur/bitops/equal-by-logbitp"))
  ((JUSTIFICATION (ID)
                  (NIL O-P . O<)
                  ((NFIX ID) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX ID)))
    ((NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 ID AIGNET))
                 '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::SNODE->FANIN$INLINE (AIGNET::ID->SLOT1 ID AIGNET))))
         (NFIX ID)))
    ((NOT (EQUAL (AIGNET::SNODE->TYPE$INLINE (AIGNET::ID->SLOT0 ID AIGNET))
                 '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::SNODE->FANIN$INLINE (AIGNET::ID->SLOT0 ID AIGNET))))
         (NFIX ID))))
   (AIGNET::ID-TRANS-LOGIC 3
                           :SYSTEM . "centaur/aignet/to-hons-aig"))
  ((JUSTIFICATION (AIGNET::NUM)
                  (NIL O-P . O<)
                  ((NFIX AIGNET::NUM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX AIGNET::NUM)))
    ((NOT (< '1 (LNFIX$INLINE AIGNET::NUM)))
     (NOT (< (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX AIGNET::CUTSDB)
             (AIGNET::CUT-LEAVESI$INLINE (BINARY-+ '1 (LNFIX$INLINE AIGNET::IDX))
                                         AIGNET::CUTSDB)))
     (O< (NFIX (BINARY-+ '-1
                         (LNFIX$INLINE AIGNET::NUM)))
         (NFIX AIGNET::NUM))))
   (AIGNET::LEAVES-SORTED 3 :SYSTEM . "centaur/aignet/cuts4"))
  ((JUSTIFICATION (AIGNET::NUM)
                  (NIL O-P . O<)
                  ((NFIX AIGNET::NUM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX AIGNET::NUM)))
    ((NOT (INTEGERP AIGNET::NUM))
     (NOT (< '0 AIGNET::NUM))
     (NOT (< (AIGNET::CUT-LEAVESI$INLINE AIGNET::IDX AIGNET::CUTSDB)
             (LNFIX$INLINE AIGNET::BOUND)))
     (O< (NFIX (BINARY-+ '-1
                         (LNFIX$INLINE AIGNET::NUM)))
         (NFIX AIGNET::NUM))))
   (AIGNET::LEAVES-BOUNDED 4 :SYSTEM . "centaur/aignet/cuts4"))
  ((JUSTIFICATION (AIGNET::N)
                  (NIL O-P . O<)
                  ((NFIX AIGNET::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX AIGNET::N)))
    ((NOT (AIGNET::ID-EXISTSP AIGNET::N AIGNET))
     (NOT (EQUAL (AIGNET::ID->TYPE AIGNET::N AIGNET)
                 '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN1 AIGNET::N AIGNET)))
         (NFIX AIGNET::N)))
    ((NOT (AIGNET::ID-EXISTSP AIGNET::N AIGNET))
     (NOT (EQUAL (AIGNET::ID->TYPE AIGNET::N AIGNET)
                 '1))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN0 AIGNET::N AIGNET)))
         (NFIX AIGNET::N))))
   (AIGNET::AIGNET-NODE-LEVEL 2 :SYSTEM . "centaur/aignet/levels"))
  ((JUSTIFICATION (ID)
                  (NIL O-P . O<)
                  ((NFIX ID) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX ID)))
    ((NOT (INTEGERP ID))
     (NOT (< '0 ID))
     (EQUAL '0
            (GET-BIT ID AIGNET::CONSTMARKS))
     (NOT (< (SATLINK::LIT->VAR$INLINE (AIGNET::GET-LIT$INLINE ID AIGNET::LITCLASSES))
             ID))
     (O< (NFIX (SATLINK::LIT->VAR$INLINE (AIGNET::GET-LIT$INLINE ID AIGNET::LITCLASSES)))
         (NFIX ID))))
   (AIGNET::ID-NORMAL-FORM 3 :SYSTEM
                           . "centaur/aignet/self-constprop"))
  ((JUSTIFICATION (VALUE)
                  (NIL O-P . O<)
                  ((NFIX VALUE) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX VALUE)))
    ((NOT (INTEGERP VALUE))
     (NOT (< '0 VALUE))
     (O< (NFIX (FLOOR VALUE '2))
         (NFIX VALUE))))
   (VL2014::VL-MSB-CONSTINT-BITLIST-AUX 2 :SYSTEM
                                        . "centaur/esim/vltoe/wirealist"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (< (GL::BASE-BVAR GL::BVAR-DB)
             (LNFIX$INLINE N)))
     (O< (NFIX (BINARY-+ '-1 N)) (NFIX N))))
   (GL::GLCP-CTREX-SET-VARS1 7 :SYSTEM . "centaur/gl/ctrex-utils"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((NOT (< (GL::BASE-BVAR GL::BVAR-DB)
             (LNFIX$INLINE N)))
     (O< (NFIX (BINARY-+ '-1 (LNFIX$INLINE N)))
         (NFIX N))))
   (GL::GLCP-CTREX-CHECK-BVAR-DB 5 :SYSTEM . "centaur/gl/ctrex-utils"))
  ((JUSTIFICATION (SV::NBITS)
                  (NIL O-P . O<)
                  ((NFIX SV::NBITS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX SV::NBITS)))
    ((< (LNFIX$INLINE SV::NBITS)
        (POS-FIX SV::BLOCKSZ))
     (O< (NFIX (BINARY-+ (LNFIX$INLINE SV::NBITS)
                         (UNARY-- (POS-FIX SV::BLOCKSZ))))
         (NFIX SV::NBITS))))
   (SV::REV-BLOCKS 3 :SYSTEM . "centaur/sv/svex/4vec")
   (SV::SPARSEINT-UNREV-BLOCKS :SYSTEM . "centaur/sv/svex/argmasks"))
  ((JUSTIFICATION (SV::NBITS)
                  (NIL O-P . O<)
                  ((NFIX SV::NBITS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX SV::NBITS)))
    ((< (LNFIX$INLINE SV::NBITS)
        (LPOSFIX$INLINE SV::BLOCKSZ))
     (O< (NFIX (BINARY-+ (LNFIX$INLINE SV::NBITS)
                         (UNARY-- (LPOSFIX$INLINE SV::BLOCKSZ))))
         (NFIX SV::NBITS))))
   (SV::SVEX-LHS-PREPROC-BLKREV 3 :SYSTEM . "centaur/sv/mods/lhs"))
  ((JUSTIFICATION (SV::N)
                  (NIL O-P . O<)
                  ((NFIX SV::N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX SV::N)))
    ((NOT (INTEGERP SV::N))
     (NOT (< '0 SV::N))
     (O< (NFIX (BINARY-+ (BINARY-+ '-1 SV::N)
                         (UNARY-- (ASH (BINARY-+ '-1 SV::N) '-1))))
         (NFIX SV::N)))
    ((NOT (INTEGERP SV::N))
     (NOT (< '0 SV::N))
     (O< (NFIX (ASH (BINARY-+ '-1 SV::N) '-1))
         (NFIX SV::N))))
   (SV::4VECLIST-FROM-BITLIST-LOG-REC 3 :SYSTEM . "centaur/sv/svex/symbolic")
   (SV::4VECLIST-SEPARATE-UPPER-LOWER-REC-LOG :SYSTEM
                                              . "centaur/sv/svex/evals-equivalent"))
  ((JUSTIFICATION (SV::WIDTH)
                  (NIL O-P . O<)
                  ((NFIX SV::WIDTH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX SV::WIDTH)))
    ((NOT (INTEGERP SV::WIDTH))
     (NOT (< '0 SV::WIDTH))
     (O< (NFIX (BINARY-LOGAND (BINARY-+ '-1 SV::WIDTH)
                              '-4))
         (NFIX SV::WIDTH))))
   (SV::4VEC-TO-HEX-CHARS 3 :SYSTEM . "centaur/sv/svtv/doc"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((NFIX X) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX X)))
    ((NOT (INTEGERP (FLOOR (LNFIX$INLINE X) '94)))
     (NOT (< '0 (FLOOR (LNFIX$INLINE X) '94)))
     (O< (NFIX (FLOOR (LNFIX$INLINE X) '94))
         (NFIX X))))
   (SV::VCD-INDEX->CODECHARS 1 :SYSTEM . "centaur/sv/svtv/vcd"))
  ((JUSTIFICATION (LEN)
                  (NIL O-P . O<)
                  ((NFIX LEN) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX LEN)))
    ((NOT (INTEGERP LEN))
     (NOT (< '0 LEN))
     (O< (NFIX (BINARY-+ '-1 (NFIX LEN)))
         (NFIX LEN))))
   (VL2014::VL-LSB-BITSLICE-CONSTINT-AUX 2 :SYSTEM
                                         . "centaur/vl2014/mlib/expr-slice"))
  ((JUSTIFICATION (X86ISA::TOTAL-SIZE)
                  (NIL O-P . O<)
                  ((NFIX X86ISA::TOTAL-SIZE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX X86ISA::TOTAL-SIZE)))
    ((NOT (INTEGERP X86ISA::TOTAL-SIZE))
     (NOT (< '0 X86ISA::TOTAL-SIZE))
     (NOT (INTEGERP X86ISA::CHUNK-SIZE))
     (NOT (< '0 X86ISA::CHUNK-SIZE))
     (O< (NFIX (BINARY-+ X86ISA::TOTAL-SIZE
                         (UNARY-- X86ISA::CHUNK-SIZE)))
         (NFIX X86ISA::TOTAL-SIZE))))
   (X86ISA::SIMD-ADD-SPEC 4 :SYSTEM
                          .
                          "projects/x86isa/machine/instructions/padd")
   (X86ISA::SIMD-SUB-SPEC :SYSTEM
                          .
                          "projects/x86isa/machine/instructions/psub"))
  ((JUSTIFICATION (X86ISA::RESULT-WIDTH)
                  (NIL O-P . O<)
                  ((NFIX X86ISA::RESULT-WIDTH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX X86ISA::RESULT-WIDTH)))
    ((NOT (INTEGERP (NFIX X86ISA::RESULT-WIDTH)))
     (NOT (< '0 (NFIX X86ISA::RESULT-WIDTH)))
     (O< (NFIX (BINARY-+ (NFIX X86ISA::RESULT-WIDTH)
                         (UNARY-- (POS-FIX X86ISA::EL-WIDTH))))
         (NFIX X86ISA::RESULT-WIDTH))))
   (X86ISA::PSLL 4 :SYSTEM
                 .
                 "projects/x86isa/machine/instructions/fp/simd-integer")
   (X86ISA::PCMPEQ :SYSTEM
                   .
                   "projects/x86isa/machine/instructions/pcmp"))
  ((JUSTIFICATION (X86ISA::RESULT-WIDTH)
                  (NIL O-P . O<)
                  ((NFIX X86ISA::RESULT-WIDTH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX X86ISA::RESULT-WIDTH)))
    ((NOT (INTEGERP (NFIX X86ISA::RESULT-WIDTH)))
     (NOT (< '0 (NFIX X86ISA::RESULT-WIDTH)))
     (O< (NFIX (BINARY-+ (NFIX X86ISA::RESULT-WIDTH)
                         (UNARY-- (BINARY-* '2
                                            (POS-FIX X86ISA::EL-WIDTH)))))
         (NFIX X86ISA::RESULT-WIDTH))))
   (X86ISA::PUNPCKL 4 :SYSTEM
                    .
                    "projects/x86isa/machine/instructions/punpck"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((NFIX N) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX N)))
    ((< N '2)
     (NOT (INTEGERP N))
     (O< (NFIX (BINARY-+ '-1 N)) (NFIX N))))
   (X86ISA::FACT 1 :SYSTEM
                 .
                 "projects/x86isa/tools/execution/examples/factorial"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((NFIX X) IF MV-LIST RETURN-LAST))
   (((O-P (NFIX X)))
    ((NOT (INTEGERP X))
     (< X '0)
     (NOT (< '1 X))
     (O< (NFIX (BINARY-* '1/2 X)) (NFIX X))))
   (X86ISA::LOG-2 2 :SYSTEM
                  . "projects/x86isa/portcullis/utils"))
  ((JUSTIFICATION (PROOF-CHECKER-ARRAY::I)
                  (NIL O-P . O<)
                  ((NFIX PROOF-CHECKER-ARRAY::I)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX PROOF-CHECKER-ARRAY::I)))
    ((NOT (PROOF-CHECKER-ARRAY::ASSIGNMENT-STP PROOF-CHECKER-ARRAY::ST))
     (NOT (EQUAL (PROOF-CHECKER-ARRAY::FREAD '2
                                             '0
                                             '0
                                             PROOF-CHECKER-ARRAY::ST)
                 PROOF-CHECKER-ARRAY::I))
     (IF (PROOF-CHECKER-ARRAY::FIELD-OFFSETP PROOF-CHECKER-ARRAY::I '3
                                             '0
                                             PROOF-CHECKER-ARRAY::ST)
         'NIL
       (NOT (EQUAL PROOF-CHECKER-ARRAY::I '0)))
     (EQUAL PROOF-CHECKER-ARRAY::I '0)
     (O< (NFIX (BINARY-+ '-1 PROOF-CHECKER-ARRAY::I))
         (NFIX PROOF-CHECKER-ARRAY::I))))
   (PROOF-CHECKER-ARRAY::UNASSIGN-ALL 2 :SYSTEM
                                      .
                                      "projects/sat/proof-checker-array/assignment-st"))
  ((JUSTIFICATION (ALEOBFT::PREVIOUS-ROUND)
                  (NIL O-P . O<)
                  ((NFIX ALEOBFT::PREVIOUS-ROUND)
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX ALEOBFT::PREVIOUS-ROUND)))
    ((NOT (INTEGERP ALEOBFT::PREVIOUS-ROUND))
     (< ALEOBFT::PREVIOUS-ROUND '0)
     (NOT (EVENP ALEOBFT::PREVIOUS-ROUND))
     (NOT (INTEGERP ALEOBFT::LAST-COMMITTED-ROUND))
     (< ALEOBFT::LAST-COMMITTED-ROUND '0)
     (NOT (IF (IF (INTEGERP ALEOBFT::PREVIOUS-ROUND)
                  (IF (< '0 ALEOBFT::PREVIOUS-ROUND)
                      'NIL
                    'T)
                'T)
              'T
            (ALEOBFT::ACTIVE-COMMITTEE-AT-ROUND ALEOBFT::PREVIOUS-ROUND
                                                ALEOBFT::BLOCKCHAIN)))
     (NOT (< ALEOBFT::LAST-COMMITTED-ROUND
             ALEOBFT::PREVIOUS-ROUND))
     (O< (NFIX (BINARY-+ '-2 ALEOBFT::PREVIOUS-ROUND))
         (NFIX ALEOBFT::PREVIOUS-ROUND))))
   (ALEOBFT::COLLECT-ANCHORS 5
                             :SYSTEM . "projects/aleo/bft/anchors")))
 ((JUSTIFICATION (X LST FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'PPR2-COLUMN)
                      (ACL2-COUNT LST)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X LST FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'PPR2-COLUMN)
                       (ACL2-COUNT LST)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'PPR2-COLUMN)
              (ACL2-COUNT LST)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (NOT (EQUAL (CAR X) 'QUOTE))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR (CDR X))))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (EQUAL (CAR X) 'FLAT)
     (EQUAL (CAR X) 'MATCHED-KEYWORD)
     (EQUAL (CAR X) 'DOT)
     (EQUAL (CAR X) 'QUOTE)
     (EQUAL (CAR X) 'KEYPAIR)
     (EQUAL (CAR X) 'WIDE)
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CAR (CDR (CDR X)))))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (EQUAL (CAR X) 'FLAT)
     (EQUAL (CAR X) 'MATCHED-KEYWORD)
     (EQUAL (CAR X) 'DOT)
     (EQUAL (CAR X) 'QUOTE)
     (EQUAL (CAR X) 'KEYPAIR)
     (EQUAL (CAR X) 'SPECIAL-TERM)
     (NOT (CDR (CDR (CDR X))))
     (O< (IF 'T
             (ACL2-COUNT (CDR (CDR (CDR X))))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (NOT (EQUAL (CAR X) 'SPECIAL-TERM))
     (O< (IF 'T
             (ACL2-COUNT (CDR (CDR (CDR (CDR (CDR X))))))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (NOT (EQUAL (CAR X) 'SPECIAL-TERM))
     (O< (IF 'T
             (ACL2-COUNT (CDR (CAR (CDR (CDR (CDR X))))))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (NOT (EQUAL (CAR X) 'KEYPAIR))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR (CDR (CDR X)))))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'PPR2-COLUMN)
     (NOT (PPR-TUPLE-P X))
     (NOT (EQUAL (CAR X) 'WIDE))
     (O< (IF 'T
             (ACL2-COUNT (CDR (CDR (CDR X))))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'PPR2-COLUMN))
     (NOT (PPR-TUPLE-LST-P LST))
     (NOT LST)
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CAR LST)))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'PPR2-COLUMN))
     (NOT (PPR-TUPLE-LST-P LST))
     (NOT LST)
     (NOT (CDR LST))
     (O< (IF 'T
             (ACL2-COUNT (CDR LST))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'PPR2-COLUMN)
             (ACL2-COUNT LST)
           (ACL2-COUNT X)))))
   (FLAG-PPR2 8 :SYSTEM . "system/fmt-support")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'TERM-DEPTH)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'TERM-DEPTH)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'TERM-DEPTH)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM-DEPTH)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'TERM-DEPTH)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM-DEPTH)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM-DEPTH)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'TERM-DEPTH))
     (NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL FLAG 'TERM-DEPTH)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM-DEPTH)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (TERM-DEPTH-FLAG 2 :SYSTEM
                    . "system/obviously-equiv-terms")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (TRUE-LISTP 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (TD-STUB-1 X)))
    ((NOT (CONSP X))
     (O< (TD-STUB-1 (CDR X)) (TD-STUB-1 X)))
    ((NOT (CONSP X))
     (O< (TD-STUB-1 (CAR X)) (TD-STUB-1 X)))
    ((CONSP X)
     (RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (TD-STUB-1 (IMAGPART X))
         (TD-STUB-1 X)))
    ((CONSP X)
     (RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (TD-STUB-1 (REALPART X))
         (TD-STUB-1 X))))
   (ACL2-COUNT 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CAR X)))
     (NOT (RATIONALP (O-FIRST-COEFF X)))
     (O< (ACL2-COUNT (O-FIRST-EXPT X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CAR X)))
     (NOT (RATIONALP (O-FIRST-COEFF X)))
     (NOT (TD-STUB-1 (O-FIRST-EXPT X)))
     (O< (ACL2-COUNT (O-RST X))
         (ACL2-COUNT X))))
   (O<G 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((O-FINP X)
     (O-FINP Y)
     (EQUAL (O-FIRST-EXPT X)
            (O-FIRST-EXPT Y))
     (TD-STUB-2 (ACL2-COUNT (O-FIRST-EXPT X))
                (ACL2-COUNT X)))
    ((O-FINP X)
     (O-FINP Y)
     (NOT (EQUAL (O-FIRST-EXPT X)
                 (O-FIRST-EXPT Y)))
     (NOT (EQUAL (O-FIRST-COEFF X)
                 (O-FIRST-COEFF Y)))
     (TD-STUB-2 (ACL2-COUNT (O-RST X))
                (ACL2-COUNT X))))
   (O< 2))
  ((JUSTIFICATION (LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT LST)))
    ((NOT (CONSP (CDR LST)))
     (O< (ACL2-COUNT (CDR LST))
         (ACL2-COUNT LST))))
   (LIST*-MACRO 1))
  ((JUSTIFICATION (LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT LST)))
    ((EQUAL LST 'NIL)
     (EQUAL (CDR LST) 'NIL)
     (O< (ACL2-COUNT (CDR LST))
         (ACL2-COUNT LST))))
   (CHARS-FOR-TILDE-@-CLAUSE-ID-PHRASE/PERIODS 1))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ACL2-COUNT I) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT I)))
    ((EQUAL (NFIX J) '0)
     (< (IFIX I) J)
     (O< (ACL2-COUNT (BINARY-+ I (UNARY-- J)))
         (ACL2-COUNT I))))
   (NONNEGATIVE-INTEGER-QUOTIENT 2))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ACL2-COUNT I) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT I)))
    ((NOT (INTEGERP I))
     (NOT (< '0 I))
     (O< (ACL2-COUNT (BINARY-+ '-1 I))
         (ACL2-COUNT I))))
   (FIRST-N-AC 3))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (BINARY-+ N '-1))
         (ACL2-COUNT N))))
   (NTHCDR 2))
  ((JUSTIFICATION (L)
                  (NIL O-P . O<)
                  ((ACL2-COUNT L) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT L)))
    ((NOT (CONSP L))
     (O< (ACL2-COUNT (CDR (CDR L)))
         (ACL2-COUNT L))))
   (EVENS 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (INTEGERP X))
     (EQUAL X '0)
     (NOT (< X '0))
     (O< (ACL2-COUNT (LOGNOT X))
         (ACL2-COUNT X)))
    ((NOT (INTEGERP X))
     (EQUAL X '0)
     (< X '0)
     (O< (ACL2-COUNT (NONNEGATIVE-INTEGER-QUOTIENT X '2))
         (ACL2-COUNT X))))
   (LOGCOUNT 1))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (NOT (PRINT-BASE-P PRINT-BASE))
     (O< (ACL2-COUNT (FLOOR N PRINT-BASE))
         (ACL2-COUNT N))))
   (EXPLODE-NONNEGATIVE-INTEGER 3))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ACL2-COUNT I) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT I)))
    ((NOT (INTEGERP I))
     (EQUAL I '0)
     (EQUAL I '-1)
     (O< (ACL2-COUNT (FLOOR I '2))
         (ACL2-COUNT I))))
   (INTEGER-LENGTH 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (ACL2-COUNT (REALPART X))
         (ACL2-COUNT X)))
    ((RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (ACL2-COUNT (IMAGPART X))
         (ACL2-COUNT X)))
    ((NOT (RATIONALP X))
     (INTEGERP X)
     (O< (ACL2-COUNT (NUMERATOR X))
         (ACL2-COUNT X))))
   (EXPLODE-ATOM 2))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((EQUAL PRINT-RADIX 'NIL)
     (RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (ACL2-COUNT (IMAGPART X))
         (ACL2-COUNT X)))
    ((EQUAL PRINT-RADIX 'NIL)
     (RATIONALP X)
     (NOT (COMPLEX-RATIONALP X))
     (O< (ACL2-COUNT (REALPART X))
         (ACL2-COUNT X))))
   (EXPLODE-ATOM+ 3))
  ((JUSTIFICATION (ARGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ARGS)))
    ((NOT (CDR (CDR ARGS)))
     (O< (ACL2-COUNT (CDR ARGS))
         (ACL2-COUNT ARGS))))
   (XXXJOIN 2))
  ((JUSTIFICATION (AL)
                  (NIL O-P . O<)
                  ((ACL2-COUNT AL)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT AL)))
    ((NOT (CONSP AL))
     (CONSP (CAR AL))
     (O< (ACL2-COUNT (CDR AL))
         (ACL2-COUNT AL)))
    ((NOT (CONSP AL))
     (NOT (CONSP (CAR AL)))
     (O< (ACL2-COUNT (HONS-REMOVE-ASSOC (CAR (CAR AL))
                                        (CDR AL)))
         (ACL2-COUNT AL))))
   (COUNT-KEYS 1))
  ((JUSTIFICATION (L)
                  (NIL O-P . O<)
                  ((ACL2-COUNT L) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT L)))
    ((EQUAL L 'NIL)
     (NOT (QUOTEP (CAR L)))
     (O< (ACL2-COUNT (CDR L))
         (ACL2-COUNT L))))
   (QUOTE-LISTP 1))
  ((JUSTIFICATION (TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (NOT (CONSP (CDR (CDR (CDR TERM)))))
     (CDR (CDR (CDR (CDR TERM))))
     (NOT (EQUAL (CAR (CDR (CDR TERM))) ''NIL))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR TERM)))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (NOT (CONSP (CDR (CDR (CDR TERM)))))
     (CDR (CDR (CDR (CDR TERM))))
     (NOT (EQUAL (CAR (CDR (CDR TERM))) ''NIL))
     (O< (ACL2-COUNT (DUMB-NEGATE-LIT (CAR (CDR TERM))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (NOT (CONSP (CDR (CDR (CDR TERM)))))
     (CDR (CDR (CDR (CDR TERM))))
     (EQUAL (CAR (CDR (CDR TERM))) ''NIL)
     (NOT (EQUAL (CAR (CDR (CDR (CDR TERM))))
                 ''NIL))
     (O< (ACL2-COUNT (CAR (CDR (CDR TERM))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (NOT (CONSP (CDR (CDR (CDR TERM)))))
     (CDR (CDR (CDR (CDR TERM))))
     (EQUAL (CAR (CDR (CDR TERM))) ''NIL)
     (NOT (EQUAL (CAR (CDR (CDR (CDR TERM))))
                 ''NIL))
     (O< (ACL2-COUNT (CAR (CDR TERM)))
         (ACL2-COUNT TERM))))
   (FLATTEN-ANDS-IN-LIT 1))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ACL2-COUNT I) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT I)))
    ((ZPF I)
     (NOT (EQUAL (CHAR STR1 (BINARY-+ '-1 I))
                 (CHAR STR2 (BINARY-+ '-1 I))))
     (O< (ACL2-COUNT (BINARY-+ '-1 I))
         (ACL2-COUNT I))))
   (STRING-PREFIXP-1 3))
  ((JUSTIFICATION (LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT LST)))
    ((NOT (CONSP LST))
     (O< (ACL2-COUNT (CDR LST))
         (ACL2-COUNT LST)))
    ((NOT (CONSP LST))
     (O< (ACL2-COUNT (CDR (CDR (CDR (CAR LST)))))
         (ACL2-COUNT LST))))
   (BRR-DATA-MIRROR 2))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT FLG)
     (NOT (CONSP X))
     (O< (ACL2-COUNT (CDR (CAR X)))
         (ACL2-COUNT X)))
    ((NOT FLG)
     (NOT (CONSP X))
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((NOT FLG)
     (NOT (CONSP X))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (VAR-FN-COUNT-1 7))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (ASH N '-1))
         (ACL2-COUNT N))))
   (STR::BASIC-NAT-TO-BIN-CHARS 1 :SYSTEM . "std/strings/binary")
   (MOD-EXPT-FAST-1 :SYSTEM
                    .
                    "arithmetic-3/floor-mod/mod-expt-fast")
   (LOGCOUNT-OF-NATURAL :SYSTEM . "centaur/gl/gl-misc-defs"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT FLG)
     (NOT (CONSP X))
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((NOT FLG)
     (NOT (CONSP X))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    (FLG (NOT (CONSP X))
         (EQUAL 'QUOTE (CAR X))
         (NOT (CONSP (CAR X)))
         (O< (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
             (ACL2-COUNT X))))
   (ALL-FNNAMES1 3))
  ((JUSTIFICATION (L)
                  (NIL O-P . O<)
                  ((ACL2-COUNT L) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT L)))
    ((NOT (CONSP (CDR L)))
     (O< (ACL2-COUNT (ODDS L))
         (ACL2-COUNT L)))
    ((NOT (CONSP (CDR L)))
     (O< (ACL2-COUNT (EVENS L))
         (ACL2-COUNT L))))
   (MERGE-SORT-TERM-ORDER 1))
  ((JUSTIFICATION (TUPLE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TUPLE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TUPLE)))
    ((NOT (CONSP TUPLE))
     (EMPTY-LOOP$-AS-TUPLEP TUPLE)
     (O< (ACL2-COUNT (CDR-LOOP$-AS-TUPLE TUPLE))
         (ACL2-COUNT TUPLE))))
   (LOOP$-AS-AC 2))
  ((JUSTIFICATION (ARGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ARGS)))
    ((NOT (CONSP ARGS))
     (KEYWORDP (CAR ARGS))
     (O< (ACL2-COUNT (CDR ARGS))
         (ACL2-COUNT ARGS)))
    ((NOT (CONSP ARGS))
     (NOT (KEYWORDP (CAR ARGS)))
     (NOT (CONSP (CDR ARGS)))
     (O< (ACL2-COUNT (CDR (CDR ARGS)))
         (ACL2-COUNT ARGS))))
   (XDOC::PARTITION-MACRO-ARGS 2 :SYSTEM . "xdoc/constructors"))
  ((JUSTIFICATION (RTL::NAME)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RTL::NAME)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RTL::NAME)))
    ((EQUAL RTL::NAME 'RTL)
     (NOT (CONSP RTL::NAME))
     (O< (ACL2-COUNT (CAR RTL::NAME))
         (ACL2-COUNT RTL::NAME))))
   (RTL::RTL-NODE-NAME 1 :SYSTEM . "rtl/rel11/lib/doc"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (FLOOR N '10))
         (ACL2-COUNT N))))
   (STR::BASIC-NAT-TO-DEC-CHARS 1 :SYSTEM . "std/strings/decimal")
   (NAT-TO-CHARLIST1 :SYSTEM
                     . "clause-processors/generalize"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((SET::EMPTYP X)
     (O< (ACL2-COUNT (SET::TAIL X))
         (ACL2-COUNT X))))
   (SET::UNION 2 :SYSTEM . "std/osets/top")
   (ALEOBFT::CREATE-ENDORSERS-NEXT-LOOP :SYSTEM
                                        .
                                        "projects/aleo/bft/transitions-create")
   (ALEOBFT::TRANSACTIONS-FROM-CERTIFICATES :SYSTEM
                                            . "projects/aleo/bft/blockchains")
   (ALEOBFT::SUCCESSORS-LOOP :SYSTEM . "projects/aleo/bft/dags")
   (ALEOBFT::MESSAGE-SET->CERTIFICATE-SET :SYSTEM . "projects/aleo/bft/messages")
   (ALEOBFT::ADDRESS+POS-PAIRS-WITH-ADDRESS :SYSTEM
                                            . "projects/aleo/bft/validator-states")
   (ALEOBFT::CERTS-WITH-AUTHOR :SYSTEM
                               . "projects/aleo/bft/certificates")
   (POS-SET-MAX :SYSTEM . "kestrel/fty/pos-set")
   (PFCS::LIFT-THM-FREE-INST :SYSTEM . "projects/pfcs/lifting")
   (PFCS::NAME-SET-TO-SYMBOL-LIST :SYSTEM
                                  . "projects/pfcs/semantics-shallow")
   (ABNF::DEFTREEOPS-GEN-NUMRANGE-INFO-ALIST-AUX :SYSTEM
                                                 .
                                                 "projects/abnf/grammar-definer/deftreeops")
   (DEPGRAPH::TRANSDEPS-DIRECT-FOR-NODES :SYSTEM . "centaur/depgraph/transdeps")
   (OMAP::DELETE* :SYSTEM . "std/omaps/core"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((< (LNFIX$INLINE X) '10)
     (O< (ACL2-COUNT (TRUNCATE X '10))
         (ACL2-COUNT X))))
   (STR::NAT-TO-DEC-STRING-SIZE-SLOW 1 :SYSTEM . "std/strings/decimal"))
  ((JUSTIFICATION (ID)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ID)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ID)))
    ((NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (EQUAL (GET-BIT ID BITARR) '1)
     (O< (ACL2-COUNT (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN1 ID AIGNET)))
         (ACL2-COUNT ID)))
    ((NOT (EQUAL (AIGNET::ID->TYPE ID AIGNET) '1))
     (EQUAL (GET-BIT ID BITARR) '1)
     (O< (ACL2-COUNT (SATLINK::LIT->VAR$INLINE (AIGNET::GATE-ID->FANIN0 ID AIGNET)))
         (ACL2-COUNT ID))))
   (AIGNET::AIGNET-PRINT-DFS 3 :SYSTEM . "centaur/aignet/semantics"))
  ((JUSTIFICATION (BINDINGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BINDINGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BINDINGS)))
    ((NOT (CONSP BINDINGS))
     (O< (ACL2-COUNT (IF (CONSP BINDINGS)
                         (CDR BINDINGS)
                       'NIL))
         (ACL2-COUNT BINDINGS))))
   (ANSFL-LAST-LIST 2 :SYSTEM . "misc/hons-help"))
  ((JUSTIFICATION (ALIST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ALIST)))
    ((NOT (CONSP ALIST))
     (O< (ACL2-COUNT (REMOVE-ASSOC-EQUAL (CAR (CAR ALIST))
                                         (CDR ALIST)))
         (ACL2-COUNT ALIST))))
   (ALIST-MAP-KEYS-EQUAL 1 :SYSTEM . "std/alists/alist-map-keys")
   (ALIST-MAP-VALS-EQUAL :SYSTEM . "std/alists/alist-map-vals"))
  ((JUSTIFICATION (ALIST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ALIST)))
    ((NOT (CONSP ALIST))
     (O< (ACL2-COUNT (REMOVE-ASSOC-EQL-EXEC (CAR (CAR ALIST))
                                            (CDR ALIST)))
         (ACL2-COUNT ALIST))))
   (ALIST-MAP-KEYS-EQL-EXEC 1 :SYSTEM . "std/alists/alist-map-keys")
   (ALIST-MAP-VALS-EQL-EXEC :SYSTEM . "std/alists/alist-map-vals"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (EQUAL (CAR X) (CAR (CDR X)))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (CAR X) (CAR (CDR X))))
     (NOT (CONSP (CDR (CDR X))))
     (EQUAL (CAR X) (CAR (CDR (CDR X))))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (NOT (CONSP (CDR (CDR X))))
     (NOT (EQUAL (CAR X) (CAR (CDR (CDR X)))))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (COLLECT-ADJACENT-DUPLICATES 1
                                :SYSTEM . "defsort/duplicated-members"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((AIG-ATOM-P$INLINE X)
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((AIG-ATOM-P$INLINE X)
     (EQUAL (CDR X) 'NIL)
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (AIG-VARS 1 :SYSTEM . "centaur/aig/aig-base")
   (AIG-VECSIM60 :SYSTEM . "centaur/aig/random-sim")
   (AIG-PRINT :SYSTEM . "centaur/aig/aig-print")
   (COLLECT-NODES :SYSTEM
                  . "centaur/aig/accumulate-nodes-vars"))
  ((JUSTIFICATION (BITSETS::SLICE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BITSETS::SLICE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BITSETS::SLICE)))
    ((NOT (INTEGERP BITSETS::SLICE))
     (NOT (< '0 BITSETS::SLICE))
     (O< (ACL2-COUNT (BINARY-+ '-1
                               (LNFIX$INLINE BITSETS::SLICE)))
         (ACL2-COUNT BITSETS::SLICE))))
   (BITSETS::TTAG-BITSET-MEMBERS-AUX 3 :SYSTEM . "std/bitsets/bitsets"))
  ((JUSTIFICATION (REST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT REST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT REST)))
    ((NOT (CONSP REST))
     (MEMBER-EQUAL (CAR REST)
                   '(:PARENTS :SHORT :LONG))
     (O< (ACL2-COUNT (CDR REST))
         (ACL2-COUNT REST)))
    ((NOT (CONSP REST))
     (NOT (MEMBER-EQUAL (CAR REST)
                        '(:PARENTS :SHORT :LONG)))
     (NOT (CONSP (CDR REST)))
     (O< (ACL2-COUNT (CDR (CDR REST)))
         (ACL2-COUNT REST))))
   (DEFMACRO+-FIND-PARENTS/SHORT/LONG 1 :SYSTEM . "std/util/defmacro-plus"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (ASH N '-4))
         (ACL2-COUNT N))))
   (STR::BASIC-NAT-TO-HEX-CHARS 1 :SYSTEM . "std/strings/hex"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (ASH N '-3))
         (ACL2-COUNT N))))
   (STR::BASIC-NAT-TO-OCT-CHARS 1 :SYSTEM . "std/strings/octal")
   (SUMDIGS7 :SYSTEM . "demos/divp-by-casting"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (O< (ACL2-COUNT (MV-NTH '1
                             (STR::SPLIT-LIST-1 X STR::DEL)))
         (ACL2-COUNT X))))
   (STR::SPLIT-LIST* 2 :SYSTEM . "std/strings/strsplit"))
  ((JUSTIFICATION (OMAP::NEW)
                  (NIL O-P . O<)
                  ((ACL2-COUNT OMAP::NEW)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT OMAP::NEW)))
    ((OMAP::EMPTYP OMAP::NEW)
     (O< (ACL2-COUNT (OMAP::TAIL OMAP::NEW))
         (ACL2-COUNT OMAP::NEW))))
   (OMAP::UPDATE* 2 :SYSTEM . "std/omaps/core"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (EQUAL (CAR VL2014::X) '#\{)
     (O< (ACL2-COUNT (CDR VL2014::X))
         (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (NOT (EQUAL (CAR VL2014::X) '#\{))
     (NOT (CONSP (CDR VL2014::X)))
     (IF (EQUAL (CAR (CDR VL2014::X)) '#\1)
         'NIL
       (IF (EQUAL (CAR (CDR VL2014::X)) '#\2)
           'NIL
         (IF (EQUAL (CAR (CDR VL2014::X)) '#\3)
             'NIL
           (IF (EQUAL (CAR (CDR VL2014::X)) '#\4)
               'NIL
             (IF (EQUAL (CAR (CDR VL2014::X)) '#\5)
                 'NIL
               (NOT (EQUAL (CAR (CDR VL2014::X)) '#\6)))))))
     (O< (ACL2-COUNT (CDR (CDR VL2014::X)))
         (ACL2-COUNT VL2014::X))))
   (VL2014::VL-EMODWIRE-ENCODING-VALID-P 1 :SYSTEM
                                         . "centaur/esim/vltoe/emodwire"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (IF (EQUAL (CAR VL2014::X) '#\{)
         (CONSP (CDR VL2014::X))
       'NIL)
     (O< (ACL2-COUNT (CDR VL2014::X))
         (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (NOT (EQUAL (CAR VL2014::X) '#\{))
     (NOT (CONSP (CDR VL2014::X)))
     (O< (ACL2-COUNT (CDR (CDR VL2014::X)))
         (ACL2-COUNT VL2014::X))))
   (VL2014::VL-EMODWIRE-DECODE-CHARS 1 :SYSTEM
                                     . "centaur/esim/vltoe/emodwire"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP (REMOVE-EQUAL 'NIL X)))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (NTH-EQUIV-FIX 1 :SYSTEM . "centaur/misc/nth-equiv"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (< (NFIX N) (LEN X)))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (BUTLAST-INDUCTION 2 :SYSTEM . "std/lists/butlast"))
  ((JUSTIFICATION (STRUCT)
                  (NIL O-P . O<)
                  ((ACL2-COUNT STRUCT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT STRUCT)))
    ((EQUAL STRUCT 'NIL)
     (NOT (DEFWORD-TUPLE-P (CAR STRUCT)))
     (O< (ACL2-COUNT (CDR STRUCT))
         (ACL2-COUNT STRUCT))))
   (DEFWORD-TUPLE-P-LISTP 1 :SYSTEM . "ihs/logops-definitions"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (GL::TAG$INLINE X) ':G-ITE))
     (O< (ACL2-COUNT (GL::G-ITE->ELSE$INLINE X))
         (ACL2-COUNT X)))
    ((NOT (EQUAL (GL::TAG$INLINE X) ':G-ITE))
     (O< (ACL2-COUNT (GL::G-ITE->THEN$INLINE X))
         (ACL2-COUNT X))))
   (GL::G-ITE-DEPTH 1 :SYSTEM . "centaur/gl/split-args"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((EQUAL X 'T)
     (NOT (CONSP X))
     (EQUAL Y 'T)
     (NOT (CONSP Y))
     (O< (ACL2-COUNT (QCAR$INLINE X))
         (ACL2-COUNT X)))
    ((EQUAL X 'T)
     (NOT (CONSP X))
     (EQUAL Y 'T)
     (NOT (CONSP Y))
     (NOT (TD-STUB-2 (QCAR$INLINE X)
                     (QCAR$INLINE Y)))
     (O< (ACL2-COUNT (QCDR$INLINE X))
         (ACL2-COUNT X))))
   (Q-AND-IS-NIL 2 :SYSTEM
                 . "centaur/ubdds/extra-operations"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((BOOLEANP X)
     (AIG-ATOM-P$INLINE X)
     (CDR X)
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((BOOLEANP X)
     (IF (AIG-ATOM-P$INLINE X)
         'NIL
       (NOT (CDR X)))
     (HONS-GET X ACC)
     (AIG-ATOM-P$INLINE X)
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((BOOLEANP X)
     (HONS-GET X ACC)
     (AIG-ATOM-P$INLINE X)
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X))))
   (AIG-INITIAL-SELF-MAP 2 :SYSTEM . "centaur/aig/bddify"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((MV-NTH '2 (GL::FIRST/REST/END X))
     (O< (ACL2-COUNT (MV-NTH '1 (GL::FIRST/REST/END X)))
         (ACL2-COUNT X))))
   (GL::BFR-LIST->S 2 :SYSTEM . "centaur/gl/bvecs")
   (SV::AIG-PARITY-S :SYSTEM . "centaur/sv/svex/a4vec-ops")
   (SV::AIG-LOGNOT-S :SYSTEM . "centaur/sv/svex/aig-arith")
   (SV::AIG-LIST->S :SYSTEM . "centaur/sv/svex/a4vec")
   (GL::BFR-LOGNOT-S :SYSTEM
                     . "centaur/gl/symbolic-arithmetic"))
  ((JUSTIFICATION (P)
                  (NIL O-P . O<)
                  ((ACL2-COUNT P) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT P)))
    ((NOT (CONSP P))
     (CAR P)
     (O< (ACL2-COUNT (CDR P))
         (ACL2-COUNT P)))
    ((NOT (CONSP P))
     (EQUAL (CAR P) 'NIL)
     (CDR P)
     (O< (ACL2-COUNT (CAR P))
         (ACL2-COUNT P)))
    ((NOT (CONSP P))
     (EQUAL (CAR P) 'NIL)
     (EQUAL (CDR P) 'NIL)
     (O< (ACL2-COUNT (IF (CAR ENV) (CAR P) (CDR P)))
         (ACL2-COUNT P))))
   (UNPARAM-ENV-IND 3 :SYSTEM . "centaur/ubdds/param"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (EQUAL N '1)
     (O< (ACL2-COUNT (BINARY-+ N (UNARY-- (BINARY-+ '1 (FLOOR N '2)))))
         (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (EQUAL N '1)
     (O< (ACL2-COUNT (FLOOR N '2))
         (ACL2-COUNT N))))
   (SYMBOL-ALIST-TO-BTREE-AUX 2 :SYSTEM . "misc/symbol-btree"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X))))
   (SYMBOL-BTREE-TO-ALIST-AUX 2 :SYSTEM . "misc/symbol-btree"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP (UBDD-FIX X)))
     (O< (ACL2-COUNT (QCDR$INLINE X))
         (ACL2-COUNT X)))
    ((NOT (CONSP (UBDD-FIX X)))
     (O< (ACL2-COUNT (QCAR$INLINE X))
         (ACL2-COUNT X))))
   (BDD-MAX-DEPTH 1
                  :SYSTEM . "centaur/aig/bddify-correct"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((EQUAL (NFIX N) '0)
     (O< (ACL2-COUNT (LOGCDR$INLINE N))
         (ACL2-COUNT N))))
   (GL::N2V 1 :SYSTEM . "centaur/gl/bvecs"))
  ((JUSTIFICATION (V)
                  (NIL O-P . O<)
                  ((ACL2-COUNT V) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT V)))
    ((GL::S-ENDP$INLINE V)
     (O< (ACL2-COUNT (GL::SCDR$INLINE V))
         (ACL2-COUNT V))))
   (GL::V2I 1 :SYSTEM . "centaur/gl/bvecs"))
  ((JUSTIFICATION (TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TERM)))
    ((IF (CONSP TERM)
         (IF (EQUAL (CAR TERM) FN)
             (EQUAL (CDR TERM) 'NIL)
           'NIL)
       'NIL)
     (IF (CONSP TERM)
         (IF (EQUAL (CAR TERM) FN)
             (IF (CONSP (CDR TERM))
                 (IF (CONSP (CAR (CDR TERM)))
                     (EQUAL (CAR (CAR (CDR TERM))) 'NTH)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'MV-LIST))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (O< (ACL2-COUNT (CAR (CDR (CDR TERM))))
         (ACL2-COUNT TERM)))
    ((IF (CONSP TERM)
         (IF (EQUAL (CAR TERM) FN)
             (EQUAL (CDR TERM) 'NIL)
           'NIL)
       'NIL)
     (IF (CONSP TERM)
         (IF (EQUAL (CAR TERM) FN)
             (IF (CONSP (CDR TERM))
                 (IF (CONSP (CAR (CDR TERM)))
                     (EQUAL (CAR (CAR (CDR TERM))) 'NTH)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (IF (CONSP TERM)
         (IF (EQUAL (CAR TERM) 'MV-LIST)
             (IF (CONSP (CDR TERM))
                 (CONSP (CDR (CDR TERM)))
               'NIL)
           'NIL)
       'NIL)
     (NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'RETURN-LAST))
     (NOT (CONSP (CDR TERM)))
     (NOT (CONSP (CDR (CDR TERM))))
     (NOT (CONSP (CDR (CDR (CDR TERM)))))
     (CDR (CDR (CDR (CDR TERM))))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR TERM)))))
         (ACL2-COUNT TERM))))
   (REDUCE-IDENTITIES 2 :SYSTEM . "centaur/misc/defapply"))
  ((JUSTIFICATION (ARGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ARGS)))
    ((NOT (CONSP ARGS))
     (IF (KEYWORDP (CAR ARGS))
         (CONSP (CDR ARGS))
       'NIL)
     (O< (ACL2-COUNT (CDR ARGS))
         (ACL2-COUNT ARGS)))
    ((NOT (CONSP ARGS))
     (NOT (KEYWORDP (CAR ARGS)))
     (NOT (CONSP (CDR ARGS)))
     (O< (ACL2-COUNT (CDR (CDR ARGS)))
         (ACL2-COUNT ARGS))))
   (GL::EXTRACT-SOME-KEYWORDS 3 :SYSTEM
                              . "centaur/gl/symbolic-arithmetic")
   (FGL::EXTRACT-SOME-KEYWORDS :SYSTEM
                               . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (GL::TAG$INLINE X) ':G-ITE))
     (O< (ACL2-COUNT (GL::G-ITE->ELSE$INLINE X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (GL::TAG$INLINE X) ':G-ITE))
     (O< (ACL2-COUNT (GL::G-ITE->THEN$INLINE X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (GL::TAG$INLINE X) ':G-ITE))
     (O< (ACL2-COUNT (GL::G-ITE->TEST$INLINE X))
         (ACL2-COUNT X))))
   (GL::SHAPE-SPEC-IFF-ENV-SLICE 2
                                 :SYSTEM . "centaur/gl/shape-spec-defs"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR (CDR (CDR X)))))
     (NOT (CONSP (CDR (CDR (CDR (CDR X))))))
     (NOT (MV-NTH '0
                  (STR::B64-DEC3 (CAR X)
                                 (CAR (CDR X))
                                 (CAR (CDR (CDR X)))
                                 (CAR (CDR (CDR (CDR X)))))))
     (O< (ACL2-COUNT (CDR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X))))
   (STR::B64-DECODE-LIST-IMPL 2 :SYSTEM . "std/strings/base64"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (< (NFIX LEN) (NFIX N)))
     (EQUAL (NFIX LEN) '0)
     (O< (ACL2-COUNT (BINARY-+ (NFIX N)
                               (UNARY-- (NFIX LEN))))
         (ACL2-COUNT N))))
   (REPEAT-LIST-TO-LENGTH-N 3 :SYSTEM . "centaur/aig/random-sim"))
  ((JUSTIFICATION (AIGNET::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT AIGNET::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT AIGNET::N)))
    ((NOT (< (AIGNET::NODE-HEAD$INLINE AIGNET::N AIGNET::CLASSES)
             (LNFIX$INLINE AIGNET::N)))
     (O< (ACL2-COUNT (AIGNET::NODE-HEAD$INLINE AIGNET::N AIGNET::CLASSES))
         (ACL2-COUNT AIGNET::N))))
   (AIGNET::UF-FIND-CLASS-DESIGNATOR 2 :SYSTEM
                                     . "centaur/aignet/equiv-classes"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
                 '1))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            '1)
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            '0)
     (NOT (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
                 (SATLINK::LIT-FIX$INLINE (CAR (CDR X)))))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            '1)
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            '0)
     (NOT (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
                 (SATLINK::LIT-NEGATE$INLINE (SATLINK::LIT-FIX$INLINE (CAR (CDR X))))))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
                 '0))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            (SATLINK::LIT-FIX$INLINE (CAR (CDR X))))
     (EQUAL (SATLINK::LIT-FIX$INLINE (CAR X))
            (SATLINK::LIT-NEGATE$INLINE (SATLINK::LIT-FIX$INLINE (CAR (CDR X)))))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (AIGNET::CANCEL-PARITY-LITS 2 :SYSTEM . "centaur/aignet/balance"))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((ACL2-COUNT I) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT I)))
    ((NOT (INTEGERP I))
     (EQUAL I '0)
     (EQUAL I '-1)
     (O< (ACL2-COUNT (LOGCDR$INLINE I))
         (ACL2-COUNT I))))
   (LOGCDR-INDUCTION-1 1 :SYSTEM . "ihs/logops-lemmas"))
  ((JUSTIFICATION (SIZE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SIZE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SIZE)))
    ((NOT (INTEGERP SIZE))
     (< SIZE '0)
     (NOT (INTEGERP I))
     (EQUAL SIZE '0)
     (O< (ACL2-COUNT (BINARY-+ '-1 SIZE))
         (ACL2-COUNT SIZE))))
   (SUB1-LOGCDR-INDUCTION-1 2 :SYSTEM . "ihs/logops-lemmas")
   (X86ISA::WRITE-MEM-TO-CHANNEL :SYSTEM
                                 .
                                 "projects/x86isa/machine/save-restore"))
  ((JUSTIFICATION (ACRE::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ACRE::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ACRE::X)))
    ((NOT (CONSP ACRE::X))
     (O< (ACL2-COUNT (REMOVE-EQUAL (CAR ACRE::X)
                                   (CDR ACRE::X)))
         (ACL2-COUNT ACRE::X))))
   (ACRE::UNDUP 1 :SYSTEM . "centaur/acre/match"))
  ((JUSTIFICATION (BRIDGE::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BRIDGE::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BRIDGE::N)))
    ((NOT (INTEGERP BRIDGE::N))
     (NOT (< '0 BRIDGE::N))
     (EQUAL BRIDGE::N '1)
     (O< (ACL2-COUNT (BINARY-+ '-2 BRIDGE::N))
         (ACL2-COUNT BRIDGE::N)))
    ((NOT (INTEGERP BRIDGE::N))
     (NOT (< '0 BRIDGE::N))
     (EQUAL BRIDGE::N '1)
     (O< (ACL2-COUNT (BINARY-+ '-1 BRIDGE::N))
         (ACL2-COUNT BRIDGE::N))))
   (BRIDGE::FIB 1 :SYSTEM . "centaur/bridge/top")
   (X86ISA::FIB32 :SYSTEM
                  .
                  "projects/x86isa/tools/execution/examples/fibonacci32")
   (X86ISA::FIB :SYSTEM
                .
                "projects/x86isa/tools/execution/examples/fibonacci"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::X)))
    ((NOT (EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE VL2014::X)
                 ':LOCAL))
     (O< (ACL2-COUNT (CDR VL2014::X))
         (ACL2-COUNT VL2014::X))))
   (VL2014::VL-SCOPESTACK-FIX$INLINE 1 :SYSTEM
                                     . "centaur/vl2014/mlib/scopestack"))
  ((JUSTIFICATION (VL2014::ECHARS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::ECHARS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::ECHARS)))
    ((NOT (CONSP VL2014::ECHARS))
     (NOT (MV-NTH '0
                  (VL2014::VL-LEX-TOKEN$INLINE VL2014::ECHARS
                                               VL2014::ST VL2014::WARNINGS)))
     (O< (ACL2-COUNT (MV-NTH '1
                             (VL2014::VL-LEX-TOKEN$INLINE VL2014::ECHARS
                                                          VL2014::ST VL2014::WARNINGS)))
         (ACL2-COUNT VL2014::ECHARS))))
   (VL2014::VL-LEX-MAIN-EXEC 4 :SYSTEM
                             . "centaur/vl2014/loader/lexer/lexer"))
  ((JUSTIFICATION (VL2014::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::N)))
    ((NOT (INTEGERP VL2014::N))
     (NOT (< '0 VL2014::N))
     (O< (ACL2-COUNT (TRUNCATE VL2014::N '10))
         (ACL2-COUNT VL2014::N))))
   (VL2014::VL-PRINT-NATCHARS-AUX 3 :SYSTEM . "centaur/vl2014/util/print")
   (VL::VL-PRINT-NATCHARS-AUX :SYSTEM . "centaur/vl/util/print"))
  ((JUSTIFICATION (VL2014::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::N)))
    ((NOT (INTEGERP VL2014::N))
     (NOT (< '0 VL2014::N))
     (O< (ACL2-COUNT (TRUNCATE VL2014::N '93))
         (ACL2-COUNT VL2014::N))))
   (VL2014::VCD-93-BIT-ENCODE-AUX 2 :SYSTEM . "centaur/esim/esim-vcd"))
  ((JUSTIFICATION (BED::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BED::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (NOT (INTEGERP (CDR BED::X)))
     (O< (ACL2-COUNT (CDR (CAR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (NOT (INTEGERP (CDR BED::X)))
     (O< (ACL2-COUNT (CAR (CAR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (INTEGERP (CDR BED::X))
     (BED::BED-ENV-LOOKUP (CAR BED::X)
                          BED::ENV)
     (O< (ACL2-COUNT (CDR (CDR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (INTEGERP (CDR BED::X))
     (NOT (BED::BED-ENV-LOOKUP (CAR BED::X)
                               BED::ENV))
     (O< (ACL2-COUNT (CAR (CDR BED::X)))
         (ACL2-COUNT BED::X))))
   (BED::BED-EVAL 2 :SYSTEM . "centaur/bed/eval"))
  ((JUSTIFICATION (BED::BED)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BED::BED)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (NOT (INTEGERP (CDR BED::BED)))
     (O< (ACL2-COUNT (CAR (CAR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (NOT (INTEGERP (CDR BED::BED)))
     (O< (ACL2-COUNT (CDR (CAR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (INTEGERP (CDR BED::BED))
     (BOOLEANP (CAR BED::BED))
     (O< (ACL2-COUNT (CAR (CDR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (INTEGERP (CDR BED::BED))
     (BOOLEANP (CAR BED::BED))
     (O< (ACL2-COUNT (CDR (CDR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (INTEGERP (CDR BED::BED))
     (NOT (CAR BED::BED))
     (O< (ACL2-COUNT (CAR (CDR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (INTEGERP (CDR BED::BED))
     (CAR BED::BED)
     (O< (ACL2-COUNT (CDR (CDR BED::BED)))
         (ACL2-COUNT BED::BED))))
   (BED::AIG-FROM-BED 1 :SYSTEM . "centaur/bed/aig"))
  ((JUSTIFICATION (BED::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BED::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (NOT (CONSP (CAR BED::X)))
     (O< (ACL2-COUNT (CDR (CAR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (CONSP (CAR BED::X))
     (O< (ACL2-COUNT (CDR (CDR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (CONSP (CAR BED::X))
     (O< (ACL2-COUNT (CAR (CDR BED::X)))
         (ACL2-COUNT BED::X)))
    ((NOT (CONSP BED::X))
     (NOT (CONSP (CAR BED::X)))
     (O< (ACL2-COUNT (CAR (CAR BED::X)))
         (ACL2-COUNT BED::X))))
   (BED::BED-PRINT 1 :SYSTEM . "centaur/bed/print"))
  ((JUSTIFICATION (BED::BED)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BED::BED)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (HONS-GET BED::BED BED::MEMO)
     (NOT (INTEGERP (CDR BED::BED)))
     (O< (ACL2-COUNT (CDR (CAR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (HONS-GET BED::BED BED::MEMO)
     (NOT (INTEGERP (CDR BED::BED)))
     (O< (ACL2-COUNT (CAR (CAR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (HONS-GET BED::BED BED::MEMO)
     (INTEGERP (CDR BED::BED))
     (EQUAL (CAR BED::BED) BED::VLIFT)
     (O< (ACL2-COUNT (CDR (CDR BED::BED)))
         (ACL2-COUNT BED::BED)))
    ((NOT (CONSP BED::BED))
     (HONS-GET BED::BED BED::MEMO)
     (INTEGERP (CDR BED::BED))
     (EQUAL (CAR BED::BED) BED::VLIFT)
     (O< (ACL2-COUNT (CAR (CDR BED::BED)))
         (ACL2-COUNT BED::BED))))
   (BED::UP-ONE-AUX 4 :SYSTEM . "centaur/bed/up"))
  ((JUSTIFICATION (GL::BDD)
                  (NIL O-P . O<)
                  ((ACL2-COUNT GL::BDD)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (CDR GL::BDD)
     (O< (ACL2-COUNT (CAR GL::BDD))
         (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (EQUAL (CDR GL::BDD) 'NIL)
     (CAR GL::BDD)
     (O< (ACL2-COUNT (CDR GL::BDD))
         (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (EQUAL (CDR GL::BDD) 'NIL)
     (EQUAL (CAR GL::BDD) 'NIL)
     (O< (ACL2-COUNT (IF (CAR GL::LST)
                         (CAR GL::BDD)
                       (CDR GL::BDD)))
         (ACL2-COUNT GL::BDD))))
   (GL::TO-SATISFYING-ASSIGN 2 :SYSTEM . "centaur/gl/bfr-sat"))
  ((JUSTIFICATION (GL::BDD)
                  (NIL O-P . O<)
                  ((ACL2-COUNT GL::BDD)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (CDR GL::BDD)
     (O< (ACL2-COUNT (CAR GL::BDD))
         (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (EQUAL (CDR GL::BDD) 'NIL)
     (CAR GL::BDD)
     (O< (ACL2-COUNT (CDR GL::BDD))
         (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (EQUAL (CDR GL::BDD) 'NIL)
     (EQUAL (CAR GL::BDD) 'NIL)
     (HONS-EQUAL (CAR GL::BDD) (CDR GL::BDD))
     (O< (ACL2-COUNT (IF (CAR GL::LST)
                         (CAR GL::BDD)
                       (CDR GL::BDD)))
         (ACL2-COUNT GL::BDD)))
    ((NOT (CONSP GL::BDD))
     (EQUAL (CAR GL::BDD) 'NIL)
     (NOT (HONS-EQUAL (CAR GL::BDD)
                      (CDR GL::BDD)))
     (O< (ACL2-COUNT (CAR GL::BDD))
         (ACL2-COUNT GL::BDD))))
   (GL::TO-SATISFYING-ASSIGN-SPEC 2 :SYSTEM . "centaur/gl/ctrex-utils"))
  ((JUSTIFICATION (BODY)
                  (NIL O-P . O<)
                  ((ACL2-COUNT BODY)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT BODY)))
    ((EQUAL BODY
            '((LAMBDA (GL::HYP)
                (CONS 'NIL
                      (CONS 'NIL (CONS GL::HYP 'NIL))))
              ((LAMBDA (GL::HYP) GL::HYP)
               (RETURN-LAST 'MBE1-RAW
                            GL::HYP
                            (RETURN-LAST 'PROGN
                                         (THROW-NONEXEC-ERROR ':NON-EXEC
                                                              '(GL::BFR-HYP-FIX GL::HYP))
                                         (GL::BFR-HYP-FIX GL::HYP))))))
     (MV-NTH '0
             (GL::RUN-GIFIED-CASE-BREAKDOWN BODY))
     (EQUAL (MV-NTH '1
                    (GL::RUN-GIFIED-CASE-BREAKDOWN BODY))
            'QUOTE)
     (EQUAL (MV-NTH '2
                    (GL::RUN-GIFIED-CASE-BREAKDOWN BODY))
            'QUOTE)
     (O< (ACL2-COUNT (MV-NTH '4
                             (GL::RUN-GIFIED-CASE-BREAKDOWN BODY)))
         (ACL2-COUNT BODY))))
   (GL::RUN-GIFIED-PROCESS-BODY 7 :SYSTEM . "centaur/gl/run-gified-cp"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (IF (CONSP (CAR X))
         'NIL
       (IF (EQUAL (CAR X) 'IF)
           'NIL
         (NOT (EQUAL (CAR X) FNNAME))))
     (EQUAL (CAR X) FNNAME)
     (NOT (EQUAL (CAR X) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (IF (CONSP (CAR X))
         'NIL
       (IF (EQUAL (CAR X) 'IF)
           'NIL
         (NOT (EQUAL (CAR X) FNNAME))))
     (EQUAL (CAR X) FNNAME)
     (NOT (EQUAL (CAR X) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (IF (CONSP (CAR X))
         'NIL
       (IF (EQUAL (CAR X) 'IF)
           'NIL
         (NOT (EQUAL (CAR X) FNNAME))))
     (EQUAL (CAR X) FNNAME)
     (EQUAL (CAR X) 'IF)
     (O< (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
         (ACL2-COUNT X))))
   (FSUBST-INTO-TAIL-RECURSION 5 :SYSTEM . "centaur/misc/tailrec"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (QUOTEP X)
     (EQUAL (CAR X) FNNAME)
     (NOT (EQUAL (CAR X) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (QUOTEP X)
     (EQUAL (CAR X) FNNAME)
     (NOT (EQUAL (CAR X) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (QUOTEP X)
     (EQUAL (CAR X) FNNAME)
     (EQUAL (CAR X) 'IF)
     (NOT (CONSP (CAR X)))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
         (ACL2-COUNT X))))
   (DONE-RETVAL-NEXT-FROM-BODY-IND 3 :SYSTEM . "centaur/misc/tailrec"))
  ((JUSTIFICATION (LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT LST)))
    ((NOT (CONSP LST))
     (IF (CONSP (CDR LST))
         (KEYWORDP (CAR LST))
       'NIL)
     (O< (ACL2-COUNT (CDR LST))
         (ACL2-COUNT LST)))
    ((NOT (CONSP LST))
     (NOT (CONSP (CDR LST)))
     (NOT (KEYWORDP (CAR LST)))
     (O< (ACL2-COUNT (CDR (CDR LST)))
         (ACL2-COUNT LST))))
   (REMOVE-KEYWORD-PAIRS 1 :SYSTEM . "centaur/misc/tailrec"))
  ((JUSTIFICATION (RP::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::N)))
    ((NOT (INTEGERP RP::N))
     (NOT (< '0 RP::N))
     (O< (ACL2-COUNT (FLOOR (NFIX RP::N) '10))
         (ACL2-COUNT RP::N))))
   (RP::GET-DIGIT-COUNT 1 :SYSTEM
                        . "projects/rp-rewriter/macros"))
  ((JUSTIFICATION (RP::TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::TERM)))
    ((NOT (RP::IS-RP$INLINE RP::TERM))
     (O< (ACL2-COUNT (CAR (CDR (CDR RP::TERM))))
         (ACL2-COUNT RP::TERM))))
   (RP::EX-FROM-RP 1 :SYSTEM
                   . "projects/rp-rewriter/aux-functions"))
  ((JUSTIFICATION (RP::TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::TERM)))
    ((NOT (RP::IS-RP-LOOSE$INLINE RP::TERM))
     (O< (ACL2-COUNT (CAR (CDR (CDR RP::TERM))))
         (ACL2-COUNT RP::TERM))))
   (RP::EX-FROM-RP-LOOSE 1 :SYSTEM
                         . "projects/rp-rewriter/aux-functions"))
  ((JUSTIFICATION (RP::TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::TERM)))
    ((NOT (RP::IS-RETURN-LAST$INLINE RP::TERM))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR RP::TERM)))))
         (ACL2-COUNT RP::TERM))))
   (RP::LIGHT-REMOVE-RETURN-LAST 1 :SYSTEM
                                 . "projects/rp-rewriter/aux-functions"))
  ((JUSTIFICATION (RP::KEYS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::KEYS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::KEYS)))
    ((NOT (CONSP RP::KEYS))
     (NOT (EQUAL (CAR RP::KEYS) 'CONS))
     (NOT (CONSP (CDR RP::KEYS)))
     (NOT (CONSP (CAR (CDR RP::KEYS))))
     (NOT (EQUAL (CAR (CAR (CDR RP::KEYS)))
                 'QUOTE))
     (NOT (CONSP (CDR (CAR (CDR RP::KEYS)))))
     (CDR (CDR (CAR (CDR RP::KEYS))))
     (NOT (CONSP (CDR (CDR RP::KEYS))))
     (CDR (CDR (CDR RP::KEYS)))
     (O< (ACL2-COUNT (CAR (CDR (CDR RP::KEYS))))
         (ACL2-COUNT RP::KEYS)))
    ((IF (CONSP RP::KEYS)
         (IF (EQUAL (CAR RP::KEYS) 'CONS)
             (IF (CONSP (CDR RP::KEYS))
                 (IF (CONSP (CAR (CDR RP::KEYS)))
                     (IF (EQUAL (CAR (CAR (CDR RP::KEYS)))
                                'QUOTE)
                         (IF (CONSP (CDR (CAR (CDR RP::KEYS))))
                             (IF (EQUAL (CDR (CDR (CAR (CDR RP::KEYS))))
                                        'NIL)
                                 (IF (CONSP (CDR (CDR RP::KEYS)))
                                     (EQUAL (CDR (CDR (CDR RP::KEYS))) 'NIL)
                                   'NIL)
                               'NIL)
                           'NIL)
                       'NIL)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (EQUAL RP::KEYS ''NIL)
     (IF (CONSP RP::KEYS)
         (IF (EQUAL (CAR RP::KEYS) 'QUOTE)
             (IF (CONSP (CDR RP::KEYS))
                 (IF (EQUAL (CAR (CDR RP::KEYS)) 'NIL)
                     (EQUAL (CDR (CDR RP::KEYS)) 'NIL)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (NOT (CONSP RP::KEYS))
     (NOT (EQUAL (CAR RP::KEYS) 'QUOTE))
     (NOT (CONSP (CDR RP::KEYS)))
     (NOT (CONSP (CAR (CDR RP::KEYS))))
     (O< (ACL2-COUNT (CONS 'QUOTE
                           (CONS (CDR (CAR (CDR RP::KEYS))) 'NIL)))
         (ACL2-COUNT RP::KEYS))))
   (RP::RESOLVE-ASSOC-EQ-VALS-REC 2 :SYSTEM
                                  .
                                  "projects/rp-rewriter/meta/hons-get-meta"))
  ((JUSTIFICATION (RP::FALIST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT RP::FALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT RP::FALIST)))
    ((NOT (CONSP RP::FALIST))
     (NOT (EQUAL (CAR RP::FALIST) 'QUOTE))
     (NOT (CONSP (CDR RP::FALIST)))
     (NOT (CONSP (CAR (CDR RP::FALIST))))
     (NOT (CONSP (CAR (CAR (CDR RP::FALIST)))))
     (CDR (CDR RP::FALIST))
     (O< (ACL2-COUNT (CONS 'QUOTE
                           (CONS (CDR (CAR (CDR RP::FALIST)))
                                 'NIL)))
         (ACL2-COUNT RP::FALIST))))
   (RP::QUOTE-FALIST-VALS 1 :SYSTEM
                          .
                          "projects/rp-rewriter/meta/hons-acons-meta"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (SV::PATH-KIND$INLINE X)
                 ':SCOPE))
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (SV::PATH-FIX$INLINE 1 :SYSTEM . "centaur/sv/mods/address"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
                 ':CONCAT))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
                 ':CONCAT))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X))))
   (BITOPS::SPARSEINT$-FIX$INLINE 1 :SYSTEM . "centaur/bitops/sparseint"))
  ((JUSTIFICATION (SVL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SVL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SVL::X)))
    ((NOT (CONSP SVL::X))
     (NOT (CONSP (CAR SVL::X)))
     (O< (ACL2-COUNT (SVL::STRIP-CDRS$ SVL::X))
         (ACL2-COUNT SVL::X))))
   (SVL::TRANSPOSE 1 :SYSTEM . "centaur/svl/svl-run"))
  ((JUSTIFICATION (SVL::SVEX)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SVL::SVEX)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SVL::SVEX)))
    ((NOT (SVL::CONCAT-OF-UNFLOAT-PATTERN-P$INLINE SVL::SVEX))
     (O< (ACL2-COUNT (HONS 'SV::CONCAT
                           (HONS (CAR (CDR SVL::SVEX))
                                 (HONS (CAR (CDR (CAR (CDR (CDR SVL::SVEX)))))
                                       (HONS (CAR (CDR (CAR (CDR (CDR (CDR SVL::SVEX))))))
                                             'NIL)))))
         (ACL2-COUNT SVL::SVEX))))
   (SVL::CONCAT-REDUCE 1 :SYSTEM
                       .
                       "centaur/svl/svex-reduce/svex-reduce-apply"))
  ((JUSTIFICATION (SVL::LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SVL::LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SVL::LST)))
    ((NOT (CONSP SVL::LST))
     (INTEGERP (CAR SVL::LST))
     (O< (ACL2-COUNT (CDR SVL::LST))
         (ACL2-COUNT SVL::LST)))
    ((NOT (CONSP SVL::LST))
     (NOT (INTEGERP (CAR SVL::LST)))
     (NOT (MEMBER-EQUAL (CAR SVL::LST)
                        (CDR SVL::LST)))
     (O< (ACL2-COUNT (SVL::REMOVE-EQUAL-ONCE (CAR SVL::LST)
                                             (CDR SVL::LST)))
         (ACL2-COUNT SVL::LST)))
    ((NOT (CONSP SVL::LST))
     (MEMBER-EQUAL (CAR SVL::LST)
                   (CDR SVL::LST))
     (O< (ACL2-COUNT (CDR SVL::LST))
         (ACL2-COUNT SVL::LST))))
   (SVL::REMOVE-PAIR-EQUAL 1 :SYSTEM
                           .
                           "centaur/svl/svex-reduce/simplify-bitand-or-xor"))
  ((JUSTIFICATION (SVL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SVL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SVL::X)))
    ((NOT (CONSP SVL::X))
     (NOT (EQUAL (CAR SVL::X) 'SV::?))
     (NOT (CONSP (CDR SVL::X)))
     (NOT (CONSP (CDR (CDR SVL::X))))
     (NOT (CONSP (CDR (CDR (CDR SVL::X)))))
     (CDR (CDR (CDR (CDR SVL::X))))
     (NOT (MV-NTH '1
                  (SVL::COLLECT-PART-SELS-FROM-TESTS-AUX (CAR (CDR SVL::X))
                                                         '128)))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR SVL::X)))))
         (ACL2-COUNT SVL::X)))
    ((NOT (CONSP SVL::X))
     (NOT (EQUAL (CAR SVL::X) 'SV::?*))
     (NOT (CONSP (CDR SVL::X)))
     (NOT (CONSP (CDR (CDR SVL::X))))
     (NOT (CONSP (CDR (CDR (CDR SVL::X)))))
     (CDR (CDR (CDR (CDR SVL::X))))
     (NOT (MV-NTH '1
                  (SVL::COLLECT-PART-SELS-FROM-TESTS-AUX (CAR (CDR SVL::X))
                                                         '128)))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR SVL::X)))))
         (ACL2-COUNT SVL::X))))
   (SVL::COLLECT-PART-SELS-FROM-TESTS 1 :SYSTEM
                                      .
                                      "centaur/svl/svex-reduce/simplify-dont-care-branch"))
  ((JUSTIFICATION (SVL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SVL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SVL::X)))
    ((NOT (CONSP SVL::X))
     (NOT (EQUAL (CAR SVL::X) 'SV::?))
     (NOT (CONSP (CDR SVL::X)))
     (NOT (CONSP (CDR (CDR SVL::X))))
     (NOT (CONSP (CDR (CDR (CDR SVL::X)))))
     (CDR (CDR (CDR (CDR SVL::X))))
     (SV::4VEC-P (CAR (CDR (CDR (CDR SVL::X)))))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR SVL::X)))))
         (ACL2-COUNT SVL::X)))
    ((NOT (CONSP SVL::X))
     (NOT (EQUAL (CAR SVL::X) 'SV::?*))
     (NOT (CONSP (CDR SVL::X)))
     (NOT (CONSP (CDR (CDR SVL::X))))
     (NOT (CONSP (CDR (CDR (CDR SVL::X)))))
     (CDR (CDR (CDR (CDR SVL::X))))
     (SV::4VEC-P (CAR (CDR (CDR (CDR SVL::X)))))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR SVL::X)))))
         (ACL2-COUNT SVL::X))))
   (SVL::SIMPLIFY-DONT-CARE-BRANCH-BUILD-OTHER 1 :SYSTEM
                                               .
                                               "centaur/svl/svex-reduce/simplify-dont-care-branch"))
  ((JUSTIFICATION (OBAG::BAG)
                  (NIL O-P . O<)
                  ((ACL2-COUNT OBAG::BAG)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT OBAG::BAG)))
    ((OBAG::EMPTYP OBAG::BAG)
     (O< (ACL2-COUNT (OBAG::TAIL OBAG::BAG))
         (ACL2-COUNT OBAG::BAG))))
   (OBAG::OCCS 2 :SYSTEM . "std/obags/core"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR (CDR (CDR X)))))
     (O< (ACL2-COUNT (CDR (CDR (CDR X))))
         (ACL2-COUNT X))))
   (STR::B64-ENCODE-LIST-IMPL 2 :SYSTEM . "std/strings/base64"))
  ((JUSTIFICATION (TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (CONSP (CAR TERM))
     (NOT (EQUAL (CAR TERM) 'RETURN-LAST))
     (O< (ACL2-COUNT (CAR (CDR (CDR TERM))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (CONSP (CAR TERM))
     (NOT (EQUAL (CAR TERM) 'RETURN-LAST))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR TERM)))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (CONSP (CAR TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR TERM))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (CONSP (CAR TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR TERM)))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (EQUAL 'QUOTE (CAR TERM))
     (NOT (CONSP (CAR TERM)))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CAR TERM)))))
         (ACL2-COUNT TERM))))
   (MVIFY 1 :SYSTEM . "std/system/mvify"))
  ((JUSTIFICATION (TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR TERM)))))
         (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (CAR TERM) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR TERM))))
         (ACL2-COUNT TERM))))
   (IF-TREE-LEAF-TERMS 1 :SYSTEM
                       . "std/system/if-tree-leaf-terms"))
  ((JUSTIFICATION (SV::NBITS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SV::NBITS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SV::NBITS)))
    ((< (LNFIX$INLINE SV::NBITS)
        (LPOSFIX$INLINE SV::BLOCKSZ))
     (O< (ACL2-COUNT (BINARY-+ (LNFIX$INLINE SV::NBITS)
                               (UNARY-- (LPOSFIX$INLINE SV::BLOCKSZ))))
         (ACL2-COUNT SV::NBITS))))
   (SV::SPARSEINT-REV-BLOCKS 3 :SYSTEM . "centaur/sv/svex/s4vec")
   (SV::AIG-REV-BLOCKS-NNS :SYSTEM . "centaur/sv/svex/a4vec-ops"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (SV::SVAR-SPLIT-KIND$INLINE X)
                 ':SEGMENT))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X))))
   (SV::SVAR-SPLIT-FIX$INLINE 1 :SYSTEM
                              .
                              "centaur/sv/svex/compose-theory-split"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (IF (CONSP X)
         (IF (IF (EQUAL (CAR X) 'FGL::BIND-VAR)
                 'T
               (EQUAL (CAR X) 'FGL::SYNTAX-BIND))
             (IF (CONSP (CDR X))
                 (IF (SYMBOLP (CAR (CDR X)))
                     (IF (CAR (CDR X))
                         (CONSP (CDR (CDR X)))
                       'NIL)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (IF (EQUAL (CAR X) 'FGL::BIND-VAR)
              'T
            (EQUAL (CAR X) 'FGL::SYNTAX-BIND)))
     (NOT (CONSP (CDR X)))
     (NOT (SYMBOLP (CAR (CDR X))))
     (NOT (CAR (CDR X)))
     (NOT (CONSP (CDR (CDR X))))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (IF (CONSP X)
         (IF (IF (EQUAL (CAR X) 'FGL::BIND-VAR)
                 'T
               (EQUAL (CAR X) 'FGL::SYNTAX-BIND))
             (IF (CONSP (CDR X))
                 (IF (SYMBOLP (CAR (CDR X)))
                     (IF (CAR (CDR X))
                         (CONSP (CDR (CDR X)))
                       'NIL)
                   'NIL)
               'NIL)
           'NIL)
       'NIL)
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X))))
   (FGL::REMOVE-BIND-VAR-CALLS 1 :SYSTEM
                               . "centaur/fgl/def-fgl-rewrite"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (BINARY-+ N
                               (UNARY-- (EXPT '2
                                              (BINARY-+ '-1 (INTEGER-LENGTH N))))))
         (ACL2-COUNT N))))
   (LIST-TO-TREE-AUX 2 :SYSTEM . "centaur/fgl/list-to-tree"))
  ((JUSTIFICATION (ARGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ARGS)))
    ((NOT (SYN__CONSP ARGS))
     (O< (ACL2-COUNT (SYN__CDR ARGS))
         (ACL2-COUNT ARGS))))
   (DELIST 1 :SYSTEM . "coi/util/in-conclusion"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (CONSP LIST))
     (NOT (INTEGERP (NFIX N)))
     (NOT (< '0 (NFIX N)))
     (O< (ACL2-COUNT (BINARY-+ '-1 N))
         (ACL2-COUNT N))))
   (ITH 2 :SYSTEM . "coi/util/ith"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (SV::MODSCOPE-KIND$INLINE X)
                 ':NESTED))
     (O< (ACL2-COUNT (STD::PROD-CDR$INLINE (STD::PROD-CDR$INLINE (CDR X))))
         (ACL2-COUNT X))))
   (SV::MODSCOPE-FIX$INLINE 1 :SYSTEM . "centaur/sv/mods/moddb"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-SCOPESTACK-KIND$INLINE VL::X)
                 ':LOCAL))
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X))))
   (VL::VL-SCOPESTACK-FIX$INLINE 1
                                 :SYSTEM . "centaur/vl/mlib/scopestack"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (SV::SVEX-SELECT-KIND$INLINE X)
                 ':PART))
     (O< (ACL2-COUNT (STD::PROD-CDR$INLINE (STD::PROD-CDR$INLINE (CDR X))))
         (ACL2-COUNT X))))
   (SV::SVEX-SELECT-FIX$INLINE 1 :SYSTEM . "centaur/sv/svex/select"))
  ((JUSTIFICATION (VALUE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VALUE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VALUE)))
    ((NOT (INTEGERP VALUE))
     (NOT (< '0 VALUE))
     (O< (ACL2-COUNT (ASH (LNFIX$INLINE VALUE) '-8))
         (ACL2-COUNT VALUE))))
   (VL::VL-VALUE-TO-STRING-AUX 2 :SYSTEM . "centaur/sv/vl/expr"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (EQUAL (CAR VL::X) ':CONTEXT))
     (NOT (CONSP (CDR VL::X)))
     (O< (ACL2-COUNT (CDR (CDR VL::X)))
         (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (CAR VL::X) ':WARNINGS)
     (EQUAL (CAR VL::X) ':CONSTRAINTS)
     (EQUAL (CAR VL::X) ':CONTEXT)
     (O< (ACL2-COUNT (CAR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (CAR VL::X) ':WARNINGS)
     (EQUAL (CAR VL::X) ':CONSTRAINTS)
     (EQUAL (CAR VL::X) ':CONTEXT)
     (NOT (TD-STUB-1 (CAR VL::X)))
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X))))
   (VL::VTTREE-P 1 :SYSTEM . "centaur/sv/vl/expr"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':BRANCH))
     (O< (ACL2-COUNT (CAR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':BRANCH))
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (ACL2-COUNT (CDR (CDR VL::X)))
         (ACL2-COUNT VL::X))))
   (VL::VTTREE-FIX$INLINE 1 :SYSTEM . "centaur/sv/vl/expr"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((MV-NTH '0
             (MATCH-TREE ''(:? SV::REST-AL) X 'NIL))
     (NOT (MV-NTH '0
                  (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                     (:? REST))
                              X 'NIL)))
     (NOT (SV::SVAR-P (CDR (ASSOC-EQUAL 'SV::VAR
                                        (MV-NTH '1
                                                (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                                                   (:? REST))
                                                            X 'NIL))))))
     (O< (ACL2-COUNT (CDR (ASSOC-EQUAL 'REST
                                       (MV-NTH '1
                                               (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                                                  (:? REST))
                                                           X 'NIL)))))
         (ACL2-COUNT X)))
    ((MV-NTH '0
             (MATCH-TREE ''(:? SV::REST-AL) X 'NIL))
     (MV-NTH '0
             (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                (:? REST))
                         X 'NIL))
     (NOT (MV-NTH '0
                  (MATCH-TREE '(CONS '((:? SV::VAR) :? SV::VAL)
                                     (:? REST))
                              X 'NIL)))
     (NOT (SV::SVAR-P (CDR (ASSOC-EQUAL 'SV::VAR
                                        (MV-NTH '1
                                                (MATCH-TREE '(CONS '((:? SV::VAR) :? SV::VAL)
                                                                   (:? REST))
                                                            X 'NIL))))))
     (O< (ACL2-COUNT (CDR (ASSOC-EQUAL 'REST
                                       (MV-NTH '1
                                               (MATCH-TREE '(CONS '((:? SV::VAR) :? SV::VAL)
                                                                  (:? REST))
                                                           X 'NIL)))))
         (ACL2-COUNT X)))
    ((MV-NTH '0
             (MATCH-TREE ''(:? SV::REST-AL) X 'NIL))
     (MV-NTH '0
             (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                (:? REST))
                         X 'NIL))
     (MV-NTH '0
             (MATCH-TREE '(CONS '((:? SV::VAR) :? SV::VAL)
                                (:? REST))
                         X 'NIL))
     (NOT (MV-NTH '0
                  (MATCH-TREE '(BINARY-APPEND (:? FIRST) (:? REST))
                              X 'NIL)))
     (O< (ACL2-COUNT (CDR (ASSOC-EQUAL 'FIRST
                                       (MV-NTH '1
                                               (MATCH-TREE '(BINARY-APPEND (:? FIRST) (:? REST))
                                                           X 'NIL)))))
         (ACL2-COUNT X)))
    ((MV-NTH '0
             (MATCH-TREE ''(:? SV::REST-AL) X 'NIL))
     (MV-NTH '0
             (MATCH-TREE '(CONS (CONS '(:? SV::VAR) (:? SV::VAL))
                                (:? REST))
                         X 'NIL))
     (MV-NTH '0
             (MATCH-TREE '(CONS '((:? SV::VAR) :? SV::VAL)
                                (:? REST))
                         X 'NIL))
     (NOT (MV-NTH '0
                  (MATCH-TREE '(BINARY-APPEND (:? FIRST) (:? REST))
                              X 'NIL)))
     (MV-NTH '0
             (TD-STUB-1 (CDR (ASSOC-EQUAL 'FIRST
                                          (MV-NTH '1
                                                  (MATCH-TREE '(BINARY-APPEND (:? FIRST) (:? REST))
                                                              X 'NIL))))))
     (O< (ACL2-COUNT (CDR (ASSOC-EQUAL 'REST
                                       (MV-NTH '1
                                               (MATCH-TREE '(BINARY-APPEND (:? FIRST) (:? REST))
                                                           X 'NIL)))))
         (ACL2-COUNT X))))
   (SV::MAP-ALIST-TERM-KEYS-TO-VAL-TERMS 1 :SYSTEM . "centaur/sv/svtv/decomp"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((MV-NTH '2 (FGL::AABF-FIRST/REST/END X))
     (O< (ACL2-COUNT (MV-NTH '1
                             (FGL::AABF-FIRST/REST/END X)))
         (ACL2-COUNT X))))
   (FGL::AABF-LOGNOT-S 2 :SYSTEM
                       . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((MV-NTH '2 (FGL::BFR-FIRST/REST/END X))
     (O< (ACL2-COUNT (MV-NTH '1 (FGL::BFR-FIRST/REST/END X)))
         (ACL2-COUNT X))))
   (FGL::BFR-LOGNOT-S 2
                      :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (O< (ACL2-COUNT (IF (EQUAL '1
                                (FGL::GET-BIT FGL::LEVEL FGL::BITARR))
                         (CAR X)
                       (CDR X)))
         (ACL2-COUNT X))))
   (FGL::EVAL-BDD-FAST 3 :SYSTEM . "centaur/fgl/ctrex-utils"))
  ((JUSTIFICATION (VL::ECHARS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::ECHARS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::ECHARS)))
    ((NOT (CONSP VL::ECHARS))
     (NOT (MV-NTH '0
                  (VL::VL-LEX-TOKEN$INLINE VL::ECHARS
                                           VL::BREAKP VL::ST VL::WARNINGS)))
     (O< (ACL2-COUNT (MV-NTH '1
                             (VL::VL-LEX-TOKEN$INLINE VL::ECHARS
                                                      VL::BREAKP VL::ST VL::WARNINGS)))
         (ACL2-COUNT VL::ECHARS))))
   (VL::VL-LEX-MAIN-EXEC 5 :SYSTEM
                         . "centaur/vl/loader/lexer/top"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (MV-NTH '0 (VL::TYPO-READ-PART VL::X)))
     (O< (ACL2-COUNT (MV-NTH '1 (VL::TYPO-READ-PART VL::X)))
         (ACL2-COUNT VL::X))))
   (VL::TYPO-PARTITION 1 :SYSTEM
                       . "centaur/vl/lint/typo-detect"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (CAR VL::X) ':VL-WARNING)
     (EQUAL (CAR VL::X)
            ':VL-WARNINGTREE-CONTEXT)
     (O< (ACL2-COUNT (CAR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (CAR VL::X) ':VL-WARNING)
     (EQUAL (CAR VL::X)
            ':VL-WARNINGTREE-CONTEXT)
     (NOT (TD-STUB-1 (CAR VL::X)))
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (EQUAL (CAR VL::X)
                 ':VL-WARNINGTREE-CONTEXT))
     (NOT (CONSP (CDR VL::X)))
     (O< (ACL2-COUNT (CDR (CDR VL::X)))
         (ACL2-COUNT VL::X))))
   (VL::VL-WARNINGTREE-P 1 :SYSTEM
                         . "centaur/vl/util/warningtree"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':PAIR))
     (O< (ACL2-COUNT (CAR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':PAIR))
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (ACL2-COUNT (CDR (CDR VL::X)))
         (ACL2-COUNT VL::X))))
   (VL::VL-WARNINGTREE-FIX$INLINE 1 :SYSTEM
                                  . "centaur/vl/util/warningtree"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (CONSP (CDR VL::X)))
     (NOT (CONSP (CDR (CDR VL::X))))
     (IF (EQUAL (CAR (CAR VL::X))
                (CAR (CAR (CDR VL::X))))
         (NOT (EQUAL (CAR (CAR VL::X))
                     (CAR (CAR (CDR (CDR VL::X))))))
       'NIL)
     (O< (ACL2-COUNT (CDR VL::X))
         (ACL2-COUNT VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (CONSP (CDR VL::X)))
     (NOT (CONSP (CDR (CDR VL::X))))
     (NOT (EQUAL (CAR (CAR VL::X))
                 (CAR (CAR (CDR VL::X)))))
     (EQUAL (CAR (CAR VL::X))
            (CAR (CAR (CDR (CDR VL::X)))))
     (O< (ACL2-COUNT (CDR (CDR VL::X)))
         (ACL2-COUNT VL::X))))
   (VL::VL-PP-ENCODED-COMMENTMAP-FN 2 :SYSTEM
                                    . "centaur/vl/mlib/comment-writer")
   (VL2014::VL-PP-ENCODED-COMMENTMAP-FN :SYSTEM
                                        . "centaur/vl2014/mlib/comment-writer"))
  ((JUSTIFICATION (VL2014::ECHARS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::ECHARS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::ECHARS)))
    ((NOT (MV-NTH '0
                  (VL2014::VL-PARSE-DEFINE-ACTUAL VL2014::NAME VL2014::ECHARS
                                                  VL2014::CONFIG VL2014::LOC 'NIL
                                                  'NIL)))
     (NOT (MV-NTH '1
                  (VL2014::VL-PARSE-DEFINE-ACTUAL VL2014::NAME VL2014::ECHARS
                                                  VL2014::CONFIG VL2014::LOC 'NIL
                                                  'NIL)))
     (O< (ACL2-COUNT (MV-NTH '3
                             (VL2014::VL-PARSE-DEFINE-ACTUAL VL2014::NAME VL2014::ECHARS
                                                             VL2014::CONFIG VL2014::LOC 'NIL
                                                             'NIL)))
         (ACL2-COUNT VL2014::ECHARS))))
   (VL2014::VL-PARSE-DEFINE-ACTUALS 4 :SYSTEM
                                    .
                                    "centaur/vl2014/loader/preprocessor/preprocessor"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (O< (ACL2-COUNT (MV-NTH '1
                             (VL2014::VL-VERILOGIFY-EMODWIRELIST-1 (VL2014::VL-EMODWIRE->BASENAME (CAR VL2014::X))
                                                                   VL2014::X)))
         (ACL2-COUNT VL2014::X))))
   (VL2014::VL-VERILOGIFY-EMODWIRELIST-0 1 :SYSTEM
                                         . "centaur/esim/vltoe/verilogify"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (NOT (MV-NTH '0
                  (VL2014::TYPO-READ-PART VL2014::X)))
     (O< (ACL2-COUNT (MV-NTH '1
                             (VL2014::TYPO-READ-PART VL2014::X)))
         (ACL2-COUNT VL2014::X))))
   (VL2014::TYPO-PARTITION 1 :SYSTEM
                           . "centaur/vl2014/lint/typo-detect"))
  ((JUSTIFICATION (A)
                  (NIL O-P . O<)
                  ((ACL2-COUNT A) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT A)))
    ((O-FINP A)
     (O< (ACL2-COUNT (O-RST A))
         (ACL2-COUNT A))))
   (LIMITPART 1 :SYSTEM
              . "ordinals/ordinal-definitions"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((O-FINP X)
     (O< (ACL2-COUNT (O-RST X))
         (ACL2-COUNT X)))
    ((O-FINP X)
     (O< (ACL2-COUNT (O-FIRST-EXPT X))
         (ACL2-COUNT X))))
   (CTOA 1 :SYSTEM . "ordinals/e0-ordinal"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (PK N PARAMS)
     (O< (ACL2-COUNT (PK-BADGUY N PARAMS))
         (ACL2-COUNT N))))
   (PK-INDUCTION 2 :SYSTEM . "tools/k-induction"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'MV-LET))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (MV-NTH '0
             (TD-STUB-3 N (CAR (CDR (CDR X))) WORLD))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (CONSP (CAR X)))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
         (ACL2-COUNT X))))
   (CONVERT-SUBEXPRESSION-TO-MV 3
                                :SYSTEM . "tools/untranslate-for-exec"))
  ((JUSTIFICATION (MATCH)
                  (NIL O-P . O<)
                  ((ACL2-COUNT MATCH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT MATCH)))
    ((NOT (CONSP MATCH))
     (NUMERIC-CONSTANT-P MATCH)
     (NOT (EQUAL (CAR MATCH) 'BINARY-*))
     (O< (ACL2-COUNT (ARG1 MATCH))
         (ACL2-COUNT MATCH)))
    ((NOT (CONSP MATCH))
     (NUMERIC-CONSTANT-P MATCH)
     (NOT (EQUAL (CAR MATCH) 'BINARY-*))
     (O< (ACL2-COUNT (ARG2 MATCH))
         (ACL2-COUNT MATCH)))
    ((NOT (CONSP MATCH))
     (NUMERIC-CONSTANT-P MATCH)
     (NOT (EQUAL (CAR MATCH) 'UNARY--))
     (O< (ACL2-COUNT (ARG1 MATCH))
         (ACL2-COUNT MATCH))))
   (INVERT-MATCH 1 :SYSTEM
                 .
                 "arithmetic-5/lib/basic-ops/building-blocks"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (CAR X) 'IF))
     (NOT (CONSP (CDR (CDR X))))
     (NOT (CONSP (CDR (CDR (CDR X)))))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (IF (CONSP (CDR X))
         (EQUAL (CAR X) 'NOT)
       'NIL)
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (CAR X) 'IF))
     (NOT (CONSP (CDR (CDR X))))
     (NOT (CONSP (CDR (CDR (CDR X)))))
     (NOT (TD-STUB-1 (CAR (CDR X))))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (IF (CONSP (CDR X))
         (EQUAL (CAR X) 'NOT)
       'NIL)
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (CAR X) 'IF))
     (NOT (CONSP (CDR (CDR X))))
     (NOT (CONSP (CDR (CDR (CDR X)))))
     (NOT (TD-STUB-1 (CAR (CDR X))))
     (NOT (TD-STUB-1 (CAR (CDR (CDR X)))))
     (O< (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (CONSP (CDR X)))
     (NOT (EQUAL (CAR X) 'NOT))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X))))
   (OK-TO-LIFT-P 1 :SYSTEM
                 .
                 "arithmetic-5/lib/basic-ops/building-blocks"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) 'BINARY-+))
     (O< (ACL2-COUNT (ARG2 X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) 'BINARY-+))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X))))
   (NEGATIVE-ADDENDS-BALANCE 3 :SYSTEM
                             .
                             "arithmetic-5/lib/basic-ops/building-blocks"))
  ((JUSTIFICATION (SUM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SUM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SUM)))
    ((NOT (EQUAL (FN-SYMB SUM) 'BINARY-+))
     (O< (ACL2-COUNT (ARG2 SUM))
         (ACL2-COUNT SUM))))
   (ADDENDS 1 :SYSTEM
            .
            "arithmetic-5/lib/basic-ops/building-blocks")
   (ADDEND-INFO-LIST :SYSTEM
                     .
                     "arithmetic-5/lib/basic-ops/simplify"))
  ((JUSTIFICATION (PRODUCT)
                  (NIL O-P . O<)
                  ((ACL2-COUNT PRODUCT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT PRODUCT)))
    ((NOT (EQUAL (FN-SYMB PRODUCT) 'BINARY-*))
     (O< (ACL2-COUNT (ARG2 PRODUCT))
         (ACL2-COUNT PRODUCT))))
   (FACTORS 1 :SYSTEM
            .
            "arithmetic-5/lib/basic-ops/building-blocks"))
  ((JUSTIFICATION (FACTOR)
                  (NIL O-P . O<)
                  ((ACL2-COUNT FACTOR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT FACTOR)))
    ((NOT (CONSP FACTOR))
     (CONSTANT-P FACTOR)
     (NOT (EQUAL (CAR FACTOR) 'UNARY--))
     (O< (ACL2-COUNT (ARG1 FACTOR))
         (ACL2-COUNT FACTOR)))
    ((NOT (CONSP FACTOR))
     (CONSTANT-P FACTOR)
     (NOT (EQUAL (CAR FACTOR) 'UNARY-/))
     (O< (ACL2-COUNT (ARG1 FACTOR))
         (ACL2-COUNT FACTOR))))
   (FACTOR-VAL-GATHER-EXPONENTS 1 :SYSTEM
                                . "arithmetic-5/lib/basic-ops/common"))
  ((JUSTIFICATION (FACTOR)
                  (NIL O-P . O<)
                  ((ACL2-COUNT FACTOR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT FACTOR)))
    ((NOT (CONSP FACTOR))
     (NOT (EQUAL (CAR FACTOR) 'UNARY-/))
     (O< (ACL2-COUNT (ARG1 FACTOR))
         (ACL2-COUNT FACTOR))))
   (FACTOR-PATTERN-SCATTER-EXPONENTS 1 :SYSTEM
                                     . "arithmetic-5/lib/basic-ops/common"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (EQUAL (FN-SYMB X) 'UNARY--))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X)))
    ((NOT (EQUAL (FN-SYMB X) 'BINARY-+))
     (O< (ACL2-COUNT (ARG2 X))
         (ACL2-COUNT X)))
    ((NOT (EQUAL (FN-SYMB X) 'BINARY-+))
     (NOT (TD-STUB-1 (ARG2 X)))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X)))
    ((NOT (EQUAL (FN-SYMB X) 'BINARY-*))
     (O< (ACL2-COUNT (ARG2 X))
         (ACL2-COUNT X))))
   (FACTOR-GATHER-EXPONENTS-INFO-LIST 1 :SYSTEM
                                      . "arithmetic-5/lib/basic-ops/common"))
  ((JUSTIFICATION (FACTORS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT FACTORS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT FACTORS)))
    ((NOT (CONSP FACTORS))
     (O< (ACL2-COUNT (BUT-NTH FACTORS
                              (BINARY-+ '-1
                                        (HOW-MANY-FACTORS (CAR FACTORS)
                                                          FACTORS '0))))
         (ACL2-COUNT FACTORS))))
   (CONDENSE-FACTORS 2 :SYSTEM
                     . "arithmetic-5/lib/basic-ops/common"))
  ((JUSTIFICATION (ADDEND)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ADDEND)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ADDEND)))
    ((NOT (TRUE-LISTP ADDEND))
     (NOT (EQUAL (CAR ADDEND) 'BINARY-*))
     (IF (IF (TRUE-LISTP (ARG1 ADDEND))
             (EQUAL (CAR (ARG1 ADDEND)) 'UNARY-/)
           'NIL)
         (EQUAL (ARG1 (ARG1 ADDEND)) DENOMINATOR)
       'NIL)
     (O< (ACL2-COUNT (ARG2 ADDEND))
         (ACL2-COUNT ADDEND))))
   (FACTORS-OTHER-THAN-DENOMINATOR 2 :SYSTEM
                                   .
                                   "arithmetic-5/lib/basic-ops/normalize"))
  ((JUSTIFICATION (SUM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SUM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SUM)))
    ((NOT (TRUE-LISTP SUM))
     (NOT (EQUAL (FN-SYMB SUM) 'BINARY-+))
     (O< (ACL2-COUNT (CAR (CDR (CDR SUM))))
         (ACL2-COUNT SUM))))
   (NUMBER-OF-ADDENDS 1 :SYSTEM
                      .
                      "arithmetic-5/lib/basic-ops/normalize"))
  ((JUSTIFICATION (ADDEND)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ADDEND)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ADDEND)))
    ((NOT (CONSP ADDEND))
     (EQUAL 'QUOTE (CAR ADDEND))
     (NOT (TRUE-LISTP ADDEND))
     (NOT (EQUAL (CAR ADDEND) 'BINARY-*))
     (O< (ACL2-COUNT (ARG2 ADDEND))
         (ACL2-COUNT ADDEND))))
   (FIND-DENOMINATORS-WITH-SUMS 3 :SYSTEM
                                .
                                "arithmetic-5/lib/basic-ops/normalize"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (EQUAL (CAR X) 'BINARY-*))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (EQUAL (CAR X) 'BINARY-*))
     (TD-STUB-3 (ARG1 X) MFC STATE)
     (O< (ACL2-COUNT (ARG2 X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (NOT (EQUAL (CAR X) 'UNARY--))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X))))
   (FIND-DIVISIVE-FACTOR-SCATTER-EXPONENTS2 3 :SYSTEM
                                            .
                                            "arithmetic-5/lib/basic-ops/simplify"))
  ((JUSTIFICATION (TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TERM)))
    ((NOT (CONSP TERM))
     (NOT (EQUAL (FN-SYMB TERM) BIN-OP))
     (NOT (EQUAL (FN-SYMB (ARG2 TERM)) BIN-OP))
     (O< (ACL2-COUNT (ARG2 TERM))
         (ACL2-COUNT TERM))))
   (LEAVES 2 :SYSTEM
           .
           "arithmetic-5/lib/basic-ops/integerp-meta"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) 'BINARY-*))
     (O< (ACL2-COUNT (ARG1 X))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) 'BINARY-*))
     (TD-STUB-4 (ARG1 X) SIMPLEP MFC STATE)
     (O< (ACL2-COUNT (ARG2 X))
         (ACL2-COUNT X))))
   (FIND-DIVISIVE-FACTOR 4 :SYSTEM
                         .
                         "arithmetic-5/lib/floor-mod/floor-mod"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((EQUAL (CAR (CDR X)) Z)
     (NOT (EQUAL (FN-SYMB (CAR (CDR (CDR X))))
                 'BINARY-+))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X))))
   (MOD-+-CANCEL-0-FN-1 2 :SYSTEM
                        .
                        "arithmetic-5/lib/floor-mod/floor-mod"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((FLOOR-+-CANCEL-0-FN-2 (CAR (CDR X))
                            Y Z MFC STATE)
     (NOT (EQUAL (FN-SYMB (CAR (CDR (CDR X))))
                 'BINARY-+))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X))))
   (FLOOR-+-CANCEL-0-FN-1 5 :SYSTEM
                          .
                          "arithmetic-5/lib/floor-mod/floor-mod"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP (CDR (CDR X))))
     (O< (ACL2-COUNT (CDR (CDR X)))
         (ACL2-COUNT X))))
   (RTL::CAT-SIZE 1 :SYSTEM . "rtl/rel11/lib/defs"))
  ((JUSTIFICATION (K)
                  (NIL O-P . O<)
                  ((ACL2-COUNT K) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT K)))
    ((NOT (INTEGERP K))
     (NOT (< '0 K))
     (NOT (INTEGERP (BINARY-* K '1/2)))
     (O< (ACL2-COUNT (BINARY-* K '1/2))
         (ACL2-COUNT K))))
   (RTL::PI2 1 :SYSTEM . "rtl/rel11/lib/add"))
  ((JUSTIFICATION (ACL2S::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ACL2S::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ACL2S::N)))
    ((NOT (INTEGERP ACL2S::N))
     (NOT (< '1 ACL2S::N))
     (O< (ACL2-COUNT (FLOOR (NFIX ACL2S::N) '2))
         (ACL2-COUNT ACL2S::N))))
   (ACL2S::BITSIZE-AUX 2 :SYSTEM
                       .
                       "acl2s/defdata/number-enums-sampling"))
  ((JUSTIFICATION (DEFDATA::A1)
                  (NIL O-P . O<)
                  ((ACL2-COUNT DEFDATA::A1)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT DEFDATA::A1)))
    ((NOT (CONSP DEFDATA::A1))
     (NOT (EQUAL (ASSOC-EQUAL (CAR (CAR DEFDATA::A1))
                              DEFDATA::A1)
                 (ASSOC-EQUAL (CAR (CAR DEFDATA::A1))
                              DEFDATA::A2)))
     (O< (ACL2-COUNT (DEFDATA::REMOVE1-ASSOC-ALL (CAR (CAR DEFDATA::A1))
                                                 DEFDATA::A1))
         (ACL2-COUNT DEFDATA::A1))))
   (DEFDATA::ALIST-EQUIV 2
                         :SYSTEM . "acl2s/defdata/defdata-util"))
  ((JUSTIFICATION (A)
                  (NIL O-P . O<)
                  ((ACL2-COUNT A) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT A)))
    ((EQUAL (CDR A) 'NIL)
     (NOT (<< (CAR (CAR A)) (CAR (CAR (CDR A)))))
     (O< (ACL2-COUNT (CDR A))
         (ACL2-COUNT A))))
   (ORDERED-UNIQUE-KEY-ALISTP 1 :SYSTEM . "acl2s/defdata/records"))
  ((JUSTIFICATION (A)
                  (NIL O-P . O<)
                  ((ACL2-COUNT A) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT A)))
    ((EQUAL A 'NIL)
     (EQUAL (CDR (CAR A)) 'NIL)
     (O< (ACL2-COUNT (CDR A))
         (ACL2-COUNT A))))
   (NO-NIL-VAL-ALISTP 1 :SYSTEM . "acl2s/defdata/records"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (INTEGERP X))
     (NOT (< X '0))
     (EQUAL X '-1)
     (O< (ACL2-COUNT (ASH X '-1))
         (ACL2-COUNT X))))
   (SHIFTS-TO-ALL-ONES 1 :SYSTEM
                       . "tau/bounders/elementary-bounders"))
  ((JUSTIFICATION (TS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TS)))
    ((EQUAL TS '-1)
     (EQUAL TS '0)
     (NOT (< TS '0))
     (O< (ACL2-COUNT (LOGNOT TS))
         (ACL2-COUNT TS))))
   (DECODE-TS 1 :SYSTEM . "acl2s/cgen/type"))
  ((JUSTIFICATION (CGEN::TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT CGEN::TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT CGEN::TERM)))
    ((NOT (CONSP CGEN::TERM))
     (NOT (EQUAL (CAR CGEN::TERM) 'RETURN-LAST))
     (O< (ACL2-COUNT (CAR (LAST (CDR CGEN::TERM))))
         (ACL2-COUNT CGEN::TERM))))
   (CGEN::PROCESS-RETURN-LAST 1 :SYSTEM
                              . "acl2s/cgen/infer-enum-shape"))
  ((JUSTIFICATION (CGEN::N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT CGEN::N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT CGEN::N)))
    ((ZPF CGEN::N)
     (CGEN::STOPPING-CONDITION? CGEN::GCS%
                                (CGEN::CGET-PARAM-FN 'CGEN::NUM-COUNTEREXAMPLES
                                                     CGEN::CGEN-STATE)
                                (CGEN::CGET-PARAM-FN 'CGEN::NUM-WITNESSES
                                                     CGEN::CGEN-STATE))
     (O< (ACL2-COUNT (BINARY-+ '-1 CGEN::N))
         (ACL2-COUNT CGEN::N))))
   (CGEN::RUN-N-TESTS. 7 :SYSTEM . "acl2s/cgen/simple-search"))
  ((JUSTIFICATION (ACL2S::L)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ACL2S::L)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ACL2S::L)))
    ((NOT (CONSP ACL2S::L))
     (NOT (CONSP (CDR ACL2S::L)))
     (NOT (LEGAL-VARIABLEP (CAR ACL2S::L)))
     (KEYWORDP (CAR (CDR ACL2S::L)))
     (O< (ACL2-COUNT (CDR ACL2S::L))
         (ACL2-COUNT ACL2S::L)))
    ((NOT (CONSP ACL2S::L))
     (NOT (CONSP (CDR ACL2S::L)))
     (NOT (LEGAL-VARIABLEP (CAR ACL2S::L)))
     (NOT (KEYWORDP (CAR (CDR ACL2S::L))))
     (O< (ACL2-COUNT (ACL2S::SKIP-KEYWORDS (CDR (CDR ACL2S::L))))
         (ACL2-COUNT ACL2S::L))))
   (ACL2S::PROPER-ARGSP 1 :SYSTEM . "acl2s/definec"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (NOT (CONSP L))
     (NOT (< (LEN L) N))
     (O< (ACL2-COUNT (BINARY-+ N (UNARY-- (LEN L))))
         (ACL2-COUNT N))))
   (LEN-FIXER/REPEAT 2
                     :SYSTEM . "acl2s/cgen/base-cgen-rules"))
  ((JUSTIFICATION (ACL2S::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ACL2S::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ACL2S::X)))
    ((NOT ACL2S::X)
     (NOT (ACONSP ACL2S::X))
     (NOT (DEFDATA::AP (ACL2S::ACONS-CAAR ACL2S::X)))
     (NOT (DEFDATA::BP (ACL2S::ACONS-CDAR ACL2S::X)))
     (O< (ACL2-COUNT (ACL2S::ACONS-CDR ACL2S::X))
         (ACL2-COUNT ACL2S::X))))
   (DEFDATA::|(DEFDATA::ALISTOF DEFDATA::A DEFDATA::B)P| 1 :SYSTEM . "acl2s/acl2s-sigs"))
  ((JUSTIFICATION (LEFT)
                  (NIL O-P . O<)
                  ((ACL2-COUNT LEFT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT LEFT)))
    ((NOT (R-CONCAT-P LEFT))
     (O< (ACL2-COUNT (R-CONCAT-RIGHT LEFT))
         (ACL2-COUNT LEFT))))
   (APPEND-CONCATS 2
                   :SYSTEM . "projects/regex/regex-parse"))
  ((JUSTIFICATION (TREE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TREE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TREE)))
    ((IS-EMPTY-LT TREE)
     (O< (ACL2-COUNT (RIGHT-LT TREE))
         (ACL2-COUNT TREE))))
   (LENGTH-RIGHT-SPINE-LT 1 :SYSTEM
                          .
                          "projects/leftist-trees/leftist-tree-defuns"))
  ((JUSTIFICATION (TREE)
                  (NIL O-P . O<)
                  ((ACL2-COUNT TREE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT TREE)))
    ((IS-EMPTY-LT TREE)
     (O< (ACL2-COUNT (RIGHT-LT TREE))
         (ACL2-COUNT TREE)))
    ((IS-EMPTY-LT TREE)
     (O< (ACL2-COUNT (LEFT-LT TREE))
         (ACL2-COUNT TREE))))
   (SIZE-LT 1 :SYSTEM
            .
            "projects/leftist-trees/leftist-tree-defuns"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (< N '0)
     (NOT (< '1 N))
     (O< (ACL2-COUNT (BINARY-* N
                               (UNARY-/ (DM::LEAST-PRIME-DIVISOR N))))
         (ACL2-COUNT N))))
   (DM::PRIME-FACT 1 :SYSTEM . "projects/numbers/euclid"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (< N '0)
     (EQUAL '0 N)
     (EQUAL N '1)
     (O< (ACL2-COUNT (LOGCDR$INLINE N))
         (ACL2-COUNT N))))
   (X86ISA::BSR 1 :SYSTEM
                .
                "projects/x86isa/machine/instructions/bit"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (INTEGERP X))
     (NOT (< '0 X))
     (EQUAL (LOGHEAD$INLINE '1 X) '1)
     (O< (ACL2-COUNT (LOGTAIL$INLINE '1 X))
         (ACL2-COUNT X))))
   (X86ISA::BSF 2 :SYSTEM
                .
                "projects/x86isa/machine/instructions/fp/bitscan"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (INTEGERP X))
     (NOT (< '0 X))
     (O< (ACL2-COUNT (LOGTAIL$INLINE '8 X))
         (ACL2-COUNT X))))
   (X86ISA::OPCODE-STRING-BYTES 2 :SYSTEM
                                . "projects/x86isa/machine/inst-doc"))
  ((JUSTIFICATION (X86ISA::CHAR-LST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X86ISA::CHAR-LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X86ISA::CHAR-LST)))
    ((NOT (CHARACTER-LISTP X86ISA::CHAR-LST))
     (NOT X86ISA::CHAR-LST)
     (O< (ACL2-COUNT (CDR X86ISA::CHAR-LST))
         (ACL2-COUNT X86ISA::CHAR-LST))))
   (X86ISA::CHARS-TO-C-STR 1 :SYSTEM
                           .
                           "projects/x86isa/tools/execution/execloaders"))
  ((JUSTIFICATION (IRV::ALST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT IRV::ALST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT IRV::ALST)))
    ((NOT (CONSP IRV::ALST))
     (NOT (RASSOC-EQUAL IRV::VAL IRV::ALST))
     (O< (ACL2-COUNT (REMOVE1-ASSOC-EQUAL (CAR (RASSOC-EQUAL IRV::VAL IRV::ALST))
                                          IRV::ALST))
         (ACL2-COUNT IRV::ALST))))
   (IRV::ALL-KEYS 2 :SYSTEM . "projects/irv/irv"))
  ((JUSTIFICATION (XDOC::NAME)
                  (NIL O-P . O<)
                  ((ACL2-COUNT XDOC::NAME)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT XDOC::NAME)))
    ((NOT (STRINGP XDOC::NAME))
     (EQUAL (POSITION-EQUAL XDOC::C XDOC::NAME)
            'NIL)
     (O< (ACL2-COUNT (SUBSEQ XDOC::NAME
                             (BINARY-+ '1
                                       (POSITION-EQUAL XDOC::C XDOC::NAME))
                             'NIL))
         (ACL2-COUNT XDOC::NAME))))
   (XDOC::ESCAPE-CHAR 3
                      :SYSTEM . "system/doc/render-doc-base"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (UTF8-TABLE36-EXPECTED-LENGTH (CAR X)))
     (NOT (UTF8-CHAR? (TAKE (UTF8-TABLE36-EXPECTED-LENGTH (CAR X))
                            X)))
     (O< (ACL2-COUNT (NTHCDR (UTF8-TABLE36-EXPECTED-LENGTH (CAR X))
                             X))
         (ACL2-COUNT X))))
   (UTF8-PARTITION 1 :SYSTEM . "unicode/utf8-decode"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (UTF8-TABLE36-EXPECTED-LENGTH (CAR X)))
     (NOT (UTF8-CHAR=>UCHAR (TAKE (UTF8-TABLE36-EXPECTED-LENGTH (CAR X))
                                  X)))
     (O< (ACL2-COUNT (NTHCDR (UTF8-TABLE36-EXPECTED-LENGTH (CAR X))
                             X))
         (ACL2-COUNT X))))
   (UTF8=>USTRING-FAST 2 :SYSTEM . "unicode/utf8-decode"))
  ((JUSTIFICATION (PFCS::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT PFCS::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT PFCS::X)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::X)
                 ':MUL))
     (O< (ACL2-COUNT (CAR (CDR (CDR PFCS::X))))
         (ACL2-COUNT PFCS::X)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::X)
                 ':MUL))
     (O< (ACL2-COUNT (CAR (CDR PFCS::X)))
         (ACL2-COUNT PFCS::X)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::X)
                 ':ADD))
     (O< (ACL2-COUNT (CAR (CDR (CDR PFCS::X))))
         (ACL2-COUNT PFCS::X)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::X)
                 ':ADD))
     (O< (ACL2-COUNT (CAR (CDR PFCS::X)))
         (ACL2-COUNT PFCS::X))))
   (PFCS::EXPRESSION-FIX$INLINE 1 :SYSTEM
                                . "projects/pfcs/abstract-syntax"))
  ((JUSTIFICATION (PFIELD::X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT PFIELD::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT PFIELD::X)))
    ((IF (IF (CONSP PFIELD::X)
             (EQUAL 'PFIELD::NEG (CAR PFIELD::X))
           'NIL)
         'NIL
       (IF (CONSP PFIELD::X)
           (NOT (EQUAL 'PFIELD::BIND-FREE-ID
                       (CAR PFIELD::X)))
         'T))
     (O< (ACL2-COUNT (CAR (CDR PFIELD::X)))
         (ACL2-COUNT PFIELD::X)))
    ((IF (CONSP PFIELD::X)
         (EQUAL 'PFIELD::NEG (CAR PFIELD::X))
       'NIL)
     (IF (CONSP PFIELD::X)
         (EQUAL 'PFIELD::BIND-FREE-ID
                (CAR PFIELD::X))
       'NIL)
     (NOT (CONSP PFIELD::X))
     (NOT (EQUAL 'PFIELD::MUL (CAR PFIELD::X)))
     (NOT (QUOTEP (CAR (CDR PFIELD::X))))
     (O< (ACL2-COUNT (CAR (CDR (CDR PFIELD::X))))
         (ACL2-COUNT PFIELD::X))))
   (PFIELD::STRIP-INVISIBLE-FNS-FOR-ADD 1 :SYSTEM . "kestrel/prime-fields/add"))
  ((JUSTIFICATION (PFCS::ASG)
                  (NIL O-P . O<)
                  ((ACL2-COUNT PFCS::ASG)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT PFCS::ASG)))
    ((OMAP::EMPTYP (PFCS::ASSIGNMENT-FIX PFCS::ASG))
     (NOT (PFIELD::FEP (MV-NTH '1
                               (OMAP::HEAD (PFCS::ASSIGNMENT-FIX PFCS::ASG)))
                       PFCS::P))
     (O< (ACL2-COUNT (OMAP::TAIL (PFCS::ASSIGNMENT-FIX PFCS::ASG)))
         (ACL2-COUNT PFCS::ASG))))
   (PFCS::ASSIGNMENT-WFP 2 :SYSTEM
                         . "projects/pfcs/semantics-deep"))
  ((JUSTIFICATION (MACRO-ARGS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT MACRO-ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT MACRO-ARGS)))
    ((NOT (CONSP MACRO-ARGS))
     (EQUAL '&REST (CAR MACRO-ARGS))
     (EQUAL '&BODY (CAR MACRO-ARGS))
     (O< (ACL2-COUNT (CDR MACRO-ARGS))
         (ACL2-COUNT MACRO-ARGS)))
    ((NOT (CONSP MACRO-ARGS))
     (IF (EQUAL '&REST (CAR MACRO-ARGS))
         'NIL
       (NOT (EQUAL '&BODY (CAR MACRO-ARGS))))
     (O< (ACL2-COUNT (CDR (CDR MACRO-ARGS)))
         (ACL2-COUNT MACRO-ARGS))))
   (REMOVE-REST-AND-BODY-FROM-MACRO-ARGS 1 :SYSTEM
                                         . "kestrel/utilities/macro-args"))
  ((JUSTIFICATION (NAT)
                  (NIL O-P . O<)
                  ((ACL2-COUNT NAT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT NAT)))
    ((NOT (INTEGERP NAT))
     (NOT (< '0 NAT))
     (O< (ACL2-COUNT (FLOOR NAT (DAB-BASE-FIX BASE)))
         (ACL2-COUNT NAT))))
   (NAT=>DIGITS-EXEC 3 :SYSTEM
                     .
                     "kestrel/utilities/digits-any-base/core"))
  ((JUSTIFICATION (ALEOBFT::CERTS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ALEOBFT::CERTS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ALEOBFT::CERTS)))
    ((SET::EMPTYP (ALEOBFT::CERTIFICATE-SET-FIX ALEOBFT::CERTS))
     (O< (ACL2-COUNT (SET::TAIL ALEOBFT::CERTS))
         (ACL2-COUNT ALEOBFT::CERTS))))
   (ALEOBFT::CERT-SET->AUTHOR-SET 1 :SYSTEM
                                  . "projects/aleo/bft/certificates"))
  ((JUSTIFICATION (ALEOBFT::MEMBERS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ALEOBFT::MEMBERS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ALEOBFT::MEMBERS)))
    ((SET::EMPTYP (ALEOBFT::ADDRESS-SET-FIX ALEOBFT::MEMBERS))
     (O< (ACL2-COUNT (SET::TAIL ALEOBFT::MEMBERS))
         (ACL2-COUNT ALEOBFT::MEMBERS))))
   (ALEOBFT::COMMITTEE-MEMBERS-STAKE 2 :SYSTEM
                                     . "projects/aleo/bft/committees"))
  ((JUSTIFICATION (ECURVE::SCALAR)
                  (NIL O-P . O<)
                  ((ACL2-COUNT ECURVE::SCALAR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT ECURVE::SCALAR)))
    ((NOT (INTEGERP ECURVE::SCALAR))
     (NOT (< '0 ECURVE::SCALAR))
     (EVENP ECURVE::SCALAR)
     (O< (ACL2-COUNT (BINARY-+ '-1 ECURVE::SCALAR))
         (ACL2-COUNT ECURVE::SCALAR)))
    ((NOT (INTEGERP ECURVE::SCALAR))
     (NOT (< '0 ECURVE::SCALAR))
     (NOT (EVENP ECURVE::SCALAR))
     (O< (ACL2-COUNT (BINARY-* ECURVE::SCALAR '1/2))
         (ACL2-COUNT ECURVE::SCALAR))))
   (ECURVE::TWISTED-EDWARDS-MUL-FAST-NONNEG 3 :SYSTEM
                                            .
                                            "kestrel/crypto/ecurve/twisted-edwards"))
  ((JUSTIFICATION (SMT::TERM)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SMT::TERM)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SMT::TERM)))
    ((NOT (TRUE-LISTP SMT::TERM))
     (NOT SMT::TERM)
     (NOT (CDR SMT::TERM))
     (NOT (MV-NTH '0
                  (SMT::FUNCTION-OPTION-SYNTAX-P (CONS (CAR SMT::TERM)
                                                       (CONS (CAR (CDR SMT::TERM)) 'NIL))
                                                 SMT::USED)))
     (O< (ACL2-COUNT (CDR (CDR SMT::TERM)))
         (ACL2-COUNT SMT::TERM))))
   (SMT::FUNCTION-OPTION-LST-SYNTAX-P-HELPER 2 :SYSTEM
                                             . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::BLIST)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SMT::BLIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SMT::BLIST)))
    ((NOT (CONSP (BOOLEAN-LIST-FIX$INLINE SMT::BLIST)))
     (NOT (CAR (BOOLEAN-LIST-FIX$INLINE SMT::BLIST)))
     (O< (ACL2-COUNT (CDR (BOOLEAN-LIST-FIX$INLINE SMT::BLIST)))
         (ACL2-COUNT SMT::BLIST))))
   (SMT::TYPE-HYP 2 :SYSTEM
                  . "projects/smtlink/verified/type-hyp"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (FLOOR N '2))
         (ACL2-COUNT N))))
   (MEM::_LOG2-TR 2 :SYSTEM
                  . "data-structures/memories/memory"))
  ((JUSTIFICATION (SMT::ACTUALS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SMT::ACTUALS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SMT::ACTUALS)))
    ((NOT (CONSP (SMT::PARAGRAPH-FIX SMT::ACTUALS)))
     (NOT (CONSP (CDR (SMT::PARAGRAPH-FIX SMT::ACTUALS))))
     (O< (ACL2-COUNT (CDR (SMT::PARAGRAPH-FIX SMT::ACTUALS)))
         (ACL2-COUNT SMT::ACTUALS))))
   (SMT::MAP-TRANSLATED-ACTUALS 1 :SYSTEM
                                .
                                "projects/smtlink/trusted/z3-py/translator"))
  ((JUSTIFICATION (SMT::PAR)
                  (NIL O-P . O<)
                  ((ACL2-COUNT SMT::PAR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT SMT::PAR)))
    ((NOT (CONSP (SMT::PARAGRAPH-FIX SMT::PAR)))
     (O< (ACL2-COUNT (CDR (SMT::PARAGRAPH-FIX SMT::PAR)))
         (ACL2-COUNT SMT::PAR)))
    ((NOT (CONSP (SMT::PARAGRAPH-FIX SMT::PAR)))
     (O< (ACL2-COUNT (CAR (SMT::PARAGRAPH-FIX SMT::PAR)))
         (ACL2-COUNT SMT::PAR))))
   (SMT::PRINC$-PARAGRAPH 3 :SYSTEM
                          . "projects/smtlink/trusted/write"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP B))
     (< B '0)
     (NOT (< '1 B))
     (NOT (INTEGERP N))
     (NOT (< '0 N))
     (O< (ACL2-COUNT (FLOOR N B))
         (ACL2-COUNT N))))
   (SUMDIGS 2 :SYSTEM . "demos/divp-by-casting"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((NOT (INTEGERP B))
     (< B '0)
     (NOT (< '1 B))
     (< (NFIX N) B)
     (O< (ACL2-COUNT (SUMDIGS (NFIX N) B))
         (ACL2-COUNT N))))
   (SUMDIGS* 2 :SYSTEM . "demos/divp-by-casting"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((ACL2-COUNT N) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT N)))
    ((< (NFIX N) '8)
     (O< (ACL2-COUNT (SUMDIGS7 (NFIX N)))
         (ACL2-COUNT N))))
   (SUMDIGS7* 1 :SYSTEM . "demos/divp-by-casting"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X) IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) BINARY-OP-NAME))
     (O< (ACL2-COUNT (CAR (CDR (CDR X))))
         (ACL2-COUNT X)))
    ((NOT (CONSP X))
     (NOT (EQUAL (CAR X) BINARY-OP-NAME))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X))))
   (BINARY-OP_FRINGE 2 :SYSTEM . "meta/term-defuns")))
 ((JUSTIFICATION (B A N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (NFIX N)
                                  (UNARY-- (HL-NAT-COMBINE (NFIX A) (NFIX B)))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (B A N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX N)
                                   (UNARY-- (HL-NAT-COMBINE (NFIX A) (NFIX B)))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX N)
                          (UNARY-- (HL-NAT-COMBINE (NFIX A) (NFIX B)))))))
    ((NOT (< (HL-NAT-COMBINE (NFIX A) (NFIX B))
             (NFIX N)))
     (NOT (INTEGERP (NFIX A)))
     (NOT (< '0 (NFIX A)))
     (O< (NFIX (BINARY-+ (NFIX (NFIX N))
                         (UNARY-- (HL-NAT-COMBINE (NFIX (BINARY-+ '-1 (NFIX A)))
                                                  (NFIX (BINARY-+ '1 (NFIX B)))))))
         (NFIX (BINARY-+ (NFIX N)
                         (UNARY-- (HL-NAT-COMBINE (NFIX A) (NFIX B)))))))
    ((NOT (< (HL-NAT-COMBINE (NFIX A) (NFIX B))
             (NFIX N)))
     (IF (INTEGERP (NFIX A))
         (IF (< '0 (NFIX A)) 'T 'NIL)
       'NIL)
     (O< (NFIX (BINARY-+ (NFIX (NFIX N))
                         (UNARY-- (HL-NAT-COMBINE (NFIX (BINARY-+ (NFIX B) '1))
                                                  (NFIX '0)))))
         (NFIX (BINARY-+ (NFIX N)
                         (UNARY-- (HL-NAT-COMBINE (NFIX A) (NFIX B))))))))
   (FND 3 :SYSTEM
        . "system/hl-nat-combine-onto")))
 ((JUSTIFICATION (SMT::FN-LST)
                 (NIL O-P . O<)
                 ((LEN (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SMT::FN-LST)
                  (NIL O-P . O<)
                  ((LEN (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST))))
    ((NOT (CONSP (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST)))
     (O< (LEN (SMT::FUNC-ALIST-FIX$INLINE (CDR (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST))))
         (LEN (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST)))))
   (SMT::TRANSLATE-UNINTERPRETED-DECL-LST 4 :SYSTEM
                                          .
                                          "projects/smtlink/trusted/z3-py/translator")))
 ((JUSTIFICATION (THM)
                 (NIL O-P . O<)
                 ((LEN THM) IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (L)
                  (NIL O-P . O<)
                  ((LEN L) IF MV-LIST RETURN-LAST))
   (((O-P (LEN L)))
    ((NOT (CONSP (CDR L)))
     (O< (LEN (ODDS L)) (LEN L)))
    ((NOT (CONSP (CDR L)))
     (O< (LEN (EVENS L)) (LEN L))))
   (MERGE-SORT-LEXORDER 1))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (O< (LEN (MV-NTH '1 (SET::HALVE-LIST X)))
         (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (O< (LEN (MV-NTH '0 (SET::HALVE-LIST X)))
         (LEN X))))
   (SET::MERGESORT-EXEC 1 :SYSTEM . "std/osets/top"))
  ((JUSTIFICATION (AVOID)
                  (NIL O-P . O<)
                  ((LEN AVOID) IF MV-LIST RETURN-LAST))
   (((O-P (LEN AVOID)))
    ((NOT (MEMBER-EQUAL (SYMBOL-N BASE (NFIX N))
                        AVOID))
     (O< (LEN (REMOVE-EQUAL (SYMBOL-N BASE (NFIX N))
                            AVOID))
         (LEN AVOID))))
   (NEW-SYMBOL1-MEASURE 3 :SYSTEM
                        . "clause-processors/generalize"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (O< (LEN (NTHCDR (FLOOR (LEN X) '2) X))
         (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CDR X)))
     (O< (LEN (TAKE (FLOOR (LEN X) '2) X))
         (LEN X))))
   (COMPARABLE-MERGESORT 1 :SYSTEM . "defsort/generic")
   (<-SORT :SYSTEM . "projects/irv/irv")
   (X86ISA::SDM-INSTRUCTION-TABLE-SORT :SYSTEM
                                       .
                                       "projects/x86isa/machine/catalogue-base")
   (VL2014::VL-PORTDECL-SORT :SYSTEM
                             . "centaur/vl2014/server/porttable")
   (VL2014::VL-COMMENTMAP-ENTRY-SORT :SYSTEM
                                     . "centaur/vl2014/mlib/comment-writer")
   (VL2014::VL-EMODWIRE-SORT :SYSTEM
                             . "centaur/esim/vltoe/verilogify")
   (VL2014::SD-PROBLEM-SORT :SYSTEM
                            . "centaur/vl2014/lint/skip-detect")
   (VL::VL-COMMENTMAP-ENTRY-SORT :SYSTEM
                                 . "centaur/vl/mlib/comment-writer")
   (VL::VL-PORTDECL-SORT :SYSTEM . "centaur/vl/server/porttable")
   (SV::RANGELIST-SORT :SYSTEM . "centaur/sv/vl/use-set")
   (VL::PARTSUMLIST-SORT :SYSTEM
                         . "centaur/vl/util/summarize-parts")
   (VL::SD-PROBLEM-SORT :SYSTEM . "centaur/vl/lint/skip-detect")
   (FGL::PROF-ENTRY-TRIES-SORT :SYSTEM . "centaur/fgl/prof")
   (VL::VL-WARNING-SORT :SYSTEM . "centaur/vl/util/warnings")
   (SV::SEGMENT-DRIVERS-SORT :SYSTEM
                             . "centaur/sv/mods/norm-netlist")
   (SV::DRIVESTRENGTH-SORT :SYSTEM . "centaur/sv/mods/lhs")
   (ALPHANUM-SORT :SYSTEM . "centaur/misc/alphanum-sort")
   (GL::PROF-ENTRY-TRIES-SORT :SYSTEM . "centaur/gl/prof")
   (VL2014::VL-WARNING-SORT :SYSTEM
                            . "centaur/vl2014/util/warnings")
   (AIGNET::LEVELS-SORT :SYSTEM . "centaur/aignet/balance")
   (AIGNET::LITERAL-SORT :SYSTEM . "centaur/aignet/literal-sort")
   (AIGNET::SORT-NATS :SYSTEM . "centaur/aignet/rwlib")
   (ALPHORDER-SORT :SYSTEM . "centaur/aig/aig-vars-ext")
   (LEN-SORT :SYSTEM
             . "centaur/4v-sexpr/sexpr-loop-debug")
   (STR::ISTR-SORT :SYSTEM . "std/strings/isort")
   (<<-SORT :SYSTEM . "defsort/uniquep"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((MV-NTH '2 (GL::FIRST/REST/END X))
     (O< (LEN (MV-NTH '1 (GL::FIRST/REST/END X)))
         (LEN X))))
   (GL::BFR-INTEGER-LENGTH-S1 2 :SYSTEM
                              . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-INTEGER-LENGTH-S1 :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (CONSP X))
     (CONSP (CAR X))
     (O< (LEN (CDR X)) (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (CAR X)))
     (O< (LEN (GL::CALIST-REMASSOCS (CDR X)
                                    (CONS (CAR (CAR X)) 'NIL)))
         (LEN X))))
   (GL::EVAL-CONSTRAINT-ALIST 2 :SYSTEM . "centaur/gl/hyp-fix"))
  ((JUSTIFICATION (E)
                  (NIL O-P . O<)
                  ((LEN E) IF MV-LIST RETURN-LAST))
   (((O-P (LEN E)))
    ((GL::ALL-NIL E)
     (GL::ALL-NIL (CDR E))
     (O< (LEN (CDR E)) (LEN E))))
   (GL::BFR-EXPT-SU 2 :SYSTEM
                    . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-EXPT-SU :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (CONSP X))
     (O< (LEN (CDR X)) (LEN X))))
   (GL::SHRINK-CONSTRAINT-ALIST 1 :SYSTEM . "centaur/gl/hyp-fix")
   (ABNF::LOOKUP-RULENAME :SYSTEM
                          . "projects/abnf/notation/semantics")
   (<-INSERTSORT :SYSTEM . "projects/irv/irv")
   (X86ISA::SDM-INSTRUCTION-TABLE-INSERTSORT :SYSTEM
                                             .
                                             "projects/x86isa/machine/catalogue-base")
   (VL2014::VL-PARAMVALUELIST-ELIM-USELESS-PARAMS :SYSTEM
                                                  .
                                                  "centaur/vl2014/transforms/clean-params")
   (SV::RANGELIST-SORT-INSERTSORT :SYSTEM . "centaur/sv/vl/use-set")
   (VL::PARTSUMLIST-SORT-INSERTSORT :SYSTEM
                                    . "centaur/vl/util/summarize-parts")
   (VL::VL-MODINSTLIST-LINT-STUB :SYSTEM
                                 . "centaur/vl/transforms/lintstub")
   (VL::VL-PARAMDECLLIST-CHECK-GLOBALPARAMS :SYSTEM
                                            . "centaur/vl/lint/check-globalparams")
   (VL::VL-DISTLIST-CONDCHECK :SYSTEM . "centaur/vl/lint/condcheck")
   (VL::VL-VARDECLLIST-SCAN-FOR-IGNORE :SYSTEM
                                       . "centaur/vl/lint/suppress-warnings")
   (AIGNET::AIGNET-PATHCOND-EVAL-AT-CHECKPOINTS :SYSTEM
                                                . "centaur/fgl/pathcond-transform")
   (AIGNET::AIGNET-MAP-OUTPUTS-BY-LIT-LIST :SYSTEM
                                           . "centaur/aignet/simplify-marked")
   (FGL::ALIST-CONST-PAIRS-MAP :SYSTEM
                               . "centaur/fgl/check-primitives")
   (FGL::CGRAPH-DERIVE-ASSIGNS-MEASURE :SYSTEM . "centaur/fgl/ctrex-utils")
   (FGL::PROF-ENTRY-TRIES-INSERTSORT :SYSTEM . "centaur/fgl/prof")
   (SV::SVTV-DEBUG-FSM-WRITEPHASES :SYSTEM . "centaur/sv/svtv/debug")
   (VL::VL-MODINSTLIST-LVALUECHECK :SYSTEM . "centaur/vl/lint/lvaluecheck")
   (VL::VL-DISTLIST-IMMDEPS-FN :SYSTEM . "centaur/vl/mlib/immdeps")
   (VL::VL-ELABTASKLIST-COLLECT-ODD-NAMES :SYSTEM
                                          . "centaur/vl/transforms/addnames")
   (VL::VL-MAYBE-EXPRLIST-INCREWRITE-AUX :SYSTEM
                                         .
                                         "centaur/vl/transforms/annotate/increment-elim")
   (VL::VL-DISTLIST-TYPE-DISAMBIGUATE :SYSTEM
                                      .
                                      "centaur/vl/transforms/annotate/type-disambiguation")
   (VL::VL-FUNDECLLIST-DELTEMPS :SYSTEM
                                .
                                "centaur/vl/transforms/annotate/shadowcheck")
   (VL::VL-PORTDECLLIST-ALLEXPRS-NREV :SYSTEM . "centaur/vl/mlib/allexprs")
   (VL::VL-PLAINARGLIST-UPDATE-IFPORTS :SYSTEM
                                       . "centaur/vl/transforms/unparam/top")
   (VL::VL-PORTLIST-COLLECT-CLASSES :SYSTEM
                                    .
                                    "centaur/vl/transforms/unparam/expr-classes")
   (VL::VL-NAMEDARGLIST-ELABORATE-FN :SYSTEM . "centaur/sv/vl/elaborate")
   (SV::SVSTACK-FILTER-GLOBAL-LHS-VARS :SYSTEM
                                       . "centaur/sv/vl/svstmt-compile")
   (VL::VL-VARDECLLIST-STRIP :SYSTEM . "centaur/vl/mlib/strip")
   (SV::SEGMENT-DRIVER-MAP-VARS :SYSTEM
                                . "centaur/sv/mods/norm-netlist")
   (SV::LHS-VARS :SYSTEM . "centaur/sv/mods/lhs")
   (ALPHA-INSERTSORT :SYSTEM . "centaur/misc/alphanum-sort")
   (GL::PROF-ENTRY-TRIES-INSERTSORT :SYSTEM . "centaur/gl/prof")
   (AIGNET::SPATH-ENDPOINT :SYSTEM
                           .
                           "centaur/aignet/internal-observability-super")
   (AIGNET::LEVELS-SORT-INSERTSORT :SYSTEM . "centaur/aignet/balance")
   (AIGNET::LITERAL-SORT-INSERTSORT :SYSTEM . "centaur/aignet/literal-sort")
   (AIGNET::NATSORT-INSERTSORT :SYSTEM . "centaur/aignet/rwlib"))
  ((JUSTIFICATION (AIGNET::NODEDATA)
                  (NIL O-P . O<)
                  ((LEN AIGNET::NODEDATA)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN AIGNET::NODEDATA)))
    ((NOT (CONSP AIGNET::NODEDATA))
     (NOT (CONSP (CDR AIGNET::NODEDATA)))
     (NOT (< (SATLINK::LIT->VAR$INLINE (CAR AIGNET::NODEDATA))
             (LNFIX$INLINE AIGNET::NUM-FANINS)))
     (NOT (< (SATLINK::LIT->VAR$INLINE (CAR (CDR AIGNET::NODEDATA)))
             (LNFIX$INLINE AIGNET::NUM-FANINS)))
     (O< (LEN (CDR (CDR AIGNET::NODEDATA)))
         (LEN AIGNET::NODEDATA))))
   (AIGNET::ABC-NODES-WELLFORMED 2 :SYSTEM . "centaur/aignet/rwlib"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((NOT (CONSP (VL2014::VL-LUCIDOCCLIST-FIX$INLINE VL2014::X)))
     (O< (LEN (CDR (VL2014::VL-LUCIDOCCLIST-FIX$INLINE VL2014::X)))
         (LEN VL2014::X))))
   (VL2014::VL-LUCID-FILTER-MERGES 3
                                   :SYSTEM . "centaur/vl2014/lint/lucid"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((NOT (CONSP (VL2014::VL-WARNINGLIST-FIX$INLINE VL2014::X)))
     (O< (LEN (CDR (VL2014::VL-WARNINGLIST-FIX$INLINE VL2014::X)))
         (LEN VL2014::X))))
   (VL2014::VL-ELIDE-WARNINGS-MAIN 5 :SYSTEM
                                   . "centaur/vl2014/mlib/print-warnings")
   (VL2014::VL-FILTER-WARNINGS-BY-LOC :SYSTEM
                                      .
                                      "centaur/vl2014/loader/inject-warnings"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((NOT (CONSP (CDR VL2014::X)))
     (O< (LEN (CONS (VL2014::VL-NONATOM (CAR (CDR VL2014::X))
                                        (CAR (CDR (CDR VL2014::X)))
                                        (CONS (CAR VL2014::X)
                                              (CONS (CAR (CDR (CDR (CDR VL2014::X))))
                                                    'NIL))
                                        'NIL
                                        'NIL)
                    (CDR (CDR (CDR (CDR VL2014::X))))))
         (LEN VL2014::X))))
   (VL2014::VL-LEFT-ASSOCIATE-MIXED-BINOP-LIST 1 :SYSTEM
                                               .
                                               "centaur/vl2014/loader/parser/expressions"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (CONSP X))
     (NOT (CONSP (SV::DRIVERLIST-REST-AFTER-STRENGTH X
                                                     (SV::DRIVER->STRENGTH$INLINE (CAR X)))))
     (O< (LEN (SV::DRIVERLIST-REST-AFTER-STRENGTH X
                                                  (SV::DRIVER->STRENGTH$INLINE (CAR X))))
         (LEN X))))
   (SV::DRIVERLIST->SVEX 1 :SYSTEM . "centaur/sv/mods/lhs"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((NOT (MV-NTH '0 (SV::LHS-DECOMP X)))
     (O< (LEN (MV-NTH '1 (SV::LHS-DECOMP X)))
         (LEN X))))
   (SV::LHS-CHECK-MASKS 3 :SYSTEM . "centaur/sv/mods/lhs")
   (SV::SVTV-DEBUG-LHS-EVAL :SYSTEM . "centaur/sv/svtv/debug")
   (SV::SVSTMT-ASSIGN->SUBST :SYSTEM
                             . "centaur/sv/vl/svstmt-compile")
   (SV::LHS-INDEXED->NAMED :SYSTEM . "centaur/sv/mods/compile")
   (SV::ASSIGN->SEGMENT-DRIVERS :SYSTEM
                                . "centaur/sv/mods/norm-netlist")
   (SV::LHS-ALIAS-CANONICALIZE-TOP :SYSTEM . "centaur/sv/mods/alias-norm"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (VL::VL-LUCIDOCCLIST-FIX$INLINE VL::X)))
     (O< (LEN (CDR (VL::VL-LUCIDOCCLIST-FIX$INLINE VL::X)))
         (LEN VL::X))))
   (VL::VL-LUCID-FILTER-MERGES 3 :SYSTEM . "centaur/vl/lint/lucid"))
  ((JUSTIFICATION (VL::LOOPVARS)
                  (NIL O-P . O<)
                  ((LEN VL::LOOPVARS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::LOOPVARS)))
    ((NOT (CONSP (VL::VL-MAYBE-STRING-LIST-FIX$INLINE VL::LOOPVARS)))
     (O< (LEN (CDR (VL::VL-MAYBE-STRING-LIST-FIX$INLINE VL::LOOPVARS)))
         (LEN VL::LOOPVARS))))
   (VL::VL-PP-FOREACHSTMT-LOOPVARS-FN 2 :SYSTEM . "centaur/vl/mlib/writer"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (VL::VL-MODINSTLIST-FIX$INLINE VL::X)))
     (O< (LEN (CDR (VL::VL-MODINSTLIST-FIX$INLINE VL::X)))
         (LEN VL::X))))
   (VL::VL-BINDELIM-EXTEND-INSTTABLE 5 :SYSTEM
                                     .
                                     "centaur/vl/transforms/annotate/bind"))
  ((JUSTIFICATION (VL::SCOPES)
                  (NIL O-P . O<)
                  ((LEN VL::SCOPES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::SCOPES)))
    ((NOT (CONSP (VL::VL-LEXSCOPES-FIX$INLINE VL::SCOPES)))
     (VL::VL-LEXSCOPE-FIND (VL::STRING-FIX$INLINE VL::NAME)
                           (CAR (VL::VL-LEXSCOPES-FIX$INLINE VL::SCOPES)))
     (O< (LEN (CDR (VL::VL-LEXSCOPES-FIX$INLINE VL::SCOPES)))
         (LEN VL::SCOPES))))
   (VL::VL-LEXSCOPES-FIND 2 :SYSTEM
                          .
                          "centaur/vl/transforms/annotate/shadowcheck"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (VL::VL-WARNINGLIST-FIX$INLINE VL::X)))
     (O< (LEN (CDR (VL::VL-WARNINGLIST-FIX$INLINE VL::X)))
         (LEN VL::X))))
   (VL::VL-ELIDE-WARNINGS-MAIN 5 :SYSTEM
                               . "centaur/vl/mlib/print-warnings")
   (VL::VL-FILTER-WARNINGS-BY-LOC :SYSTEM
                                  . "centaur/vl/loader/inject-warnings"))
  ((JUSTIFICATION (VL::DEPS)
                  (NIL O-P . O<)
                  ((LEN VL::DEPS) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::DEPS)))
    ((NOT (CONSP (STR::STRING-LIST-FIX VL::DEPS)))
     (O< (LEN (CDR (STR::STRING-LIST-FIX VL::DEPS)))
         (LEN VL::DEPS))))
   (VL::VL-BLAME-ALIST-AUX1 3
                            :SYSTEM . "centaur/vl/mlib/remove-bad")
   (SMT::TRANSLATE-SYMBOL-DECLARE :SYSTEM
                                  .
                                  "projects/smtlink/trusted/z3-py/translator")
   (VL2014::VL-BLAME-ALIST-AUX1 :SYSTEM
                                . "centaur/vl2014/mlib/remove-bad"))
  ((JUSTIFICATION (SV::PHASES)
                  (NIL O-P . O<)
                  ((LEN SV::PHASES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SV::PHASES)))
    ((NOT (MV-NTH '1
                  (SV::SVTV*-INPUT-SIGNAL-FIND-NEXT-PHASE SV::NAME SV::PHASES SV::OVERRIDEP)))
     (O< (LEN (MV-NTH '2
                      (SV::SVTV*-INPUT-SIGNAL-FIND-NEXT-PHASE SV::NAME SV::PHASES SV::OVERRIDEP)))
         (LEN SV::PHASES))))
   (SV::SVTV*-INPUT-TO-SVTV-LINE-ENTRIES 4
                                         :SYSTEM . "centaur/sv/svtv/preprocess"))
  ((JUSTIFICATION (SV::PHASE-OUTS)
                  (NIL O-P . O<)
                  ((LEN SV::PHASE-OUTS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SV::PHASE-OUTS)))
    ((NOT (< (SV::SVTV-CYCLE-OUTPUT-PHASE SV::PHASES)
             (LEN SV::PHASE-OUTS)))
     (O< (LEN (NTHCDR (IF (CONSP SV::PHASES)
                          (LEN SV::PHASES)
                        '1)
                      SV::PHASE-OUTS))
         (LEN SV::PHASE-OUTS))))
   (SV::SVEX-ENVLIST-PHASE-OUTPUTS-EXTRACT-CYCLE-OUTPUTS 2
                                                         :SYSTEM . "centaur/sv/svtv/svtv-spec"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((MV-NTH '2 (FGL::AABF-FIRST/REST/END X))
     (O< (LEN (MV-NTH '1
                      (FGL::AABF-FIRST/REST/END X)))
         (LEN X))))
   (FGL::AABF-INTEGER-LENGTH-S1 3 :SYSTEM
                                . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (E)
                  (NIL O-P . O<)
                  ((LEN E) IF MV-LIST RETURN-LAST))
   (((O-P (LEN E)))
    ((FGL::AABF-SYNTACTICALLY-ZERO-P E)
     (FGL::AABF-SYNTACTICALLY-ZERO-P (CDR E))
     (O< (LEN (CDR E)) (LEN E))))
   (FGL::AABF-EXPT-SU 3 :SYSTEM
                      . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN X)))
    ((MV-NTH '2 (FGL::BFR-FIRST/REST/END X))
     (O< (LEN (MV-NTH '1 (FGL::BFR-FIRST/REST/END X)))
         (LEN X))))
   (FGL::BFR-INTEGER-LENGTH-S1 3
                               :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (E)
                  (NIL O-P . O<)
                  ((LEN E) IF MV-LIST RETURN-LAST))
   (((O-P (LEN E)))
    ((FGL::BFR-SYNTACTICALLY-ZERO-P E)
     (FGL::BFR-SYNTACTICALLY-ZERO-P (CDR E))
     (O< (LEN (CDR E)) (LEN E))))
   (FGL::BFR-EXPT-SU 3
                     :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (FGL::VARS)
                  (NIL O-P . O<)
                  ((LEN FGL::VARS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN FGL::VARS)))
    ((NOT (CONSP FGL::VARS))
     (NOT (CONSP (CDR (CMR::PSEUDO-VAR-LIST-FIX$INLINE FGL::VARS))))
     (O< (LEN (CDR (CMR::PSEUDO-VAR-LIST-FIX$INLINE FGL::VARS)))
         (LEN FGL::VARS))))
   (FGL::BIND-VARS-TO-LIST-ELEMS 2 :SYSTEM . "centaur/fgl/casesplit"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (CDR VL::X)))
     (O< (LEN (CONS (VL::VL-BINARY (CAR (CDR VL::X))
                                   (CAR VL::X)
                                   (CAR (CDR (CDR (CDR VL::X))))
                                   (CAR (CDR (CDR VL::X))))
                    (CDR (CDR (CDR (CDR VL::X))))))
         (LEN VL::X))))
   (VL::VL-LEFT-ASSOCIATE-MIXED-BINOP-LIST 1 :SYSTEM
                                           .
                                           "centaur/vl/loader/parser/expressions"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (CDR VL::X)))
     (O< (LEN (CONS (VL::VL-PROPBINARY (CAR (CDR VL::X))
                                       (CAR VL::X)
                                       (CAR (CDR (CDR VL::X))))
                    (CDR (CDR (CDR VL::X)))))
         (LEN VL::X))))
   (VL::VL-LEFT-ASSOCIATE-ALTERNATING-PROPEXPR/OP-LIST 1 :SYSTEM
                                                       .
                                                       "centaur/vl/loader/parser/properties"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP (VL::VL-DESCRIPTIONLIST-FIX$INLINE VL::X)))
     (NOT (CONSP (VL::VL-WARNINGLIST-FIX$INLINE VL::WARNINGS)))
     (O< (LEN (CDR (VL::VL-DESCRIPTIONLIST-FIX$INLINE VL::X)))
         (LEN VL::X))))
   (VL::VL-DESCRIPTIONLIST-INJECT-WARNINGS 2 :SYSTEM
                                           . "centaur/vl/loader/inject-warnings"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (CAR VL::X)
            (MV-NTH '0
                    (VL::VL-MATCH-CONTIGUOUS-INDICES (CAR VL::X)
                                                     (CDR VL::X))))
     (O< (LEN (MV-NTH '1
                      (VL::VL-MATCH-CONTIGUOUS-INDICES (CAR VL::X)
                                                       (CDR VL::X))))
         (LEN VL::X)))
    ((NOT (CONSP VL::X))
     (NOT (EQUAL (CAR VL::X)
                 (MV-NTH '0
                         (VL::VL-MATCH-CONTIGUOUS-INDICES (CAR VL::X)
                                                          (CDR VL::X)))))
     (O< (LEN (CDR VL::X)) (LEN VL::X))))
   (VL::VL-MERGE-CONTIGUOUS-INDICES 1 :SYSTEM
                                    . "centaur/vl/util/merge-indices"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN VL::X) IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL::X)))
    ((NOT (CONSP VL::X))
     (EQUAL (LEN VL::X)
            (LEN (VL::SUMMARIZE-PARTSUMLIST1 (CAR VL::X)
                                             (CDR VL::X))))
     (O< (LEN (VL::SUMMARIZE-PARTSUMLIST1 (CAR VL::X)
                                          (CDR VL::X)))
         (LEN VL::X))))
   (VL::SUMMARIZE-PARTSUMLIST 1 :SYSTEM
                              . "centaur/vl/util/summarize-parts"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((NOT (CONSP (VL2014::VL-DESCRIPTIONLIST-FIX$INLINE VL2014::X)))
     (NOT (CONSP (VL2014::VL-WARNINGLIST-FIX$INLINE VL2014::WARNINGS)))
     (O< (LEN (CDR (VL2014::VL-DESCRIPTIONLIST-FIX$INLINE VL2014::X)))
         (LEN VL2014::X))))
   (VL2014::VL-DESCRIPTIONLIST-INJECT-WARNINGS 2 :SYSTEM
                                               .
                                               "centaur/vl2014/loader/inject-warnings"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (EQUAL (CAR VL2014::X)
            (MV-NTH '0
                    (VL2014::VL-MATCH-CONTIGUOUS-INDICES (CAR VL2014::X)
                                                         (CDR VL2014::X))))
     (O< (LEN (MV-NTH '1
                      (VL2014::VL-MATCH-CONTIGUOUS-INDICES (CAR VL2014::X)
                                                           (CDR VL2014::X))))
         (LEN VL2014::X)))
    ((NOT (CONSP VL2014::X))
     (NOT (EQUAL (CAR VL2014::X)
                 (MV-NTH '0
                         (VL2014::VL-MATCH-CONTIGUOUS-INDICES (CAR VL2014::X)
                                                              (CDR VL2014::X)))))
     (O< (LEN (CDR VL2014::X))
         (LEN VL2014::X))))
   (VL2014::VL-MERGE-CONTIGUOUS-INDICES 1 :SYSTEM
                                        . "centaur/vl2014/util/merge-indices"))
  ((JUSTIFICATION (VL2014::SCOPES)
                  (NIL O-P . O<)
                  ((LEN VL2014::SCOPES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::SCOPES)))
    ((NOT (CONSP (VL2014::VL-LEXSCOPES-FIX$INLINE VL2014::SCOPES)))
     (VL2014::VL-LEXSCOPE-FIND$INLINE (VL2014::STRING-FIX$INLINE VL2014::NAME)
                                      (CAR (VL2014::VL-LEXSCOPES-FIX$INLINE VL2014::SCOPES)))
     (O< (LEN (CDR (VL2014::VL-LEXSCOPES-FIX$INLINE VL2014::SCOPES)))
         (LEN VL2014::SCOPES))))
   (VL2014::VL-LEXSCOPES-FIND 2 :SYSTEM
                              .
                              "centaur/vl2014/transforms/annotate/shadowcheck"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN VL2014::X)))
    ((EQUAL (VL2014::LPOSFIX$INLINE VL2014::N)
            '0)
     (< (LEN VL2014::X)
        (VL2014::LPOSFIX$INLINE VL2014::N))
     (O< (LEN (REST-N (VL2014::LPOSFIX$INLINE VL2014::N)
                      VL2014::X))
         (LEN VL2014::X))))
   (VL2014::VL-PARTITION-MSB-BITSLICES 2 :SYSTEM
                                       .
                                       "centaur/vl2014/transforms/replicate-insts"))
  ((JUSTIFICATION (DIMACS-READER::CONTENT)
                  (NIL O-P . O<)
                  ((LEN DIMACS-READER::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN DIMACS-READER::CONTENT)))
    ((NOT (CONSP DIMACS-READER::CONTENT))
     (NOT (MV-NTH '0
                  (DIMACS-READER::PARSE-STRING DIMACS-READER::CONTENT '"c ")))
     (NOT (DIMACS-READER::EMPTY-STRINGP (MV-NTH '0
                                                (DIMACS-READER::SKIP-LINE (MV-NTH '1
                                                                                  (DIMACS-READER::PARSE-STRING DIMACS-READER::CONTENT '"c "))))))
     (O< (LEN (MV-NTH '1
                      (DIMACS-READER::SKIP-LINE (MV-NTH '1
                                                        (DIMACS-READER::PARSE-STRING DIMACS-READER::CONTENT '"c ")))))
         (LEN DIMACS-READER::CONTENT))))
   (DIMACS-READER::PARSE-COMMENTS 1 :SYSTEM
                                  . "projects/sat/dimacs-reader/reader"))
  ((JUSTIFICATION (DIMACS-READER::CONTENT)
                  (NIL O-P . O<)
                  ((LEN DIMACS-READER::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN DIMACS-READER::CONTENT)))
    ((NOT (CONSP DIMACS-READER::CONTENT))
     (NOT (DIMACS-READER::EMPTY-STRINGP (MV-NTH '0
                                                (DIMACS-READER::PARSE-INTEGER-MY DIMACS-READER::CONTENT))))
     (EQUAL (MV-NTH '1
                    (DIMACS-READER::PARSE-INTEGER-MY DIMACS-READER::CONTENT))
            '0)
     (NOT (MV-NTH '0
                  (DIMACS-READER::PARSE-WHITESPACE (MV-NTH '2
                                                           (DIMACS-READER::PARSE-INTEGER-MY DIMACS-READER::CONTENT)))))
     (O< (LEN (MV-NTH '1
                      (DIMACS-READER::PARSE-WHITESPACE (MV-NTH '2
                                                               (DIMACS-READER::PARSE-INTEGER-MY DIMACS-READER::CONTENT)))))
         (LEN DIMACS-READER::CONTENT))))
   (DIMACS-READER::PARSE-CLAUSE 1 :SYSTEM
                                . "projects/sat/dimacs-reader/reader"))
  ((JUSTIFICATION (DIMACS-READER::CONTENT)
                  (NIL O-P . O<)
                  ((LEN DIMACS-READER::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN DIMACS-READER::CONTENT)))
    ((NOT (CONSP DIMACS-READER::CONTENT))
     (NOT (DIMACS-READER::EMPTY-STRINGP (MV-NTH '0
                                                (DIMACS-READER::PARSE-CLAUSE (DIMACS-READER::TRIM-WHITESPACE DIMACS-READER::CONTENT)))))
     (NOT (CONSP (MV-NTH '2
                         (DIMACS-READER::PARSE-CLAUSE (DIMACS-READER::TRIM-WHITESPACE DIMACS-READER::CONTENT)))))
     (NOT (MV-NTH '0
                  (DIMACS-READER::PARSE-WHITESPACE (MV-NTH '2
                                                           (DIMACS-READER::PARSE-CLAUSE (DIMACS-READER::TRIM-WHITESPACE DIMACS-READER::CONTENT))))))
     (NOT (CONSP (MV-NTH '1
                         (DIMACS-READER::PARSE-WHITESPACE (MV-NTH '2
                                                                  (DIMACS-READER::PARSE-CLAUSE (DIMACS-READER::TRIM-WHITESPACE DIMACS-READER::CONTENT)))))))
     (O< (LEN (MV-NTH '1
                      (DIMACS-READER::PARSE-WHITESPACE (MV-NTH '2
                                                               (DIMACS-READER::PARSE-CLAUSE (DIMACS-READER::TRIM-WHITESPACE DIMACS-READER::CONTENT))))))
         (LEN DIMACS-READER::CONTENT))))
   (DIMACS-READER::PARSE-FORMULA 1 :SYSTEM
                                 . "projects/sat/dimacs-reader/reader"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN ABNF::INPUT)))
    ((FTY::RESERRP (MV-NTH '0
                           (PFCS::LEX-DIGIT ABNF::INPUT)))
     (O< (LEN (MV-NTH '1
                      (PFCS::LEX-DIGIT ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (PFCS::LEX-*-DIGIT 1 :SYSTEM . "projects/pfcs/lexer"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN ABNF::INPUT)))
    ((FTY::RESERRP (MV-NTH '0
                           (PFCS::LEX-GROUP-LETTER/DIGIT/_ ABNF::INPUT)))
     (O< (LEN (MV-NTH '1
                      (PFCS::LEX-GROUP-LETTER/DIGIT/_ ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (PFCS::LEX-*-REST-OF-IDENTIFIER 1 :SYSTEM . "projects/pfcs/lexer"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN ABNF::INPUT)))
    ((FTY::RESERRP (MV-NTH '0
                           (PFCS::LEX-LEXEME ABNF::INPUT)))
     (O< (LEN (MV-NTH '1
                      (PFCS::LEX-LEXEME ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (PFCS::LEX-*-LEXEME 1 :SYSTEM . "projects/pfcs/lexer"))
  ((JUSTIFICATION (SMT::CONFIG-ALIST)
                  (NIL O-P . O<)
                  ((LEN SMT::CONFIG-ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::CONFIG-ALIST)))
    ((NOT (CONSP (SMT::STRING-STRING-ALIST-FIX$INLINE SMT::CONFIG-ALIST)))
     (O< (LEN (CDR (SMT::STRING-STRING-ALIST-FIX$INLINE SMT::CONFIG-ALIST)))
         (LEN SMT::CONFIG-ALIST))))
   (SMT::CHANGE-SMT-CNF 2 :SYSTEM . "projects/smtlink/config"))
  ((JUSTIFICATION (SMT::FORMAL/RETURN-LST)
                  (NIL O-P . O<)
                  ((LEN SMT::FORMAL/RETURN-LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FORMAL/RETURN-LST)))
    ((NOT (CONSP (SMT::DECL-LIST-FIX$INLINE SMT::FORMAL/RETURN-LST)))
     (O< (LEN (CDR (SMT::DECL-LIST-FIX$INLINE SMT::FORMAL/RETURN-LST)))
         (LEN SMT::FORMAL/RETURN-LST))))
   (SMT::FLATTEN-FORMALS/RETURNS 1 :SYSTEM
                                 .
                                 "projects/smtlink/verified/hint-interface")
   (SMT::TRANSLATE-TYPE-DECL-LIST :SYSTEM
                                  .
                                  "projects/smtlink/trusted/z3-py/translator")
   (SMT::GENERATE-FN-RETURNS-HINT :SYSTEM
                                  .
                                  "projects/smtlink/verified/uninterpreted-fn-cp")
   (SMT::REMOVE-DUPLICATE-FROM-DECL-LIST :SYSTEM
                                         . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::FN-LST)
                  (NIL O-P . O<)
                  ((LEN SMT::FN-LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FN-LST)))
    ((NOT (CONSP (SMT::FUNC-LIST-FIX$INLINE SMT::FN-LST)))
     (O< (LEN (CDR (SMT::FUNC-LIST-FIX$INLINE SMT::FN-LST)))
         (LEN SMT::FN-LST))))
   (SMT::MAKE-ALIST-FN-LST 1 :SYSTEM
                           .
                           "projects/smtlink/verified/hint-interface"))
  ((JUSTIFICATION (SMT::KWD-ALIST)
                  (NIL O-P . O<)
                  ((LEN SMT::KWD-ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::KWD-ALIST)))
    ((NOT (CONSP (SMT::TRUE-LIST-FIX SMT::KWD-ALIST)))
     (EQUAL SMT::KEY
            (CAR (SMT::TRUE-LIST-FIX SMT::KWD-ALIST)))
     (NOT (CONSP (CDR (SMT::TRUE-LIST-FIX SMT::KWD-ALIST))))
     (O< (LEN (CDR (CDR (SMT::TRUE-LIST-FIX SMT::KWD-ALIST))))
         (LEN SMT::KWD-ALIST))))
   (SMT::MY-SPLIT-KWD-ALIST 2 :SYSTEM
                            .
                            "projects/smtlink/verified/computed-hints"))
  ((JUSTIFICATION (SMT::CONTENT)
                  (NIL O-P . O<)
                  ((LEN SMT::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::CONTENT)))
    ((NOT (CONSP (SMT::ARGUMENT-LST-SYNTAX-FIX SMT::CONTENT)))
     (O< (LEN (CDR (SMT::ARGUMENT-LST-SYNTAX-FIX SMT::CONTENT)))
         (LEN SMT::CONTENT))))
   (SMT::MAKE-MERGE-FORMALS-HELPER 1 :SYSTEM
                                   . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::CONTENT)
                  (NIL O-P . O<)
                  ((LEN SMT::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::CONTENT)))
    ((NOT (CONSP (SMT::HYPOTHESIS-LST-SYNTAX-FIX SMT::CONTENT)))
     (O< (LEN (CDR (SMT::HYPOTHESIS-LST-SYNTAX-FIX SMT::CONTENT)))
         (LEN SMT::CONTENT))))
   (SMT::MAKE-MERGE-MORE-RETURNS 2 :SYSTEM
                                 . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::FUN-OPT-LST)
                  (NIL O-P . O<)
                  ((LEN SMT::FUN-OPT-LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FUN-OPT-LST)))
    ((NOT (CONSP (SMT::FUNCTION-OPTION-LST-SYNTAX-FIX SMT::FUN-OPT-LST)))
     (O< (LEN (CDR (CDR (SMT::FUNCTION-OPTION-LST-SYNTAX-FIX SMT::FUN-OPT-LST))))
         (LEN SMT::FUN-OPT-LST))))
   (SMT::MAKE-MERGE-FUNCTION-OPTION-LST 2 :SYSTEM
                                        . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::CONTENT)
                  (NIL O-P . O<)
                  ((LEN SMT::CONTENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::CONTENT)))
    ((NOT (CONSP (SMT::FUNCTION-LST-SYNTAX-FIX SMT::CONTENT)))
     (O< (LEN (CDR (SMT::FUNCTION-LST-SYNTAX-FIX SMT::CONTENT)))
         (LEN SMT::CONTENT))))
   (SMT::MERGE-FUNCTIONS 2 :SYSTEM
                         . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::USER-HINT)
                  (NIL O-P . O<)
                  ((LEN SMT::USER-HINT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::USER-HINT)))
    ((NOT (CONSP (SMT::SMTLINK-HINT-SYNTAX-FIX SMT::USER-HINT)))
     (O< (LEN (CDR (CDR (SMT::SMTLINK-HINT-SYNTAX-FIX SMT::USER-HINT))))
         (LEN SMT::USER-HINT))))
   (SMT::COMBINE-HINTS 2 :SYSTEM
                       . "projects/smtlink/verified/Smtlink"))
  ((JUSTIFICATION (SMT::HINTED-HYPOS)
                  (NIL O-P . O<)
                  ((LEN SMT::HINTED-HYPOS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::HINTED-HYPOS)))
    ((NOT (CONSP (SMT::HINT-PAIR-LIST-FIX$INLINE SMT::HINTED-HYPOS)))
     (O< (LEN (CDR (SMT::HINT-PAIR-LIST-FIX$INLINE SMT::HINTED-HYPOS)))
         (LEN SMT::HINTED-HYPOS))))
   (SMT::ADD-HYPO-SUBGOALS 2 :SYSTEM
                           .
                           "projects/smtlink/verified/add-hypo-cp")
   (SMT::GENERATE-FN-MORE-RETURNS-HINT :SYSTEM
                                       .
                                       "projects/smtlink/verified/uninterpreted-fn-cp"))
  ((JUSTIFICATION (SMT::FN-LST)
                  (NIL O-P . O<)
                  ((LEN SMT::FN-LST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FN-LST)))
    ((NOT (CONSP (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST)))
     (O< (LEN (CDR (SMT::FUNC-ALIST-FIX$INLINE SMT::FN-LST)))
         (LEN SMT::FN-LST))))
   (SMT::INITIALIZE-FN-LVLS 1 :SYSTEM
                            .
                            "projects/smtlink/verified/expand-cp"))
  ((JUSTIFICATION (SMT::FN-LVLS)
                  (NIL O-P . O<)
                  ((LEN SMT::FN-LVLS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FN-LVLS)))
    ((NOT (CONSP (SMT::SYM-NAT-ALIST-FIX$INLINE SMT::FN-LVLS)))
     (O< (LEN (CDR (SMT::SYM-NAT-ALIST-FIX$INLINE SMT::FN-LVLS)))
         (LEN SMT::FN-LVLS))))
   (SMT::SUM-LVLS 1 :SYSTEM
                  .
                  "projects/smtlink/verified/expand-cp"))
  ((JUSTIFICATION (FORMALS)
                  (NIL O-P . O<)
                  ((LEN FORMALS) IF MV-LIST RETURN-LAST))
   (((O-P (LEN FORMALS)))
    ((NOT (CONSP (SYMBOL-LIST-FIX$INLINE FORMALS)))
     (NOT (CONSP (CDR (SYMBOL-LIST-FIX$INLINE FORMALS))))
     (O< (LEN (CDR (SYMBOL-LIST-FIX$INLINE FORMALS)))
         (LEN FORMALS))))
   (SMT::TRANSLATE-SYMBOL-LST 1 :SYSTEM
                              .
                              "projects/smtlink/trusted/z3-py/translate-type"))
  ((JUSTIFICATION (SMT::FIELDS)
                  (NIL O-P . O<)
                  ((LEN SMT::FIELDS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FIELDS)))
    ((NOT (CONSP (SMT::FTY-FIELD-ALIST-FIX$INLINE SMT::FIELDS)))
     (O< (LEN (CDR (SMT::FTY-FIELD-ALIST-FIX$INLINE SMT::FIELDS)))
         (LEN SMT::FIELDS))))
   (SMT::TRANSLATE-FTY-FIELD-LST 2 :SYSTEM
                                 .
                                 "projects/smtlink/trusted/z3-py/translate-type"))
  ((JUSTIFICATION (SMT::FTY-TYPES)
                  (NIL O-P . O<)
                  ((LEN SMT::FTY-TYPES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN SMT::FTY-TYPES)))
    ((NOT (CONSP (SMT::FTY-TYPES-FIX$INLINE SMT::FTY-TYPES)))
     (O< (LEN (CDR (SMT::FTY-TYPES-FIX$INLINE SMT::FTY-TYPES)))
         (LEN SMT::FTY-TYPES))))
   (SMT::TRANSLATE-FTY-TYPES-RECUR 2 :SYSTEM
                                   .
                                   "projects/smtlink/trusted/z3-py/translate-type"))
  ((JUSTIFICATION (THM)
                  (NIL O-P . O<)
                  ((LEN THM) IF MV-LIST RETURN-LAST))
   (((O-P (LEN THM)))
    ((NOT (CONSP (SMT::WORD-LIST-FIX$INLINE THM)))
     (O< (LEN (CDR (SMT::WORD-LIST-FIX$INLINE THM)))
         (LEN THM))))
   (SMT::PRETTY-PRINT-RECUR 3 :SYSTEM
                            .
                            "projects/smtlink/trusted/z3-py/pretty-printer")))
 ((JUSTIFICATION (ABS)
                 (NIL O-P . O<)
                 ((LEN (SYMBOL-LIST-FIX$INLINE ABS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (ABS)
                  (NIL O-P . O<)
                  ((LEN (SYMBOL-LIST-FIX$INLINE ABS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SYMBOL-LIST-FIX$INLINE ABS))))
    ((NOT (CONSP (SYMBOL-LIST-FIX$INLINE ABS)))
     (O< (LEN (SYMBOL-LIST-FIX$INLINE (CDR (SYMBOL-LIST-FIX$INLINE ABS))))
         (LEN (SYMBOL-LIST-FIX$INLINE ABS)))))
   (SMT::TRANSLATE-ABSTRACT-TYPES 1 :SYSTEM
                                  .
                                  "projects/smtlink/trusted/z3-py/translate-type")))
 ((JUSTIFICATION (PFCS::EXPR)
                 (NIL O-P . O<)
                 ((PFCS::EXPRESSION-COUNT PFCS::EXPR)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PFCS::EXPR)
                  (NIL O-P . O<)
                  ((PFCS::EXPRESSION-COUNT PFCS::EXPR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::EXPRESSION-COUNT PFCS::EXPR)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
                 ':ADD))
     (O< (PFCS::EXPRESSION-COUNT (PFCS::EXPRESSION-ADD->ARG2$INLINE PFCS::EXPR))
         (PFCS::EXPRESSION-COUNT PFCS::EXPR)))
    ((NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
                 ':ADD))
     (O< (PFCS::EXPRESSION-COUNT (PFCS::EXPRESSION-ADD->ARG1$INLINE PFCS::EXPR))
         (PFCS::EXPRESSION-COUNT PFCS::EXPR)))
    ((EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':CONST)
     (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':VAR)
     (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':ADD)
     (O< (PFCS::EXPRESSION-COUNT (PFCS::EXPRESSION-MUL->ARG2$INLINE PFCS::EXPR))
         (PFCS::EXPRESSION-COUNT PFCS::EXPR)))
    ((EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':CONST)
     (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':VAR)
     (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
            ':ADD)
     (O< (PFCS::EXPRESSION-COUNT (PFCS::EXPRESSION-MUL->ARG1$INLINE PFCS::EXPR))
         (PFCS::EXPRESSION-COUNT PFCS::EXPR))))
   (PFCS::EXPRESSION-VARS 1 :SYSTEM
                          .
                          "projects/pfcs/abstract-syntax-operations")
   (PFCS::SESEM-EXPRESSION :SYSTEM
                           . "projects/pfcs/semantics-shallow"))
  ((JUSTIFICATION (PFCS::EXPR)
                  (NIL O-P . O<)
                  ((PFCS::EXPRESSION-COUNT PFCS::EXPR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::EXPRESSION-COUNT PFCS::EXPR)))
    ((PFCS::R1CS-MONOMIALP PFCS::EXPR)
     (NOT (EQUAL (PFCS::EXPRESSION-KIND$INLINE PFCS::EXPR)
                 ':ADD))
     (O< (PFCS::EXPRESSION-COUNT (PFCS::EXPRESSION-ADD->ARG1$INLINE PFCS::EXPR))
         (PFCS::EXPRESSION-COUNT PFCS::EXPR))))
   (PFCS::R1CS-POLYNOMIALP 1
                           :SYSTEM . "projects/pfcs/r1cs-subset")))
 ((JUSTIFICATION (PFCS::TREES)
                 (NIL O-P . O<)
                 ((ABNF::TREE-LIST-COUNT PFCS::TREES)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PFCS::TREES)
                  (NIL O-P . O<)
                  ((ABNF::TREE-LIST-COUNT PFCS::TREES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABNF::TREE-LIST-COUNT PFCS::TREES)))
    ((NOT (CONSP PFCS::TREES))
     (FTY::RESERRP (PFCS::ABS-COMMA-EXPRESSION (CAR PFCS::TREES)))
     (O< (ABNF::TREE-LIST-COUNT (CDR PFCS::TREES))
         (ABNF::TREE-LIST-COUNT PFCS::TREES))))
   (PFCS::ABS-*-COMMA-EXPRESSION 1 :SYSTEM
                                 . "projects/pfcs/syntax-abstraction"))
  ((JUSTIFICATION (PFCS::TREES)
                  (NIL O-P . O<)
                  ((ABNF::TREE-LIST-COUNT PFCS::TREES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABNF::TREE-LIST-COUNT PFCS::TREES)))
    ((NOT (CONSP PFCS::TREES))
     (FTY::RESERRP (PFCS::ABS-CONSTRAINT (CAR PFCS::TREES)))
     (O< (ABNF::TREE-LIST-COUNT (CDR PFCS::TREES))
         (ABNF::TREE-LIST-COUNT PFCS::TREES))))
   (PFCS::ABS-*-CONSTRAINT 1 :SYSTEM
                           . "projects/pfcs/syntax-abstraction"))
  ((JUSTIFICATION (PFCS::TREES)
                  (NIL O-P . O<)
                  ((ABNF::TREE-LIST-COUNT PFCS::TREES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABNF::TREE-LIST-COUNT PFCS::TREES)))
    ((NOT (CONSP PFCS::TREES))
     (FTY::RESERRP (PFCS::ABS-COMMA-CONSTRAINT (CAR PFCS::TREES)))
     (O< (ABNF::TREE-LIST-COUNT (CDR PFCS::TREES))
         (ABNF::TREE-LIST-COUNT PFCS::TREES))))
   (PFCS::ABS-*-COMMA-CONSTRAINT 1 :SYSTEM
                                 . "projects/pfcs/syntax-abstraction"))
  ((JUSTIFICATION (PFCS::TREES)
                  (NIL O-P . O<)
                  ((ABNF::TREE-LIST-COUNT PFCS::TREES)
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABNF::TREE-LIST-COUNT PFCS::TREES)))
    ((NOT (CONSP PFCS::TREES))
     (FTY::RESERRP (PFCS::ABS-DEFINITION (CAR PFCS::TREES)))
     (O< (ABNF::TREE-LIST-COUNT (CDR PFCS::TREES))
         (ABNF::TREE-LIST-COUNT PFCS::TREES))))
   (PFCS::ABS-*-DEFINITION 1 :SYSTEM
                           . "projects/pfcs/syntax-abstraction")))
 ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                 (NIL O-P . O<)
                 ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                  (NIL O-P . O<)
                  ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
    ((NOT (PFCS::TOKEN-STRINGP '"," PFCS::TOKEN))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-SEPARATOR '","
                                                  PFCS::TOKEN PFCS::INPUT)))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))
             (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-EXPRESSION (MV-NTH '1
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT))
                                                   (MV-NTH '2
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT)))))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-EXPRESSION (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))))
                            (MV-NTH '2
                                    (PFCS::PARSE-EXPRESSION (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT)))))
             (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))))
     (O< (PFCS::PARSIZE (MV-NTH '1
                                (PFCS::PARSE-EXPRESSION (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))))
                        (MV-NTH '2
                                (PFCS::PARSE-EXPRESSION (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT)))))
         (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT))))
   (PFCS::PARSE-*-COMMA-EXPRESSION 2 :SYSTEM . "projects/pfcs/parser"))
  ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                  (NIL O-P . O<)
                  ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
    ((NOT (PFCS::TOKEN-STRINGP '"," PFCS::TOKEN))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-SEPARATOR '","
                                                  PFCS::TOKEN PFCS::INPUT)))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))
             (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-IDENTIFIER (MV-NTH '1
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT))
                                                   (MV-NTH '2
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT)))))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-IDENTIFIER (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))))
                            (MV-NTH '2
                                    (PFCS::PARSE-IDENTIFIER (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT)))))
             (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))))
     (O< (PFCS::PARSIZE (MV-NTH '1
                                (PFCS::PARSE-IDENTIFIER (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))))
                        (MV-NTH '2
                                (PFCS::PARSE-IDENTIFIER (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT)))))
         (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT))))
   (PFCS::PARSE-*-COMMA-IDENTIFIER 2 :SYSTEM . "projects/pfcs/parser"))
  ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                  (NIL O-P . O<)
                  ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
    ((NOT (PFCS::TOKEN-STRINGP '"," PFCS::TOKEN))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-SEPARATOR '","
                                                  PFCS::TOKEN PFCS::INPUT)))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))
             (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
     (FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-CONSTRAINT (MV-NTH '1
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT))
                                                   (MV-NTH '2
                                                           (PFCS::PARSE-SEPARATOR '","
                                                                                  PFCS::TOKEN PFCS::INPUT)))))
     (NOT (< (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-CONSTRAINT (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))))
                            (MV-NTH '2
                                    (PFCS::PARSE-CONSTRAINT (MV-NTH '1
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT))
                                                            (MV-NTH '2
                                                                    (PFCS::PARSE-SEPARATOR '","
                                                                                           PFCS::TOKEN PFCS::INPUT)))))
             (PFCS::PARSIZE (MV-NTH '1
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT))
                            (MV-NTH '2
                                    (PFCS::PARSE-SEPARATOR '","
                                                           PFCS::TOKEN PFCS::INPUT)))))
     (O< (PFCS::PARSIZE (MV-NTH '1
                                (PFCS::PARSE-CONSTRAINT (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))))
                        (MV-NTH '2
                                (PFCS::PARSE-CONSTRAINT (MV-NTH '1
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT))
                                                        (MV-NTH '2
                                                                (PFCS::PARSE-SEPARATOR '","
                                                                                       PFCS::TOKEN PFCS::INPUT)))))
         (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT))))
   (PFCS::PARSE-*-COMMA-CONSTRAINT 2 :SYSTEM . "projects/pfcs/parser"))
  ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                  (NIL O-P . O<)
                  ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
    ((FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-DEFINITION PFCS::TOKEN PFCS::INPUT)))
     (O< (PFCS::PARSIZE (MV-NTH '1
                                (PFCS::PARSE-DEFINITION PFCS::TOKEN PFCS::INPUT))
                        (MV-NTH '2
                                (PFCS::PARSE-DEFINITION PFCS::TOKEN PFCS::INPUT)))
         (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT))))
   (PFCS::PARSE-*-DEFINITION 2 :SYSTEM . "projects/pfcs/parser"))
  ((JUSTIFICATION (PFCS::INPUT PFCS::TOKEN)
                  (NIL O-P . O<)
                  ((PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT)))
    ((FTY::RESERRP (MV-NTH '0
                           (PFCS::PARSE-CONSTRAINT PFCS::TOKEN PFCS::INPUT)))
     (O< (PFCS::PARSIZE (MV-NTH '1
                                (PFCS::PARSE-CONSTRAINT PFCS::TOKEN PFCS::INPUT))
                        (MV-NTH '2
                                (PFCS::PARSE-CONSTRAINT PFCS::TOKEN PFCS::INPUT)))
         (PFCS::PARSIZE PFCS::TOKEN PFCS::INPUT))))
   (PFCS::PARSE-*-CONSTRAINT 2 :SYSTEM . "projects/pfcs/parser")))
 ((JUSTIFICATION (MIN MAX)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                                  (UNARY-- (IFIX MIN))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I J)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1 (IFIX J))
                                   (UNARY-- (IFIX I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1 (IFIX J))
                          (UNARY-- (IFIX I))))))
    ((NOT (INTEGERP J))
     (< J (IFIX I))
     (O< (NFIX (BINARY-+ (BINARY-+ '1 (IFIX (BINARY-+ '-1 J)))
                         (UNARY-- (IFIX I))))
         (NFIX (BINARY-+ (BINARY-+ '1 (IFIX J))
                         (UNARY-- (IFIX I)))))))
   (FROM-TO-BY-DOWN 2
                    :SYSTEM . "projects/apply/loop-lemmas"))
  ((JUSTIFICATION (LOY HIY)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1 (IFIX HIY))
                                   (UNARY-- (IFIX LOY))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1 (IFIX HIY))
                          (UNARY-- (IFIX LOY))))))
    ((NOT (INTEGERP LOY))
     (NOT (INTEGERP HIY))
     (< HIY LOY)
     (O< (NFIX (BINARY-+ (BINARY-+ '1 (IFIX HIY))
                         (UNARY-- (IFIX (BINARY-+ '1 LOY)))))
         (NFIX (BINARY-+ (BINARY-+ '1 (IFIX HIY))
                         (UNARY-- (IFIX LOY)))))))
   (FIND-MINIMAL-LOGAND2 4 :SYSTEM
                         . "tau/bounders/elementary-bounders"))
  ((JUSTIFICATION (MIN MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                                   (UNARY-- (IFIX MIN))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                          (UNARY-- (IFIX MIN))))))
    ((< (IFIX MAX) (IFIX MIN))
     (O< (NFIX (BINARY-+ (BINARY-+ '1
                                   (IFIX (BINARY-+ '-1 (IFIX MAX))))
                         (UNARY-- (IFIX (IFIX MIN)))))
         (NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                         (UNARY-- (IFIX MIN)))))))
   (INTEGERS-FROM-TO-AUX 3 :SYSTEM
                         . "kestrel/utilities/integers-from-to"))
  ((JUSTIFICATION (MIN MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                                   (UNARY-- (IFIX MIN))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                          (UNARY-- (IFIX MIN))))))
    ((< (IFIX MAX) (IFIX MIN))
     (O< (NFIX (BINARY-+ (BINARY-+ '1 (IFIX (IFIX MAX)))
                         (UNARY-- (IFIX (BINARY-+ '1 (IFIX MIN))))))
         (NFIX (BINARY-+ (BINARY-+ '1 (IFIX MAX))
                         (UNARY-- (IFIX MIN)))))))
   (INTEGERS-FROM-TO 2 :SYSTEM
                     .
                     "kestrel/utilities/integers-from-to")))
 ((JUSTIFICATION (ABNF::INPUT)
                 (NIL O-P . O<)
                 ((LEN ABNF::INPUT) . :ALL))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-IN-EITHER-RANGE ABNF::MIN1 ABNF::MAX1
                                          ABNF::MIN2 ABNF::MAX2 ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-IN-EITHER-RANGE ABNF::MIN1 ABNF::MAX1
                                                   ABNF::MIN2 ABNF::MAX2 ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-IN-EITHER-RANGE 5 :SYSTEM
                                  .
                                  "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-BIT ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-BIT ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*BIT 1 :SYSTEM
                     .
                     "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-DIGIT ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-DIGIT ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*DIGIT 1 :SYSTEM
                       .
                       "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-HEXDIG ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-HEXDIG ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*HEXDIG 1 :SYSTEM
                        .
                        "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-DOT-1*BIT ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-DOT-1*BIT ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-DOT-1*BIT 1 :SYSTEM
                            .
                            "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-DOT-1*DIGIT ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-DOT-1*DIGIT ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-DOT-1*DIGIT 1 :SYSTEM
                              .
                              "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-DOT-1*HEXDIG ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-DOT-1*HEXDIG ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-DOT-1*HEXDIG 1 :SYSTEM
                               .
                               "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-WSP/VCHAR ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-WSP/VCHAR ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*WSP/VCHAR 1 :SYSTEM
                           .
                           "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-CWSP ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-CWSP ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*CWSP 1 :SYSTEM
                      .
                      "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-ALPHA/DIGIT/DASH ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-ALPHA/DIGIT/DASH ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-ALPHA/DIGIT/DASH 1 :SYSTEM
                                   .
                                   "projects/abnf/grammar-parser/executable"))
  ((JUSTIFICATION (ABNF::INPUT)
                  (NIL O-P . O<)
                  ((LEN ABNF::INPUT) . :ALL))
   (((O-P (LEN ABNF::INPUT)))
    ((MV-NTH '0
             (ABNF::PARSE-RULE-/-*CWSP-CNL ABNF::INPUT))
     (O< (LEN (MV-NTH '2
                      (ABNF::PARSE-RULE-/-*CWSP-CNL ABNF::INPUT)))
         (LEN ABNF::INPUT))))
   (ABNF::PARSE-*-RULE-/-*CWSP-CNL 1 :SYSTEM
                                   .
                                   "projects/abnf/grammar-parser/executable")))
 ((JUSTIFICATION (IRV::XS)
                 (NIL O-P . O<)
                 ((IRV::NUMBER-OF-CANDIDATES IRV::XS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (IRV::XS)
                  (NIL O-P . O<)
                  ((IRV::NUMBER-OF-CANDIDATES IRV::XS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (IRV::NUMBER-OF-CANDIDATES IRV::XS)))
    ((NOT (IRV::IRV-BALLOT-P IRV::XS))
     (NOT (CONSP IRV::CIDS))
     (NOT (CONSP IRV::XS))
     (EQUAL L
            (IRV::CANDIDATE-WITH-LEAST-NTH-PLACE-VOTES '0
                                                       (IRV::CANDIDATE-IDS IRV::XS)
                                                       IRV::XS))
     (O< (IRV::NUMBER-OF-CANDIDATES (IRV::ELIMINATE-CANDIDATE (IRV::CANDIDATE-WITH-LEAST-NTH-PLACE-VOTES '0
                                                                                                         (IRV::CANDIDATE-IDS IRV::XS)
                                                                                                         IRV::XS)
                                                              IRV::XS))
         (IRV::NUMBER-OF-CANDIDATES IRV::XS))))
   (IRV::NON-MAJ-IND-HINT 3 :SYSTEM
                          . "projects/irv/satisfied-criteria")))
 ((JUSTIFICATION (PROOF-CHECKER-ARRAY::ASSIGNMENT FORMULA)
                 (NIL O-P . O<)
                 ((PROOF-CHECKER-ARRAY::NUM-UNDEF FORMULA PROOF-CHECKER-ARRAY::ASSIGNMENT)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PROOF-CHECKER-ARRAY::ASSIGNMENT FORMULA)
                  (NIL O-P . O<)
                  ((PROOF-CHECKER-ARRAY::NUM-UNDEF FORMULA PROOF-CHECKER-ARRAY::ASSIGNMENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PROOF-CHECKER-ARRAY::NUM-UNDEF FORMULA
                                          PROOF-CHECKER-ARRAY::ASSIGNMENT)))
    ((NOT (MV-NTH '0
                  (PROOF-CHECKER-ARRAY::FIND-UNIT-CLAUSE FORMULA
                                                         PROOF-CHECKER-ARRAY::ASSIGNMENT)))
     (O< (PROOF-CHECKER-ARRAY::NUM-UNDEF FORMULA
                                         (CONS (MV-NTH '0
                                                       (PROOF-CHECKER-ARRAY::FIND-UNIT-CLAUSE FORMULA
                                                                                              PROOF-CHECKER-ARRAY::ASSIGNMENT))
                                               PROOF-CHECKER-ARRAY::ASSIGNMENT))
         (PROOF-CHECKER-ARRAY::NUM-UNDEF FORMULA
                                         PROOF-CHECKER-ARRAY::ASSIGNMENT))))
   (PROOF-CHECKER-ARRAY::UNIT-PROPAGATION 2 :SYSTEM
                                          .
                                          "projects/sat/proof-checker-array/rat-checker-new")))
 ((JUSTIFICATION (PROOF-CHECKER-ITP13::ASSIGNMENT FORMULA)
                 (NIL O-P . O<)
                 ((PROOF-CHECKER-ITP13::NUM-UNDEF FORMULA PROOF-CHECKER-ITP13::ASSIGNMENT)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PROOF-CHECKER-ITP13::ASSIGNMENT FORMULA)
                  (NIL O-P . O<)
                  ((PROOF-CHECKER-ITP13::NUM-UNDEF FORMULA PROOF-CHECKER-ITP13::ASSIGNMENT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PROOF-CHECKER-ITP13::NUM-UNDEF FORMULA
                                          PROOF-CHECKER-ITP13::ASSIGNMENT)))
    ((NOT (MV-NTH '0
                  (PROOF-CHECKER-ITP13::FIND-UNIT-CLAUSE FORMULA
                                                         PROOF-CHECKER-ITP13::ASSIGNMENT)))
     (O< (PROOF-CHECKER-ITP13::NUM-UNDEF FORMULA
                                         (CONS (MV-NTH '0
                                                       (PROOF-CHECKER-ITP13::FIND-UNIT-CLAUSE FORMULA
                                                                                              PROOF-CHECKER-ITP13::ASSIGNMENT))
                                               PROOF-CHECKER-ITP13::ASSIGNMENT))
         (PROOF-CHECKER-ITP13::NUM-UNDEF FORMULA
                                         PROOF-CHECKER-ITP13::ASSIGNMENT))))
   (PROOF-CHECKER-ITP13::UNIT-PROPAGATION 2 :SYSTEM
                                          .
                                          "projects/sat/proof-checker-itp13/rat-checker")))
 ((JUSTIFICATION (X86ISA::ENTRY-NUMBER)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '512
                                  (UNARY-- X86ISA::ENTRY-NUMBER)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X86ISA::ENTRY-NUMBER)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '512
                                   (UNARY-- X86ISA::ENTRY-NUMBER)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '512
                          (UNARY-- X86ISA::ENTRY-NUMBER)))))
    ((NOT (INTEGERP X86ISA::ENTRY-NUMBER))
     (< X86ISA::ENTRY-NUMBER '0)
     (NOT (UNSIGNED-BYTE-P '40
                           (BINARY-+ '1 X86ISA::PDPT-BASE-ADDR)))
     (NOT (UNSIGNED-BYTE-P '10
                           (BINARY-+ '1 X86ISA::ENTRY-NUMBER)))
     (NOT (UNSIGNED-BYTE-P '52
                           (BINARY-+ '8 X86ISA::ENTRY-ADDR)))
     (NOT (< X86ISA::ENTRY-NUMBER '512))
     (O< (NFIX (BINARY-+ '512
                         (UNARY-- (BINARY-+ '1 X86ISA::ENTRY-NUMBER))))
         (NFIX (BINARY-+ '512
                         (UNARY-- X86ISA::ENTRY-NUMBER))))))
   (X86ISA::CONSTRUCT-PML4-TABLE 4 :SYSTEM
                                 .
                                 "projects/x86isa/tools/execution/init-page-tables"))
  ((JUSTIFICATION (X86ISA::ENTRY-NUMBER)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '512
                                   (UNARY-- X86ISA::ENTRY-NUMBER)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '512
                          (UNARY-- X86ISA::ENTRY-NUMBER)))))
    ((NOT (INTEGERP X86ISA::ENTRY-NUMBER))
     (< X86ISA::ENTRY-NUMBER '0)
     (NOT (UNSIGNED-BYTE-P '22
                           (BINARY-+ '1 X86ISA::PAGE-BASE-ADDR)))
     (NOT (UNSIGNED-BYTE-P '10
                           (BINARY-+ '1 X86ISA::ENTRY-NUMBER)))
     (NOT (UNSIGNED-BYTE-P '52
                           (BINARY-+ '8 X86ISA::ENTRY-ADDR)))
     (NOT (< X86ISA::ENTRY-NUMBER '512))
     (O< (NFIX (BINARY-+ '512
                         (UNARY-- (BINARY-+ '1 X86ISA::ENTRY-NUMBER))))
         (NFIX (BINARY-+ '512
                         (UNARY-- X86ISA::ENTRY-NUMBER))))))
   (X86ISA::CONSTRUCT-PDP-TABLE 4 :SYSTEM
                                .
                                "projects/x86isa/tools/execution/init-page-tables")))
 ((JUSTIFICATION (X86ISA::ADDR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '281474976710656
                                  (UNARY-- X86ISA::ADDR)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X86ISA::ADDR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '281474976710656
                                   (UNARY-- X86ISA::ADDR)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '281474976710656
                          (UNARY-- X86ISA::ADDR)))))
    ((MV-NTH '0
             (X86ISA::RML08 X86ISA::ADDR ':R
                            X86ISA::X86))
     (EQUAL (MV-NTH '1
                    (X86ISA::RML08 X86ISA::ADDR ':R
                                   X86ISA::X86))
            '0)
     (NOT (X86ISA::CANONICAL-ADDRESS-P$INLINE (BINARY-+ '1 X86ISA::ADDR)))
     (O< (NFIX (BINARY-+ '281474976710656
                         (UNARY-- (BINARY-+ '1 X86ISA::ADDR))))
         (NFIX (BINARY-+ '281474976710656
                         (UNARY-- X86ISA::ADDR))))))
   (X86ISA::READ-CSTR-FROM-MEMORY1 3 :SYSTEM
                                   .
                                   "projects/x86isa/machine/instructions/pio")))
 ((JUSTIFICATION (X86ISA::START-REG)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '16
                                  (UNARY-- X86ISA::START-REG)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X86ISA::START-REG)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '16
                                   (UNARY-- X86ISA::START-REG)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '16
                          (UNARY-- X86ISA::START-REG)))))
    ((NOT (UNSIGNED-BYTE-P '4 X86ISA::START-REG))
     (EQUAL X86ISA::CNT '0)
     (MV-NTH '0
             (X86ISA::RME128$INLINE X86ISA::PROC-MODE
                                    X86ISA::START-ADDR X86ISA::SEG-REG ':R
                                    X86ISA::INST-AC? X86ISA::X86))
     (EQUAL (BINARY-+ '-1 X86ISA::CNT) '0)
     (O< (NFIX (BINARY-+ '16
                         (UNARY-- (BINARY-+ '1 X86ISA::START-REG))))
         (NFIX (BINARY-+ '16
                         (UNARY-- X86ISA::START-REG))))))
   (X86ISA::READ-XMM-REGS 7 :SYSTEM
                          .
                          "projects/x86isa/machine/instructions/x87")))
 ((JUSTIFICATION (X86ISA::PTR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '140737488355328
                                  (UNARY-- X86ISA::PTR)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X86ISA::PTR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '140737488355328
                                   (UNARY-- X86ISA::PTR)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '140737488355328
                          (UNARY-- X86ISA::PTR)))))
    ((NOT (SIGNED-BYTE-P '48 X86ISA::PTR))
     (MV-NTH '0
             (X86ISA::RML08 X86ISA::PTR ':R
                            X86ISA::X86))
     (EQUAL '0
            (MV-NTH '1
                    (X86ISA::RML08 X86ISA::PTR ':R
                                   X86ISA::X86)))
     (O< (NFIX (BINARY-+ '140737488355328
                         (UNARY-- (BINARY-+ '1 X86ISA::PTR))))
         (NFIX (BINARY-+ '140737488355328
                         (UNARY-- X86ISA::PTR))))))
   (X86ISA::READ-MEMORY-ZERO-TERMINATED 3 :SYSTEM
                                        .
                                        "projects/x86isa/machine/environment")))
 ((JUSTIFICATION (I X86ISA::BITS)
                 (NIL O-P . O<)
                 ((ACL2-COUNT (BINARY-+ X86ISA::BITS (UNARY-- I)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (I X86ISA::BITS)
                  (NIL O-P . O<)
                  ((ACL2-COUNT (BINARY-+ X86ISA::BITS (UNARY-- I)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (BINARY-+ X86ISA::BITS (UNARY-- I)))))
    ((NOT (INTEGERP I))
     (< I '0)
     (NOT (INTEGERP X86ISA::BITS))
     (< X86ISA::BITS '0)
     (< X86ISA::BITS I)
     (EQUAL X86ISA::BITS I)
     (LOGBITP I N)
     (O< (ACL2-COUNT (BINARY-+ X86ISA::BITS (UNARY-- (BINARY-+ '1 I))))
         (ACL2-COUNT (BINARY-+ X86ISA::BITS (UNARY-- I))))))
   (X86ISA::TZCNT 3 :SYSTEM
                  .
                  "projects/x86isa/machine/instructions/bit")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'FIND-MATCHES)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'FIND-MATCHES)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'FIND-MATCHES)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'FIND-MATCHES)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'FIND-MATCHES)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'FIND-MATCHES)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'FIND-MATCHES)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL 'QUOTE (CAR X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'FIND-MATCHES)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (FIND-MATCHES-FLG 4 :SYSTEM
                     . "clause-processors/find-matching")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((INTEGER-LENGTH X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH X)))
    ((NOT (INTEGERP X))
     (EQUAL X '0)
     (LOGBITP '0 X)
     (O< (INTEGER-LENGTH (LOGCDR$INLINE X))
         (INTEGER-LENGTH X))))
   (BITOPS::TRAILING-0-COUNT 1 :SYSTEM
                             . "centaur/bitops/trailing-0-count"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH X)))
    ((EQUAL X '-1)
     (NOT (LOGBITP '0 X))
     (O< (INTEGER-LENGTH (LOGCDR$INLINE X))
         (INTEGER-LENGTH X))))
   (BITOPS::TRAILING-1-COUNT 1 :SYSTEM
                             . "centaur/bitops/trailing-0-count"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH N)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH N)))
    ((EQUAL '0 (IFIX N))
     (EQUAL N '-1)
     (O< (INTEGER-LENGTH (LOGCDR$INLINE N))
         (INTEGER-LENGTH N))))
   (GL::I2V 1 :SYSTEM . "centaur/gl/bvecs"))
  ((JUSTIFICATION (I)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH I)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH I)))
    ((NOT (INTEGERP I))
     (EQUAL I '0)
     (EQUAL I '-1)
     (O< (INTEGER-LENGTH (LOGCDR$INLINE I))
         (INTEGER-LENGTH I))))
   (BITOPS::INTEGER-LENGTH-IND 1 :SYSTEM
                               . "centaur/bitops/ihsext-basics")
   (FGL::INT->BFRLIST :SYSTEM . "centaur/fgl/bfr-arithmetic")
   (FGL::INT->AABFLIST :SYSTEM
                       . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH X)))
    ((EQUAL (LIFIX$INLINE X) '0)
     (EQUAL (LIFIX$INLINE X) '-1)
     (O< (INTEGER-LENGTH (FGL::INTCDR (LIFIX$INLINE X)))
         (INTEGER-LENGTH X))))
   (FGL::INT->BOOLS 1 :SYSTEM . "centaur/fgl/arith-base"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((INTEGER-LENGTH X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (INTEGER-LENGTH X)))
    ((NOT (INTEGERP X))
     (NOT (< '0 X))
     (O< (INTEGER-LENGTH (LOGTAIL$INLINE '1 X))
         (INTEGER-LENGTH X))))
   (X86ISA::BITCOUNT8$INLINE 1 :SYSTEM
                             .
                             "projects/x86isa/machine/rflags-spec")))
 ((JUSTIFICATION (TREE)
                 (NIL O-P . O<)
                 ((SIZE-LT TREE) IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (TREE)
                  (NIL O-P . O<)
                  ((SIZE-LT TREE) IF MV-LIST RETURN-LAST))
   (((O-P (SIZE-LT TREE)))
    ((NOT (CONSP TREE))
     (O< (SIZE-LT (DELETE-MIN-LT TREE))
         (SIZE-LT TREE))))
   (LTREE-TO-LIST 1 :SYSTEM
                  .
                  "projects/leftist-trees/leftist-tree-sort")))
 ((JUSTIFICATION (TREE2 TREE1)
                 (NIL O-P . O<)
                 ((BINARY-+ (ACL2-COUNT TREE1)
                            (ACL2-COUNT TREE2))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (L2 L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT L1)
                             (ACL2-COUNT L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT L1)
                    (ACL2-COUNT L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (TERM-ORDER (CAR L1) (CAR L2))
     (O< (BINARY-+ (ACL2-COUNT L1)
                   (ACL2-COUNT (CDR L2)))
         (BINARY-+ (ACL2-COUNT L1)
                   (ACL2-COUNT L2))))
    ((NOT (CONSP L1))
     (NOT (CONSP L2))
     (NOT (TERM-ORDER (CAR L1) (CAR L2)))
     (O< (BINARY-+ (ACL2-COUNT (CDR L1))
                   (ACL2-COUNT L2))
         (BINARY-+ (ACL2-COUNT L1)
                   (ACL2-COUNT L2)))))
   (MERGE-TERM-ORDER 2))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT X) (ACL2-COUNT Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT X)
                    (ACL2-COUNT Y))))
    ((IF (IF (CONSP X) 'NIL 'T)
         (IF (CONSP Y) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (CDR X))
                   (ACL2-COUNT (CDR Y)))
         (BINARY-+ (ACL2-COUNT X)
                   (ACL2-COUNT Y)))))
   (CDR2-IND 2 :SYSTEM . "centaur/misc/nth-equiv")
   (FGL::BFR-ITE-BUU-FN-AUX :SYSTEM . "centaur/fgl/bfr-arithmetic")
   (FGL::AABF-ITE-BUU-FN-AUX :SYSTEM
                             . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (ZS YS)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT YS)
                             (ACL2-COUNT ZS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT YS)
                    (ACL2-COUNT ZS))))
    ((IF (IF (CONSP YS) 'NIL 'T)
         (IF (CONSP ZS) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (MV-NTH '1
                                       (IF (CONSP YS)
                                           (CONS (CAR YS) (CONS (CDR YS) 'NIL))
                                         '(NIL NIL))))
                   (ACL2-COUNT (MV-NTH '1
                                       (IF (CONSP ZS)
                                           (CONS (CAR ZS) (CONS (CDR ZS) 'NIL))
                                         '(NIL NIL)))))
         (BINARY-+ (ACL2-COUNT YS)
                   (ACL2-COUNT ZS)))))
   (Q-ITE-LIST 3 :SYSTEM . "centaur/ubdds/param"))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT X) (ACL2-COUNT Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT X)
                    (ACL2-COUNT Y))))
    ((IF (IF (CONSP X) 'NIL 'T)
         (IF (CONSP Y) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (QCDR$INLINE X))
                   (ACL2-COUNT (QCDR$INLINE Y)))
         (BINARY-+ (ACL2-COUNT X)
                   (ACL2-COUNT Y))))
    ((IF (IF (CONSP X) 'NIL 'T)
         (IF (CONSP Y) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (QCAR$INLINE X))
                   (ACL2-COUNT (QCAR$INLINE Y)))
         (BINARY-+ (ACL2-COUNT X)
                   (ACL2-COUNT Y)))))
   (TWO-BDD-IND 2
                :SYSTEM . "centaur/aig/bddify-correct"))
  ((JUSTIFICATION (GL::V0 GL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT GL::V1)
                             (ACL2-COUNT GL::V0))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT GL::V1)
                    (ACL2-COUNT GL::V0))))
    ((IF (IF (CONSP GL::V1) 'NIL 'T)
         (IF (CONSP GL::V0) 'NIL 'T)
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (MV-NTH '1
                                       (CONS (CAR GL::V1)
                                             (CONS (CDR GL::V1) 'NIL))))
                   (ACL2-COUNT (MV-NTH '1
                                       (CONS (CAR GL::V0)
                                             (CONS (CDR GL::V0) 'NIL)))))
         (BINARY-+ (ACL2-COUNT GL::V1)
                   (ACL2-COUNT GL::V0)))))
   (GL::BFR-ITE-BVV-FN-AUX 3 :SYSTEM
                           . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-ITE-BVV-FN-AUX :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (GL::V0 GL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT GL::V1)
                             (ACL2-COUNT GL::V0))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT GL::V1)
                    (ACL2-COUNT GL::V0))))
    ((IF (MV-NTH '2 (GL::FIRST/REST/END GL::V1))
         (MV-NTH '2 (GL::FIRST/REST/END GL::V0))
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (MV-NTH '1 (GL::FIRST/REST/END GL::V1)))
                   (ACL2-COUNT (MV-NTH '1
                                       (GL::FIRST/REST/END GL::V0))))
         (BINARY-+ (ACL2-COUNT GL::V1)
                   (ACL2-COUNT GL::V0)))))
   (GL::BFR-ITE-BSS-FN-AUX 3 :SYSTEM
                           . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-ITE-BSS-FN-AUX :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (LST2 LST1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT LST1)
                             (ACL2-COUNT LST2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT LST1)
                    (ACL2-COUNT LST2))))
    ((NOT (CONSP LST1))
     (NOT (CONSP LST2))
     (O< (BINARY-+ (ACL2-COUNT (CDR LST1))
                   (ACL2-COUNT (CDR LST2)))
         (BINARY-+ (ACL2-COUNT LST1)
                   (ACL2-COUNT LST2)))))
   (LOOP$-AS-CDR-CDR 2
                     :SYSTEM . "projects/apply/loop-lemmas"))
  ((JUSTIFICATION (FGL::V0 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT FGL::V1)
                             (ACL2-COUNT FGL::V0))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT FGL::V1)
                    (ACL2-COUNT FGL::V0))))
    ((IF (MV-NTH '2
                 (FGL::AABF-FIRST/REST/END FGL::V1))
         (MV-NTH '2
                 (FGL::AABF-FIRST/REST/END FGL::V0))
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (MV-NTH '1
                                       (FGL::AABF-FIRST/REST/END FGL::V1)))
                   (ACL2-COUNT (MV-NTH '1
                                       (FGL::AABF-FIRST/REST/END FGL::V0))))
         (BINARY-+ (ACL2-COUNT FGL::V1)
                   (ACL2-COUNT FGL::V0)))))
   (FGL::AABF-ITE-BSS-FN-AUX 4 :SYSTEM
                             . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (FGL::V0 FGL::V1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT FGL::V1)
                             (ACL2-COUNT FGL::V0))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT FGL::V1)
                    (ACL2-COUNT FGL::V0))))
    ((IF (MV-NTH '2
                 (FGL::BFR-FIRST/REST/END FGL::V1))
         (MV-NTH '2
                 (FGL::BFR-FIRST/REST/END FGL::V0))
       'NIL)
     (O< (BINARY-+ (ACL2-COUNT (MV-NTH '1
                                       (FGL::BFR-FIRST/REST/END FGL::V1)))
                   (ACL2-COUNT (MV-NTH '1
                                       (FGL::BFR-FIRST/REST/END FGL::V0))))
         (BINARY-+ (ACL2-COUNT FGL::V1)
                   (ACL2-COUNT FGL::V0)))))
   (FGL::BFR-ITE-BSS-FN-AUX 4
                            :SYSTEM . "centaur/fgl/bfr-arithmetic"))
  ((JUSTIFICATION (KEYED-ARGS NON-KEYED-ARGS)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT NON-KEYED-ARGS)
                             (ACL2-COUNT KEYED-ARGS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT NON-KEYED-ARGS)
                    (ACL2-COUNT KEYED-ARGS))))
    ((NOT (CONSP NON-KEYED-ARGS))
     (O< (BINARY-+ (ACL2-COUNT (CDR NON-KEYED-ARGS))
                   (ACL2-COUNT KEYED-ARGS))
         (BINARY-+ (ACL2-COUNT NON-KEYED-ARGS)
                   (ACL2-COUNT KEYED-ARGS))))
    ((CONSP NON-KEYED-ARGS)
     (NOT (CONSP KEYED-ARGS))
     (O< (BINARY-+ (ACL2-COUNT NON-KEYED-ARGS)
                   (ACL2-COUNT (CDR KEYED-ARGS)))
         (BINARY-+ (ACL2-COUNT NON-KEYED-ARGS)
                   (ACL2-COUNT KEYED-ARGS)))))
   (FIX-ARGS-ORDER-AND-REMOVE-KEYS 3 :SYSTEM
                                   . "tools/define-keyed-function"))
  ((JUSTIFICATION (CGEN::L2 CGEN::L1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT CGEN::L1)
                             (ACL2-COUNT CGEN::L2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT CGEN::L1)
                    (ACL2-COUNT CGEN::L2))))
    ((NOT (CONSP CGEN::L1))
     (NOT (CONSP CGEN::L2))
     (SYMBOL< (CAR (CAR CGEN::L1))
              (CAR (CAR CGEN::L2)))
     (O< (BINARY-+ (ACL2-COUNT CGEN::L1)
                   (ACL2-COUNT (CDR CGEN::L2)))
         (BINARY-+ (ACL2-COUNT CGEN::L1)
                   (ACL2-COUNT CGEN::L2))))
    ((NOT (CONSP CGEN::L1))
     (NOT (CONSP CGEN::L2))
     (NOT (SYMBOL< (CAR (CAR CGEN::L1))
                   (CAR (CAR CGEN::L2))))
     (O< (BINARY-+ (ACL2-COUNT (CDR CGEN::L1))
                   (ACL2-COUNT CGEN::L2))
         (BINARY-+ (ACL2-COUNT CGEN::L1)
                   (ACL2-COUNT CGEN::L2)))))
   (CGEN::MERGE-CAR-SYMBOL< 2 :SYSTEM . "acl2s/cgen/simple-search"))
  ((JUSTIFICATION (TREE2 TREE1)
                  (NIL O-P . O<)
                  ((BINARY-+ (ACL2-COUNT TREE1)
                             (ACL2-COUNT TREE2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (ACL2-COUNT TREE1)
                    (ACL2-COUNT TREE2))))
    ((IS-EMPTY-LT TREE2)
     (IS-EMPTY-LT TREE1)
     (LEXORDER (ROOT-LT TREE1)
               (ROOT-LT TREE2))
     (O< (BINARY-+ (ACL2-COUNT TREE1)
                   (ACL2-COUNT (RIGHT-LT TREE2)))
         (BINARY-+ (ACL2-COUNT TREE1)
                   (ACL2-COUNT TREE2))))
    ((IS-EMPTY-LT TREE2)
     (IS-EMPTY-LT TREE1)
     (NOT (LEXORDER (ROOT-LT TREE1)
                    (ROOT-LT TREE2)))
     (O< (BINARY-+ (ACL2-COUNT (RIGHT-LT TREE1))
                   (ACL2-COUNT TREE2))
         (BINARY-+ (ACL2-COUNT TREE1)
                   (ACL2-COUNT TREE2)))))
   (MERGE-LT 2 :SYSTEM
             .
             "projects/leftist-trees/leftist-tree-defuns")))
 ((JUSTIFICATION (STR IDX)
                 (NIL O-P . O<)
                 ((STRING-INDEX-MEASURE IDX STR)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STR IDX)
                  (NIL O-P . O<)
                  ((STRING-INDEX-MEASURE IDX STR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (STRING-INDEX-MEASURE IDX STR)))
    ((STRING-INDEX-END IDX STR)
     (NOT (EQUAL (CHAR STR IDX) '#\-))
     (IF LAST (IF (STRING-INDEX-END (BINARY-+ '1 IDX) STR)
                  'NIL
                (NOT (EQUAL (CHAR STR (BINARY-+ '1 IDX))
                            '#\])))
       'NIL)
     (O< (STRING-INDEX-MEASURE (BINARY-+ '1 IDX)
                               STR)
         (STRING-INDEX-MEASURE IDX STR)))
    ((STRING-INDEX-END IDX STR)
     (NOT (EQUAL (CHAR STR IDX) '#\-))
     (NOT LAST)
     (STRING-INDEX-END (BINARY-+ '1 IDX) STR)
     (EQUAL (CHAR STR (BINARY-+ '1 IDX))
            '#\])
     (NOT (CHARACTERP LAST))
     (O< (STRING-INDEX-MEASURE (BINARY-+ '2 IDX)
                               STR)
         (STRING-INDEX-MEASURE IDX STR)))
    ((STRING-INDEX-END IDX STR)
     (EQUAL (CHAR STR IDX) '#\])
     (EQUAL (CHAR STR IDX) '#\-)
     (O< (STRING-INDEX-MEASURE (BINARY-+ '1 IDX)
                               STR)
         (STRING-INDEX-MEASURE IDX STR))))
   (PARSE-BRACKET-INNER 4 :SYSTEM
                        . "projects/regex/regex-parse-bracket"))
  ((JUSTIFICATION (STR IDX)
                  (NIL O-P . O<)
                  ((STRING-INDEX-MEASURE IDX STR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (STRING-INDEX-MEASURE IDX STR)))
    ((STRING-INDEX-PAST-END IDX STR)
     (MV-NTH '0
             (MATCH-REGEX-AT-CHAR REGEX STR UNTRANS-STR IDX))
     (EQUAL IDX (LENGTH STR))
     (O< (STRING-INDEX-MEASURE (BINARY-+ '1 IDX)
                               STR)
         (STRING-INDEX-MEASURE IDX STR))))
   (MATCH-REGEX-FUN 4
                    :SYSTEM . "projects/regex/regex-exec"))
  ((JUSTIFICATION (STR IDX)
                  (NIL O-P . O<)
                  ((STRING-INDEX-MEASURE IDX STR)
                   IF MV-LIST RETURN-LAST))
   (((O-P (STRING-INDEX-MEASURE IDX STR)))
    ((STRING-INDEX-END IDX STR)
     (O< (STRING-INDEX-MEASURE (BINARY-+ '1 IDX)
                               STR)
         (STRING-INDEX-MEASURE IDX STR))))
   (FIXED-STRING-PARSE 6 :SYSTEM
                       . "projects/regex/regex-parse")))
 ((JUSTIFICATION (CLASSES)
                 (NIL O-P . O<)
                 ((IF (NULL CLASSES)
                      '0
                    (BINARY-+ '1 (ACL2-COUNT CLASSES)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (LST)
                  (NIL O-P . O<)
                  ((IF (NULL LST)
                       '0
                     (BINARY-+ '1 (ACL2-COUNT LST)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL LST 'NIL)
              '0
            (BINARY-+ '1 (ACL2-COUNT LST)))))
    ((EQUAL LST 'NIL)
     (EQUAL RUNE (CAR (CDR (CAR LST))))
     (O< (IF (EQUAL (CDR LST) 'NIL)
             '0
           (BINARY-+ '1 (ACL2-COUNT (CDR LST))))
         (IF (EQUAL LST 'NIL)
             '0
           (BINARY-+ '1 (ACL2-COUNT LST))))))
   (FIND-RUNED-LEMMA 2 :SYSTEM . "acl2s/defunc"))
  ((JUSTIFICATION (CLASSES)
                  (NIL O-P . O<)
                  ((IF (NULL CLASSES)
                       '0
                     (BINARY-+ '1 (ACL2-COUNT CLASSES)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL CLASSES 'NIL)
              '0
            (BINARY-+ '1 (ACL2-COUNT CLASSES)))))
    ((EQUAL CLASSES 'NIL)
     (EQUAL RUNE (CDR (CAR MAPPING-PAIRS)))
     (O< (IF (EQUAL (CDR CLASSES) 'NIL)
             '0
           (BINARY-+ '1
                     (ACL2-COUNT (CDR CLASSES))))
         (IF (EQUAL CLASSES 'NIL)
             '0
           (BINARY-+ '1 (ACL2-COUNT CLASSES))))))
   (TRUNCATED-CLASS 3 :SYSTEM . "acl2s/defunc")))
 ((JUSTIFICATION (CGEN::I CGEN::SIZE)
                 (NIL LEXP . L<)
                 ((NFIX (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CGEN::I CGEN::SIZE)
                  (NIL LEXP . L<)
                  ((NFIX (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I)))
                   IF MV-LIST RETURN-LAST))
   (((LEXP (NFIX (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I)))))
    ((NOT (INTEGERP (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I))))
     (NOT (< '0
             (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I))))
     (L< (NFIX (BINARY-+ CGEN::SIZE
                         (UNARY-- (BINARY-+ '1 CGEN::I))))
         (NFIX (BINARY-+ CGEN::SIZE (UNARY-- CGEN::I))))))
   (CGEN::G$->VAR-QUOTIENT-ALST1 4 :SYSTEM
                                 . "acl2s/cgen/simple-graph-array")))
 ((JUSTIFICATION (I J)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '1 (BINARY-+ J (UNARY-- I))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (START2 END2)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1
                                   (BINARY-+ END2 (UNARY-- START2))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1
                          (BINARY-+ END2 (UNARY-- START2))))))
    ((NOT (INTEGERP END2))
     (NOT (INTEGERP START2))
     (NOT (< (BINARY-+ START2 (LENGTH SEQ1))
             END2))
     (O< (NFIX (BINARY-+ '1
                         (BINARY-+ END2 (UNARY-- (BINARY-+ '1 START2)))))
         (NFIX (BINARY-+ '1
                         (BINARY-+ END2 (UNARY-- START2)))))))
   (SEARCH-FROM-END 5))
  ((JUSTIFICATION (I J)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1 (BINARY-+ J (UNARY-- I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1
                          (BINARY-+ J (UNARY-- I))))))
    ((NOT (INTEGERP I))
     (< I '0)
     (NOT (INTEGERP J))
     (< J '0)
     (< J I)
     (O< (NFIX (BINARY-+ '1
                         (BINARY-+ (BINARY-+ '-1 J)
                                   (UNARY-- I))))
         (NFIX (BINARY-+ '1
                         (BINARY-+ J (UNARY-- I)))))))
   (RTL::SUM-ERR-RNE 5 :SYSTEM . "rtl/rel11/lib/round")))
 ((JUSTIFICATION (Y X)
                 (NIL O-P . O<)
                 ((ABS (FLOOR X Y))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((ABS (FLOOR X Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABS (FLOOR X Y))))
    ((NOT (RATIONALP X))
     (NOT (RATIONALP Y))
     (EQUAL Y '0)
     (NOT (< Y '0))
     (NOT (< '0 X))
     (O< (ABS (FLOOR (BINARY-+ X Y) Y))
         (ABS (FLOOR X Y))))
    ((NOT (RATIONALP X))
     (NOT (RATIONALP Y))
     (EQUAL Y '0)
     (NOT (< Y '0))
     (< '0 X)
     (< Y X)
     (O< (ABS (FLOOR (BINARY-+ X (UNARY-- Y)) Y))
         (ABS (FLOOR X Y))))
    ((NOT (RATIONALP X))
     (NOT (RATIONALP Y))
     (EQUAL Y '0)
     (< Y '0)
     (NOT (< X '0))
     (O< (ABS (FLOOR (BINARY-+ X Y) Y))
         (ABS (FLOOR X Y))))
    ((NOT (RATIONALP X))
     (NOT (RATIONALP Y))
     (EQUAL Y '0)
     (< Y '0)
     (< X '0)
     (< X Y)
     (O< (ABS (FLOOR (BINARY-+ X (UNARY-- Y)) Y))
         (ABS (FLOOR X Y)))))
   (FLOOR-REC 2 :SYSTEM
              .
              "arithmetic-5/lib/floor-mod/floor-mod")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((POWER-OF-2-MEASURE X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((POWER-OF-2-MEASURE X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (POWER-OF-2-MEASURE X)))
    ((NOT (RATIONALP X))
     (NOT (< '0 X))
     (NOT (< X '1))
     (O< (POWER-OF-2-MEASURE (BINARY-* '2 X))
         (POWER-OF-2-MEASURE X)))
    ((NOT (RATIONALP X))
     (NOT (< '0 X))
     (< X '1)
     (< X '2)
     (O< (POWER-OF-2-MEASURE (BINARY-* '1/2 X))
         (POWER-OF-2-MEASURE X))))
   (POWER-OF-2-HELPER 1 :SYSTEM
                      .
                      "arithmetic-5/lib/basic-ops/building-blocks")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-EXPRLIST-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-EXPRLIST-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-EXPRLIST-COUNT VL2014::X)))
    ((NOT (MV-NTH '0
                  (VL2014::VL-ELIM-NESTED-CONCATS-PASS VL2014::X)))
     (O< (VL2014::VL-EXPRLIST-COUNT (MV-NTH '1
                                            (VL2014::VL-ELIM-NESTED-CONCATS-PASS VL2014::X)))
         (VL2014::VL-EXPRLIST-COUNT VL2014::X))))
   (VL2014::VL-ELIM-NESTED-CONCATS 1 :SYSTEM
                                   . "centaur/vl2014/mlib/clean-concats")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-STMT-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-STMT-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-STMT-COUNT VL2014::X)))
    ((VL2014::VL-ATOMICSTMT-P VL2014::X)
     (NOT (VL2014::VL-IFSTMT-P$INLINE VL2014::X))
     (O< (VL2014::VL-STMT-COUNT (VL2014::VL-IFSTMT->FALSEBRANCH$INLINE VL2014::X))
         (VL2014::VL-STMT-COUNT VL2014::X)))
    ((VL2014::VL-ATOMICSTMT-P VL2014::X)
     (NOT (VL2014::VL-IFSTMT-P$INLINE VL2014::X))
     (O< (VL2014::VL-STMT-COUNT (VL2014::VL-IFSTMT->TRUEBRANCH$INLINE VL2014::X))
         (VL2014::VL-STMT-COUNT VL2014::X))))
   (VL2014::VL-EDGESYNTH-FLATTEN-DATA-IFS 5 :SYSTEM
                                          .
                                          "centaur/vl2014/transforms/always/edgesynth")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((LEN (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X)))
     (O< (LEN (VL2014::VL-COMMENTMAP-FIX$INLINE (CDR (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X))))
         (LEN (VL2014::VL-COMMENTMAP-FIX$INLINE VL2014::X)))))
   (VL2014::VL-REMOVE-EMPTY-COMMENTMAP-ENTRIES-EXEC 2 :SYSTEM
                                                    .
                                                    "centaur/vl2014/mlib/comment-writer")))
 ((JUSTIFICATION (VL2014::I VL2014::N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (NFIX VL2014::N)
                                  (UNARY-- (NFIX VL2014::I))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N STR::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX STR::XL)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX STR::XL)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX STR::XL)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (NFIX STR::XL)
                       (UNARY-- (NFIX N)))))
     (O< (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX N)))))))
   (STR::REVAPPEND-CHARS-AUX 4 :SYSTEM . "std/strings/cat-base")
   (VL2014::JP-COL-AFTER-PRINTING-STRING-AUX :SYSTEM . "centaur/vl2014/mlib/json")
   (VL::JP-COL-AFTER-PRINTING-STRING-AUX :SYSTEM . "centaur/vl/mlib/json")
   (AIGNET::AIGNET-OUTS->LITS :SYSTEM . "centaur/aignet/cube-sat")
   (FGL::FGARRAY-COMPRESS$A-AUX :SYSTEM . "centaur/fgl/array-alist")
   (SV::SVTV-COMPUTE-INPUT-PHASES :SYSTEM
                                  . "centaur/sv/svtv/svtv-stobj-defsvtv")
   (SV::SVTV-DEBUG-WRITEPHASES :SYSTEM . "centaur/sv/svtv/debug")
   (SV::SVTV-COMPILE :SYSTEM . "centaur/sv/svtv/process")
   (SV::SVTV-PRECOMPOSE-PHASES-REC :SYSTEM
                                   . "centaur/sv/svtv/compose-phases")
   (VL::VL-MAYBE-ESCAPE-STRING :SYSTEM . "centaur/vl/mlib/writer")
   (VL::VL-ECHARLIST-FROM-STR-AUX :SYSTEM . "centaur/vl/util/echars")
   (VL2014::VL-MAYBE-ESCAPE-STRING :SYSTEM . "centaur/vl2014/mlib/writer")
   (VL2014::VL-ECHARLIST-FROM-STR-AUX :SYSTEM . "centaur/vl2014/util/echars")
   (AIGNET::FIND-MAX-LEVEL :SYSTEM . "centaur/aignet/balance")
   (AIGNET::BITARR-REMOVE-MARKED :SYSTEM . "centaur/aignet/fraig")
   (AIGNET::CLASSES-JOIN-PO-PAIRS :SYSTEM
                                  . "centaur/aignet/equiv-classes")
   (SMME-MEM-CLEAR :SYSTEM . "centaur/misc/smm")
   (TRUTH::INDEX-MOVE-UP :SYSTEM . "centaur/truth/truth")
   (STR::STRTOK-AUX :SYSTEM . "std/strings/strtok")
   (BRIDGE::JSON-ENCODE-STR-AUX :SYSTEM . "centaur/bridge/to-json"))
  ((JUSTIFICATION (N M)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX M) (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX M)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (LNFIX$INLINE M)
                              (UNARY-- (LNFIX$INLINE N)))))
     (NOT (< '0
             (BINARY-+ (LNFIX$INLINE M)
                       (UNARY-- (LNFIX$INLINE N)))))
     (O< (NFIX (BINARY-+ (NFIX (LNFIX$INLINE M))
                         (UNARY-- (NFIX (BINARY-+ (LNFIX$INLINE N) '1)))))
         (NFIX (BINARY-+ (NFIX M)
                         (UNARY-- (NFIX N)))))))
   (BITSETS::BITS-BETWEEN 3 :SYSTEM . "std/bitsets/bits-between")
   (BITOPS::BITS-BETWEEN :SYSTEM
                         . "centaur/bitops/equal-by-logbitp"))
  ((JUSTIFICATION (N STR::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX STR::XL)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX STR::XL)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (LNFIX$INLINE STR::XL)
                              (UNARY-- (LNFIX$INLINE N)))))
     (NOT (< '0
             (BINARY-+ (LNFIX$INLINE STR::XL)
                       (UNARY-- (LNFIX$INLINE N)))))
     (O< (NFIX (BINARY-+ (NFIX (LNFIX$INLINE STR::XL))
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX N)))))))
   (STR::PREFIX-LINES-AUX 5 :SYSTEM . "std/strings/prefix-lines")
   (VL2014::VL-PREFERRED-REPLICATE-NAMES :SYSTEM
                                         .
                                         "centaur/vl2014/transforms/replicate-insts")
   (VL::NATS-FROM-EXEC :SYSTEM . "centaur/vl/util/sum-nats")
   (VL2014::NATS-FROM :SYSTEM
                      . "centaur/vl2014/util/sum-nats"))
  ((JUSTIFICATION (N STR::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX STR::XL)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX STR::XL)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP STR::OLDL))
     (NOT (< '0 STR::OLDL))
     (NOT (INTEGERP (BINARY-+ (NFIX STR::XL)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (NFIX STR::XL)
                       (UNARY-- (NFIX N)))))
     (STR::STRPREFIXP-IMPL STR::OLD X '0
                           N STR::OLDL STR::XL)
     (O< (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP STR::OLDL))
     (NOT (< '0 STR::OLDL))
     (NOT (INTEGERP (BINARY-+ (NFIX STR::XL)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (NFIX STR::XL)
                       (UNARY-- (NFIX N)))))
     (NOT (STR::STRPREFIXP-IMPL STR::OLD X '0
                                N STR::OLDL STR::XL))
     (O< (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX (BINARY-+ STR::OLDL (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX N)))))))
   (STR::STRSUBST-AUX 7 :SYSTEM . "std/strings/strsubst"))
  ((JUSTIFICATION (STR::POS LEN)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX LEN)
                                   (UNARY-- (NFIX STR::POS))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX LEN)
                          (UNARY-- (NFIX STR::POS))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX LEN)
                              (UNARY-- (NFIX STR::POS)))))
     (NOT (< '0
             (BINARY-+ (NFIX LEN)
                       (UNARY-- (NFIX STR::POS)))))
     (O< (NFIX (BINARY-+ (NFIX LEN)
                         (UNARY-- (NFIX (BINARY-+ '1 (NFIX STR::POS))))))
         (NFIX (BINARY-+ (NFIX LEN)
                         (UNARY-- (NFIX STR::POS)))))))
   (STR::STRTOK!-AUX 6 :SYSTEM . "std/strings/strtok-bang")
   (VL2014::VL-PARTPROD-INSTS :SYSTEM . "centaur/esim/occform/mul")
   (VL::VL-ECHARLIST-FROM-STR-NICE :SYSTEM . "centaur/vl/util/echars")
   (VL2014::VL-ECHARLIST-FROM-STR-NICE :SYSTEM . "centaur/vl2014/util/echars"))
  ((JUSTIFICATION (N STR::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX STR::XL)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX STR::XL)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (NFIX (BINARY-+ (NFIX STR::XL)
                                    (UNARY-- (NFIX N))))))
     (NOT (< '0
             (NFIX (BINARY-+ (NFIX STR::XL)
                             (UNARY-- (NFIX N))))))
     (NOT (< '3
             (NFIX (BINARY-+ (NFIX STR::XL)
                             (UNARY-- (NFIX N))))))
     (O< (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX (BINARY-+ '3 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (NFIX STR::XL)
                         (UNARY-- (NFIX N)))))))
   (STR::B64-ENCODE-STR-IMPL 4 :SYSTEM . "std/strings/base64"))
  ((JUSTIFICATION (AIGNET::N MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX MAX)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX MAX)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (< (NFIX AIGNET::N) (NFIX MAX)))
     (O< (NFIX (BINARY-+ (NFIX MAX)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (NFIX MAX)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-PATHCOND-COLLECT-LITS 3 :SYSTEM
                                         . "centaur/fgl/pathcond-transform"))
  ((JUSTIFICATION (AIGNET::START AIGNET::END)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX AIGNET::END)
                                   (UNARY-- (NFIX AIGNET::START))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX AIGNET::END)
                          (UNARY-- (NFIX AIGNET::START))))))
    ((NOT (INTEGERP (BINARY-+ (LNFIX$INLINE AIGNET::END)
                              (UNARY-- (LNFIX$INLINE AIGNET::START)))))
     (NOT (< '0
             (BINARY-+ (LNFIX$INLINE AIGNET::END)
                       (UNARY-- (LNFIX$INLINE AIGNET::START)))))
     (O< (NFIX (BINARY-+ (NFIX (LNFIX$INLINE AIGNET::END))
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE (LNFIX$INLINE AIGNET::START)))))))
         (NFIX (BINARY-+ (NFIX AIGNET::END)
                         (UNARY-- (NFIX AIGNET::START)))))))
   (AIGNET::CUTS-INVALIDATE-ANY-CONTAINED 6 :SYSTEM . "centaur/aignet/cuts4"))
  ((JUSTIFICATION (VL2014::LOW VL2014::HIGH)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::HIGH)
                                   (UNARY-- (NFIX VL2014::LOW))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                          (UNARY-- (NFIX VL2014::LOW))))))
    ((NOT (< (NFIX VL2014::LOW)
             (NFIX VL2014::HIGH)))
     (O< (NFIX (BINARY-+ (NFIX (LNFIX$INLINE VL2014::HIGH))
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE VL2014::LOW))))))
         (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX VL2014::LOW)))))))
   (VL2014::VL-EMODWIRES-FROM-HIGH-TO-LOW-AUX 4 :SYSTEM
                                              . "centaur/esim/vltoe/wirealist"))
  ((JUSTIFICATION (VL2014::LOW VL2014::HIGH)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::HIGH)
                                   (UNARY-- (NFIX VL2014::LOW))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                          (UNARY-- (NFIX VL2014::LOW))))))
    ((NOT (< (NFIX VL2014::LOW)
             (NFIX VL2014::HIGH)))
     (O< (NFIX (BINARY-+ (NFIX (LNFIX$INLINE VL2014::HIGH))
                         (UNARY-- (NFIX (BINARY-+ '1 (NFIX VL2014::LOW))))))
         (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX VL2014::LOW)))))))
   (VL2014::VL-EMODWIRES-FROM-HIGH-TO-LOW-AUX-FIXNUM$INLINE 4 :SYSTEM
                                                            . "centaur/esim/vltoe/wirealist"))
  ((JUSTIFICATION (VL2014::N VL2014::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::XL)
                                   (UNARY-- (NFIX VL2014::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::XL)
                          (UNARY-- (NFIX VL2014::N))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX VL2014::XL)
                              (UNARY-- (NFIX VL2014::N)))))
     (NOT (< '0
             (BINARY-+ (NFIX VL2014::XL)
                       (UNARY-- (NFIX VL2014::N)))))
     (O< (NFIX (BINARY-+ (NFIX VL2014::XL)
                         (UNARY-- (NFIX (MV-NTH '2
                                                (VL2014::VL-BASIC-FMT-PARSE-TILDE VL2014::X VL2014::N VL2014::XL))))))
         (NFIX (BINARY-+ (NFIX VL2014::XL)
                         (UNARY-- (NFIX VL2014::N)))))))
   (VL2014::VL-BASIC-FMT-AUX-FN 5 :SYSTEM . "centaur/vl2014/util/print")
   (VL2014::VL-FMT-AUX-FN :SYSTEM . "centaur/vl2014/mlib/fmt"))
  ((JUSTIFICATION (SV::N MAX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX MAX)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX MAX)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX MAX)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (NFIX MAX)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (NFIX (NFIX MAX))
                         (UNARY-- (NFIX (BINARY-+ '1 (NFIX SV::N))))))
         (NFIX (BINARY-+ (NFIX MAX)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::SVEX-APPLY-COLLECT-ARGS 3 :SYSTEM . "centaur/sv/svex/eval")
   (SV::SVEX-S4APPLY-COLLECT-ARGS :SYSTEM . "centaur/sv/svex/seval")
   (SVL::SVEX-APPLY-COLLECT-ARGS-WOG-META :SYSTEM
                                          . "centaur/svl/meta/svex-eval-wog-meta")
   (SVL::SVEX-APPLY-CONSTANTS-COLLECT-ARG-META :SYSTEM
                                               .
                                               "centaur/svl/svex-reduce/svex-reduce-apply")
   (SVL::SVEX-APPLY-COLLECT-ARGS2 :SYSTEM . "centaur/svl/svex-eval-wog"))
  ((JUSTIFICATION (VL::N VL::XL)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL::XL)
                                   (UNARY-- (NFIX VL::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL::XL)
                          (UNARY-- (NFIX VL::N))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX VL::XL)
                              (UNARY-- (NFIX VL::N)))))
     (NOT (< '0
             (BINARY-+ (NFIX VL::XL)
                       (UNARY-- (NFIX VL::N)))))
     (O< (NFIX (BINARY-+ (NFIX VL::XL)
                         (UNARY-- (NFIX (MV-NTH '2
                                                (VL::VL-BASIC-FMT-PARSE-TILDE VL::X VL::N VL::XL))))))
         (NFIX (BINARY-+ (NFIX VL::XL)
                         (UNARY-- (NFIX VL::N)))))))
   (VL::VL-BASIC-FMT-AUX-FN 5 :SYSTEM . "centaur/vl/util/print"))
  ((JUSTIFICATION (I N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX N) (UNARY-- (NFIX I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX N)
                          (UNARY-- (NFIX I))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX N)
                              (UNARY-- (LNFIX$INLINE I)))))
     (NOT (< '0
             (BINARY-+ (NFIX N)
                       (UNARY-- (LNFIX$INLINE I)))))
     (O< (NFIX (BINARY-+ (NFIX N)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE I))))))
         (NFIX (BINARY-+ (NFIX N)
                         (UNARY-- (NFIX I)))))))
   (FGL::INTEGER-TO-AIG-ENV-AUX 4 :SYSTEM
                                . "centaur/fgl/member-int-list"))
  ((JUSTIFICATION (AIGNET::N AIGNET::TOP)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX AIGNET::TOP)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX AIGNET::TOP)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX AIGNET::TOP)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (NFIX AIGNET::TOP)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (NFIX (BINARY-+ '-1 AIGNET::TOP))
                         (UNARY-- (NFIX AIGNET::N))))
         (NFIX (BINARY-+ (NFIX AIGNET::TOP)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-OUTPUT-LITS-AUX 4 :SYSTEM
                                   . "centaur/aignet/simplify-marked")
   (VL2014::VL-GATHER-COMMENTS-FAL-NREV :SYSTEM
                                        .
                                        "centaur/vl2014/loader/inject-comments")
   (VL::VL-GATHER-COMMENTS-FAL-NREV :SYSTEM
                                    . "centaur/vl/loader/inject-comments"))
  ((JUSTIFICATION (VL2014::LOW VL2014::HIGH)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::HIGH)
                                   (UNARY-- (NFIX VL2014::LOW))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                          (UNARY-- (NFIX VL2014::LOW))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX VL2014::HIGH)
                              (UNARY-- (NFIX VL2014::LOW)))))
     (NOT (< '0
             (BINARY-+ (NFIX VL2014::HIGH)
                       (UNARY-- (NFIX VL2014::LOW)))))
     (O< (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX (BINARY-+ (NFIX VL2014::LOW) '1)))))
         (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX VL2014::LOW)))))))
   (VL2014::VL-MAKE-LIST-OF-BITSELECTS 3 :SYSTEM
                                       . "centaur/vl2014/mlib/expr-building"))
  ((JUSTIFICATION (VL2014::LOW VL2014::HIGH)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::HIGH)
                                   (UNARY-- (NFIX VL2014::LOW))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                          (UNARY-- (NFIX VL2014::LOW))))))
    ((NOT (INTEGERP (BINARY-+ (NFIX VL2014::HIGH)
                              (UNARY-- (NFIX VL2014::LOW)))))
     (NOT (< '0
             (BINARY-+ (NFIX VL2014::HIGH)
                       (UNARY-- (NFIX VL2014::LOW)))))
     (O< (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX (BINARY-+ (LNFIX$INLINE VL2014::LOW)
                                                  '1)))))
         (NFIX (BINARY-+ (NFIX VL2014::HIGH)
                         (UNARY-- (NFIX VL2014::LOW)))))))
   (VL2014::VL-SELFASSIGN-BITS 3 :SYSTEM
                               . "centaur/vl2014/lint/selfassigns"))
  ((JUSTIFICATION (VL2014::I VL2014::N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX VL2014::N)
                                   (UNARY-- (NFIX VL2014::I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX VL2014::N)
                          (UNARY-- (NFIX VL2014::I))))))
    ((NOT (INTEGERP (BINARY-+ (LNFIX$INLINE VL2014::N)
                              (UNARY-- (LNFIX$INLINE VL2014::I)))))
     (NOT (< '0
             (BINARY-+ (LNFIX$INLINE VL2014::N)
                       (UNARY-- (LNFIX$INLINE VL2014::I)))))
     (O< (NFIX (BINARY-+ (NFIX VL2014::N)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE VL2014::I))))))
         (NFIX (BINARY-+ (NFIX VL2014::N)
                         (UNARY-- (NFIX VL2014::I)))))))
   (VL2014::VL-OCCFORM-MKWIRES-FN 5
                                  :SYSTEM . "centaur/vl2014/mlib/modgen")
   (VL2014::VL-PRIMITIVE-MKPORTS-FN :SYSTEM
                                    .
                                    "centaur/vl2014/transforms/always/nedgeflop")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-BLAMEALIST-FIX$INLINE (CDR (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-BLAMEALIST-FIX$INLINE VL2014::X)))))
   (VL2014::VL-BLAMEALIST-COUNT 1 :SYSTEM
                                . "centaur/vl2014/mlib/remove-bad")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-SCOPESTACK-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-SCOPESTACK-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-SCOPESTACK-COUNT VL2014::X)))
    ((EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE VL2014::X)
            ':NULL)
     (EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE VL2014::X)
            ':GLOBAL)
     (O< (VL2014::VL-SCOPESTACK-COUNT (VL2014::VL-SCOPESTACK-LOCAL->SUPER$INLINE VL2014::X))
         (VL2014::VL-SCOPESTACK-COUNT VL2014::X))))
   (VL2014::VL-SCOPESTACK->DESIGN 1 :SYSTEM
                                  . "centaur/vl2014/mlib/scopestack")
   (VL2014::VL-PP-SCOPESTACK-PATH-FN :SYSTEM . "centaur/vl2014/lint/lucid"))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-SCOPESTACK-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-SCOPESTACK-COUNT VL2014::X)))
    ((EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X))
            ':NULL)
     (EQUAL (VL2014::VL-SCOPESTACK-KIND$INLINE (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X))
            ':GLOBAL)
     (O< (VL2014::VL-SCOPESTACK-COUNT (VL2014::VL-SCOPESTACK-LOCAL->SUPER$INLINE (VL2014::VL-SCOPESTACK-FIX$INLINE VL2014::X)))
         (VL2014::VL-SCOPESTACK-COUNT VL2014::X))))
   (VL2014::VL-NORMALIZE-SCOPESTACK 1
                                    :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (VL2014::LOCALS)
                 (NIL O-P . O<)
                 ((VL2014::VL-SCOPEITEM-ALIST-COUNT VL2014::LOCALS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::LOCALS)
                  (NIL O-P . O<)
                  ((VL2014::VL-SCOPEITEM-ALIST-COUNT VL2014::LOCALS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-SCOPEITEM-ALIST-COUNT VL2014::LOCALS)))
    ((NOT (CONSP (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::LOCALS)))
     (O< (VL2014::VL-SCOPEITEM-ALIST-COUNT (CDR (VL2014::VL-SCOPEITEM-ALIST-FIX$INLINE VL2014::LOCALS)))
         (VL2014::VL-SCOPEITEM-ALIST-COUNT VL2014::LOCALS))))
   (VL2014::VL-SCOPE-LUCIDDB-INIT-AUX 3
                                      :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (VL2014::TOKSTREAM)
                 (NIL O-P . O<)
                 ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-SCOPE
                                        'VL2014::VL-PARSE-PVA-TAIL
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-PVA-TAIL
                                        (MV-NTH '2
                                                (VL2014::VL-MATCH-TOKEN-FN ':VL-SCOPE
                                                                           'VL2014::VL-PARSE-PVA-TAIL
                                                                           VL2014::TOKSTREAM))))
     (VL2014::VL-IS-TOKEN?$INLINE ':VL-POUND
                                  (MV-NTH '2
                                          (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                     'VL2014::VL-PARSE-PVA-TAIL
                                                                     (MV-NTH '2
                                                                             (VL2014::VL-MATCH-TOKEN-FN ':VL-SCOPE
                                                                                                        'VL2014::VL-PARSE-PVA-TAIL
                                                                                                        VL2014::TOKSTREAM)))))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-SCOPE
                                       (MV-NTH '2
                                               (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                          'VL2014::VL-PARSE-PVA-TAIL
                                                                          (MV-NTH '2
                                                                                  (VL2014::VL-MATCH-TOKEN-FN ':VL-SCOPE
                                                                                                             'VL2014::VL-PARSE-PVA-TAIL
                                                                                                             VL2014::TOKSTREAM))))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                      'VL2014::VL-PARSE-PVA-TAIL
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-MATCH-TOKEN-FN ':VL-SCOPE
                                                                                                                         'VL2014::VL-PARSE-PVA-TAIL
                                                                                                                         VL2014::TOKSTREAM))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-PVA-TAIL-FN 2 :SYSTEM
                                 .
                                 "centaur/vl2014/loader/parser/expressions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                       VL2014::TOKSTREAM))
     (NOT (VL2014::VL-LOOKAHEAD-IS-TOKEN?$INLINE ':VL-SCOPE
                                                 (CDR (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-SCOPE-PREFIXES-FN 2 :SYSTEM
                                          .
                                          "centaur/vl2014/loader/parser/expressions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-LBRACK
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-RANGE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-RANGE-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-RANGES-FN 2 :SYSTEM
                                  .
                                  "centaur/vl2014/loader/parser/ranges"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-LBRACK
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-PACKEDDIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-PACKEDDIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-PACKED-DIMENSIONS-FN 2 :SYSTEM
                                             .
                                             "centaur/vl2014/loader/parser/datatypes"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-LBRACK
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-UNPACKED-DIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-UNPACKED-DIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-UNPACKED-DIMENSIONS-FN 2 :SYSTEM
                                               .
                                               "centaur/vl2014/loader/parser/datatypes"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-LBRACK
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-VARIABLE-DIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-VARIABLE-DIMENSION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-VARIABLE-DIMENSIONS-FN 2 :SYSTEM
                                               .
                                               "centaur/vl2014/loader/parser/datatypes"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-ENUM-NAME-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-ENUM-NAME-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-ENUM-NAME-DECLARATIONS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                                      .
                                                                      "centaur/vl2014/loader/parser/datatypes"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-VARIABLE-DECL-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-VARIABLE-DECL-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-VARIABLE-DECL-ASSIGNMENTS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                                         .
                                                                         "centaur/vl2014/loader/parser/datatypes"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-NET-ASSIGNMENTS-FN 2 :SYSTEM
                                                . "centaur/vl2014/loader/parser/nets"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                    (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                               'VL2014::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                                                               VL2014::TOKSTREAM))
                                            VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                                                                                                   (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                              'VL2014::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                                                                                                                                              VL2014::TOKSTREAM))
                                                                                                                           VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-NET-IDENTIFIERS-FN 2 :SYSTEM
                                                . "centaur/vl2014/loader/parser/nets"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PORT-REFERENCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PORT-REFERENCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-PORT-REFERENCES-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                               . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                                  VL2014::TOKSTREAM)
     (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-PARSE-NONNULL-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-NONNULL-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                                  VL2014::TOKSTREAM)
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-PORTS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                     . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS
                                        VL2014::TOKSTREAM))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                       'VL2014::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS
                                                                                                                       VL2014::TOKSTREAM))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                           . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PORT-DECLARATION-ATTS-2005-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PORT-DECLARATION-ATTS-2005-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-PORT-DECLARATIONS-SEPARATED-BY-COMMAS-2005-FN 2 :SYSTEM
                                                                      . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-0+-VARIABLE-DIMENSIONS-FN (MV-NTH '2
                                                                 (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                            'VL2014::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                                                                            VL2014::TOKSTREAM))
                                                         VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-0+-VARIABLE-DIMENSIONS-FN (MV-NTH '2
                                                                                                                                                (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                                           'VL2014::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                                                                                                                                                           VL2014::TOKSTREAM))
                                                                                                                                        VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-PORT-IDENTIFIERS-FN 2 :SYSTEM
                                                 . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (MV-NTH '0
             (VL2014::VL-PARSE-ANSI-PORT-DECLARATION-FN (MV-NTH '1
                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                        (MV-NTH '2
                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                        VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-ANSI-PORT-DECLARATION-FN (MV-NTH '1
                                                                                                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                       (MV-NTH '2
                                                                                                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                       VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-ANSI-PORT-DECLARATIONS-FN 2 :SYSTEM
                                                  . "centaur/vl2014/loader/parser/ports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (IF (VL2014::VL-IS-SOME-TOKEN?$INLINE '(:VL-KWD-POSEDGE :VL-KWD-NEGEDGE)
                                                   VL2014::TOKSTREAM)
                 (IF (MV-NTH '0
                             (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                     (CONS (MV-NTH '0
                                   (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                           (CONS (MV-NTH '1
                                         (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                 (CONS (MV-NTH '2
                                               (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                       'NIL)))
                   (CONS 'NIL
                         (CONS (CONS (MV-NTH '1
                                             (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                     'NIL)
                               (CONS (MV-NTH '2
                                             (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                     'NIL))))
               (CONS 'NIL
                     (CONS '(NIL)
                           (CONS VL2014::TOKSTREAM 'NIL)))))
     (MV-NTH '0
             (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                     (IF (VL2014::VL-IS-SOME-TOKEN?$INLINE '(:VL-KWD-POSEDGE :VL-KWD-NEGEDGE)
                                                                                           VL2014::TOKSTREAM)
                                                         (IF (MV-NTH '0
                                                                     (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                             (CONS (MV-NTH '0
                                                                           (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                   (CONS (MV-NTH '1
                                                                                 (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                         (CONS (MV-NTH '2
                                                                                       (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                               'NIL)))
                                                           (CONS 'NIL
                                                                 (CONS (CONS (MV-NTH '1
                                                                                     (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                             'NIL)
                                                                       (CONS (MV-NTH '2
                                                                                     (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                             'NIL))))
                                                       (CONS 'NIL
                                                             (CONS '(NIL)
                                                                   (CONS VL2014::TOKSTREAM 'NIL)))))
                                             VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                                                                                                    (IF (VL2014::VL-IS-SOME-TOKEN?$INLINE '(:VL-KWD-POSEDGE :VL-KWD-NEGEDGE)
                                                                                                                                                                          VL2014::TOKSTREAM)
                                                                                                                                        (IF (MV-NTH '0
                                                                                                                                                    (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                            (CONS (MV-NTH '0
                                                                                                                                                          (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                                  (CONS (MV-NTH '1
                                                                                                                                                                (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                                        (CONS (MV-NTH '2
                                                                                                                                                                      (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                                              'NIL)))
                                                                                                                                          (CONS 'NIL
                                                                                                                                                (CONS (CONS (MV-NTH '1
                                                                                                                                                                    (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                                            'NIL)
                                                                                                                                                      (CONS (MV-NTH '2
                                                                                                                                                                    (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
                                                                                                                                                            'NIL))))
                                                                                                                                      (CONS 'NIL
                                                                                                                                            (CONS '(NIL)
                                                                                                                                                  (CONS VL2014::TOKSTREAM 'NIL)))))
                                                                                                                            VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-EVENT-EXPRESSION-FN 2 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/eventctrl"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PARAM-ASSIGNMENT-FN VL2014::ATTS VL2014::LOCALP
                                                   TYPE VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PARAM-ASSIGNMENT-FN VL2014::ATTS VL2014::LOCALP TYPE
                                                                                                                                  VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-PARAM-ASSIGNMENTS-FN 5 :SYSTEM
                                                  .
                                                  "centaur/vl2014/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-TYPE-ASSIGNMENT-FN VL2014::ATTS VL2014::LOCALP
                                                  VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-TYPE-ASSIGNMENT-FN VL2014::ATTS VL2014::LOCALP
                                                                                                                                 VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-TYPE-ASSIGNMENTS-FN 4 :SYSTEM
                                                 .
                                                 "centaur/vl2014/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PARAM-OR-LOCALPARAM-DECLARATION-FN 'NIL
                                                                  '(:VL-KWD-PARAMETER)
                                                                  VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PARAM-OR-LOCALPARAM-DECLARATION-FN 'NIL
                                                                                                                                                 '(:VL-KWD-PARAMETER)
                                                                                                                                                 VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-MODULE-PARAMETER-PORT-LIST-AUX-2005-FN 2 :SYSTEM
                                                            .
                                                            "centaur/vl2014/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PARAMETER-PORT-DECLARATION-2012-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PARAMETER-PORT-DECLARATION-2012-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-PARAMETER-PORT-DECLARATIONS-2012-FN 2 :SYSTEM
                                                            .
                                                            "centaur/vl2014/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PACKAGE-IMPORT-ITEM-FN VL2014::ATTS
                                                      VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PACKAGE-IMPORT-ITEM-FN VL2014::ATTS
                                                                                                                                     VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-PACKAGE-IMPORT-ITEMS-SEPARATED-BY-COMMAS-FN 3 :SYSTEM
                                                                    .
                                                                    "centaur/vl2014/loader/parser/imports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-IMPORT
                                       VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-PACKAGE-IMPORT-DECLARATION-FN 'NIL
                                                             VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-PACKAGE-IMPORT-DECLARATION-FN 'NIL
                                                                                                           VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-PACKAGE-IMPORT-DECLARATIONS-FN 2 :SYSTEM
                                                       .
                                                       "centaur/vl2014/loader/parser/imports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-VARIABLE-TYPE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-VARIABLE-TYPE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-VARIABLE-IDENTIFIERS-FN 2 :SYSTEM
                                                     .
                                                     "centaur/vl2014/loader/parser/blockitems"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                    (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                               'VL2014::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                                                               VL2014::TOKSTREAM))
                                            VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                                                                                                   (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                              'VL2014::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                                                                                                                                              VL2014::TOKSTREAM))
                                                                                                                           VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS-FN 3 :SYSTEM
                                                  .
                                                  "centaur/vl2014/loader/parser/blockitems"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-BLOCK-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-BLOCK-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-BLOCK-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                                   .
                                                   "centaur/vl2014/loader/parser/blockitems"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                        'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                        'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                        (MV-NTH '2
                                                (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                           'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                           VL2014::TOKSTREAM))))
     (MV-NTH '0
             (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                     (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                                'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                (MV-NTH '2
                                                                                        (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                   'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                                   VL2014::TOKSTREAM))))
                                             VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                                                                                                      (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                                                                                                                 'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                                                                                 (MV-NTH '2
                                                                                                                                                                         (VL2014::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                                                                    'VL2014::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                                                                                                                    VL2014::TOKSTREAM))))
                                                                                                                              VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-ID=EXPR-PAIRS-FN 4 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/statements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-FOR-VARIABLE-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-FOR-VARIABLE-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-FOR-VARIABLE-DECLARATIONS-FN 2 :SYSTEM
                                                     .
                                                     "centaur/vl2014/loader/parser/statements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-ASSIGNMENT-FN (MV-NTH '2
                                                     (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
                                             VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-ASSIGNMENT-FN (MV-NTH '2
                                                                                                                                    (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
                                                                                                                            VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-FOR-INIT-ASSIGNMENTS-FN 2 :SYSTEM
                                                .
                                                "centaur/vl2014/loader/parser/statements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-OPERATOR-ASSIGNMENT/INC/DEC-FN (MV-NTH '2
                                                                      (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
                                                              VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-OPERATOR-ASSIGNMENT/INC/DEC-FN (MV-NTH '2
                                                                                                                                                     (VL2014::VL-CURRENT-LOC-FN VL2014::TOKSTREAM))
                                                                                                                                             VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-FOR-STEP-ASSIGNS-FN 2 :SYSTEM
                                            .
                                            "centaur/vl2014/loader/parser/statements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                  (MV-NTH '2
                                          (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG)))
     (VL2014::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                                  (MV-NTH '2
                                          (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG)))
     (MV-NTH '0
             (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                     (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                             VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                                                                                                    (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                            VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-ORDERED-PORT-CONNECTIONS-FN 2 :SYSTEM
                                                         . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-NAMED-PORT-CONNECTION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-LIST-OF-NAMED-PORT-CONNECTIONS-2005
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-NAMED-PORT-CONNECTION-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-NAMED-PORT-CONNECTIONS-2005-FN 2 :SYSTEM
                                                            . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-NAMED-PARAMETER-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-LIST-OF-NAMED-PARAMETER-ASSIGNMENTS
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-NAMED-PARAMETER-ASSIGNMENT-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-NAMED-PARAMETER-ASSIGNMENTS-FN 2 :SYSTEM
                                                            . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PARAM-EXPRESSION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-LIST-OF-ORDERED-PARAMETER-ASSIGNMENTS
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-PARAM-EXPRESSION-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-ORDERED-PARAMETER-ASSIGNMENTS-FN 2 :SYSTEM
                                                              . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-MODULE-INSTANCE-FN VL2014::MODNAME
                                                  VL2014::PARAMARGS VL2014::ATTS
                                                  VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-1+-MODULE-INSTANCES
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-MODULE-INSTANCE-FN VL2014::MODNAME
                                                                                                                                   VL2014::PARAMARGS VL2014::ATTS
                                                                                                                                   VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-MODULE-INSTANCES-FN 5 :SYSTEM
                                            . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-UDP-INSTANCE-FN VL2014::LOC VL2014::MODNAME
                                               VL2014::STR VL2014::DELAY VL2014::ATTS
                                               VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-1+-UDP-INSTANCES
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-UDP-INSTANCE-FN VL2014::LOC VL2014::MODNAME
                                                                                                                                VL2014::STR VL2014::DELAY VL2014::ATTS
                                                                                                                                VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-UDP-INSTANCES-FN 7 :SYSTEM
                                         . "centaur/vl2014/loader/parser/insts"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-CMOS-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-CMOS-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-CMOS-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                                   . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-ENABLE-OR-MOS-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-ENABLE-OR-MOS-INSTANCES-LIST
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-ENABLE-OR-MOS-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-ENABLE-OR-MOS-INSTANCES-LIST-FN 2 :SYSTEM
                                                     . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-N-INPUT-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-N-INPUT-GATE-INSTANCES-LIST
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-N-INPUT-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-N-INPUT-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                                    . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-N-OUTPUT-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-N-OUTPUT-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-N-OUTPUT-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                                     . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                                          . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PASS-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PASS-SWITCH-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-PASS-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                                   . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-PULL-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-PULL-GATE-INSTANCE-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-PULL-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                                 . "centaur/vl2014/loader/parser/gates"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (MV-NTH '0
             (VL2014::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                       (MV-NTH '2
                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                       VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                                 (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                         (MV-NTH '2
                                                                                                 (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                         VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                        'VL2014::VL-PARSE-TASKPORT-LIST
                                        (MV-NTH '2
                                                (VL2014::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                                  (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                          (MV-NTH '2
                                                                                                  (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                          VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                                      'VL2014::VL-PARSE-TASKPORT-LIST
                                                                                      (MV-NTH '2
                                                                                              (VL2014::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                        (MV-NTH '2
                                                                                                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                        VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-TASKPORT-LIST-FN 2 :SYSTEM
                                      .
                                      "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-TASK-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-TASK-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-TASK-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                                  .
                                                  "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDFUNCTION
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDFUNCTION
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDFUNCTION
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDFUNCTION
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDFUNCTION-FN 2 :SYSTEM
                                           .
                                           "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDTASK
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDTASK
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDTASK
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDTASK
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDTASK-FN 2 :SYSTEM
                                       .
                                       "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDFUNCTION
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-PARSE-STATEMENT-OR-NULL-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-STATEMENT-OR-NULL-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-FUNCTION-STATEMENTS-AUX-FN 2 :SYSTEM
                                                .
                                                "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-TF-PORT-ITEM-FN VL2014::PREV
                                               VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-TF-PORT-ITEM-FN VL2014::PREV
                                                                                 VL2014::TOKSTREAM VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-PARSE-TF-PORT-ITEM-FN VL2014::PREV
                                                                                VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-TF-PORT-ITEM-FN VL2014::PREV
                                                                                                                              VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-TF-PORT-LIST-AUX-FN 3 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LIST-OF-TF-VARIABLE-IDENTIFIERS-FN 2 :SYSTEM
                                                        .
                                                        "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-TF-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-TF-ITEM-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-TF-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                                .
                                                "centaur/vl2014/loader/parser/functions"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL2014::DIR VL2014::ATTS
                                                      VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL2014::DIR VL2014::ATTS
                                                                                        VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL2014::DIR VL2014::ATTS
                                                                                                                                     VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-SIMPLE-MODPORT-PORTS-FN 4 :SYSTEM
                                                .
                                                "centaur/vl2014/loader/parser/modports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-MODPORT-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-MODPORT-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-PARSE-MODPORT-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-MODPORT-PORT-FN VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-MODPORT-PORTS-FN 2 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/modports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-MODPORT-ITEM-FN VL2014::ATTS
                                               VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (VL2014::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                       (MV-NTH '2
                                               (VL2014::VL-PARSE-MODPORT-ITEM-FN VL2014::ATTS
                                                                                 VL2014::TOKSTREAM VL2014::CONFIG))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                              (VL2014::VL-PARSE-MODPORT-ITEM-FN VL2014::ATTS
                                                                                VL2014::TOKSTREAM VL2014::CONFIG))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-MODPORT-ITEM-FN VL2014::ATTS
                                                                                                                              VL2014::TOKSTREAM VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-MODPORT-ITEMS-FN 3 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/modports"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                        'VL2014::VL-PARSE-1+-ALIAS-RHSES
                                        VL2014::TOKSTREAM))
     (MV-NTH '0
             (VL2014::VL-PARSE-LVALUE-FN (MV-NTH '2
                                                 (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                            'VL2014::VL-PARSE-1+-ALIAS-RHSES
                                                                            VL2014::TOKSTREAM))
                                         VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-LVALUE-FN (MV-NTH '2
                                                                                               (VL2014::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                                                                          'VL2014::VL-PARSE-1+-ALIAS-RHSES
                                                                                                                          VL2014::TOKSTREAM))
                                                                                       VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-ALIAS-RHSES-FN 5 :SYSTEM
                                       .
                                       "centaur/vl2014/loader/parser/elements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDSPECIFY
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-SPECIFY-BLOCK-AUX
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-SPECIFY-BLOCK-AUX
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-SPECIFY-BLOCK-AUX
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-SPECIFY-BLOCK-AUX-FN 2 :SYSTEM
                                          .
                                          "centaur/vl2014/loader/parser/elements"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDMODULE
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDMODULE
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDMODULE
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDMODULE
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDMODULE-FN 2 :SYSTEM
                                         .
                                         "centaur/vl2014/loader/parser/modules"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-LEVEL-SYMBOL-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-PARSE-LEVEL-SYMBOL-FN VL2014::TOKSTREAM VL2014::CONFIG))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-LEVEL-SYMBOL-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-LEVEL-INPUT-LIST-FN 2 :SYSTEM
                                         . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-COMBINATIONAL-ENTRY-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-COMBINATIONAL-ENTRY-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-COMBINATIONAL-ENTRIES-UNTIL-ENDTABLE-FN 2 :SYSTEM
                                                             . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (CONSP (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))
     (NOT (VL2014::VL-UDP-LEVEL-SYMBOL-TOKEN-P (CAR (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (MV-NTH '0
             (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-LEVEL-SYMBOLS-FN 2 :SYSTEM
                                         . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-SEQUENTIAL-ENTRY-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-SEQUENTIAL-ENTRY-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-SEQUENTIAL-ENTRIES-UNTIL-ENDTABLE-FN 2 :SYSTEM
                                                          . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (MV-NTH '0
             (VL2014::VL-PARSE-UDP-INPUT-DECLARATION-FN (MV-NTH '1
                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                        (MV-NTH '2
                                                                (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                        VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH$INLINE (MV-NTH '2
                                                                                            (VL2014::VL-PARSE-UDP-INPUT-DECLARATION-FN (MV-NTH '1
                                                                                                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                       (MV-NTH '2
                                                                                                                                               (VL2014::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL2014::TOKSTREAM VL2014::CONFIG))
                                                                                                                                       VL2014::CONFIG))))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-1+-UDP-INPUT-DECLARATIONS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                                      . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((MV-NTH '0
             (VL2014::VL-PARSE-UDP-PORT-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-UDP-PORT-DECLARATION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-0+-UDP-PORT-DECLARATIONS-FN 2 :SYSTEM
                                                 . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPRIMITIVE
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPRIMITIVE
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPRIMITIVE
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPRIMITIVE
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDPRIMITIVE-FN 3 :SYSTEM
                                            . "centaur/vl2014/loader/parser/udps"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDINTERFACE
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDINTERFACE
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDINTERFACE
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDINTERFACE
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDINTERFACE-FN 2 :SYSTEM
                                            .
                                            "centaur/vl2014/loader/parser/interfaces"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPACKAGE
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPACKAGE
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPACKAGE
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-SKIP-THROUGH-ENDPACKAGE
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-SKIP-THROUGH-ENDPACKAGE-FN 3 :SYSTEM
                                          .
                                          "centaur/vl2014/loader/parser/packages"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPROGRAM
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-PROGRAM-DECLARATION-AUX
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-PROGRAM-DECLARATION-AUX
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-PROGRAM-DECLARATION-AUX
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-PROGRAM-DECLARATION-AUX-FN 2 :SYSTEM
                                                .
                                                "centaur/vl2014/loader/parser/programs"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((VL2014::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDCONFIG
                                  VL2014::TOKSTREAM)
     (MV-NTH '0
             (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-CONFIG-DECLARATION-AUX
                                          VL2014::TOKSTREAM))
     (NOT (< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                               (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-CONFIG-DECLARATION-AUX
                                                                                            VL2014::TOKSTREAM))))
             (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-MATCH-ANY$INLINE 'VL2014::VL-PARSE-CONFIG-DECLARATION-AUX
                                                                                        VL2014::TOKSTREAM))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-CONFIG-DECLARATION-AUX-FN 2 :SYSTEM
                                               .
                                               "centaur/vl2014/loader/parser/configs"))
  ((JUSTIFICATION (VL2014::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM))))
    ((NOT (CONSP (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))
     (MV-NTH '0
             (VL2014::VL-PARSE-DESCRIPTION-FN VL2014::TOKSTREAM VL2014::CONFIG))
     (O< (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL2014::VL-PARSE-DESCRIPTION-FN VL2014::TOKSTREAM VL2014::CONFIG))))
         (LEN (VL2014::VL-TOKSTREAM->TOKENS$INLINE VL2014::TOKSTREAM)))))
   (VL2014::VL-PARSE-SOURCE-TEXT-FN 2 :SYSTEM
                                    .
                                    "centaur/vl2014/loader/parser/parser")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::RANGEMAP-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::RANGEMAP-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::RANGEMAP-FIX$INLINE X))))
    ((NOT (CONSP (SV::RANGEMAP-FIX$INLINE X)))
     (O< (LEN (SV::RANGEMAP-FIX$INLINE (CDR (SV::RANGEMAP-FIX$INLINE X))))
         (LEN (SV::RANGEMAP-FIX$INLINE X)))))
   (SV::FILTER-PORTDECL-RANGEMAP 3 :SYSTEM . "centaur/sv/vl/use-set")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-EXPR-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-EXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE VL::X)
                 ':VL-QMARK))
     (O< (VL::VL-EXPR-COUNT (VL::VL-QMARK->THEN$INLINE VL::X))
         (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE VL::X)
                 ':VL-QMARK))
     (TD-STUB-1 (VL::VL-QMARK->THEN$INLINE VL::X))
     (O< (VL::VL-EXPR-COUNT (VL::VL-QMARK->ELSE$INLINE VL::X))
         (VL::VL-EXPR-COUNT VL::X))))
   (VL::VL-EXPR-NEEDS-TYPE-CONTEXT 1 :SYSTEM . "centaur/sv/vl/expr"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-EXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE (VL::VL-EXPR-FIX$INLINE VL::X))
                 ':VL-QMARK))
     (O< (VL::VL-EXPR-COUNT (VL::VL-QMARK->TEST$INLINE (VL::VL-EXPR-FIX$INLINE VL::X)))
         (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE (VL::VL-EXPR-FIX$INLINE VL::X))
                 ':VL-BINARY))
     (O< (VL::VL-EXPR-COUNT (VL::VL-BINARY->LEFT$INLINE (VL::VL-EXPR-FIX$INLINE VL::X)))
         (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE (VL::VL-EXPR-FIX$INLINE VL::X))
                 ':VL-MINTYPMAX))
     (O< (VL::VL-EXPR-COUNT (VL::VL-MINTYPMAX->MIN$INLINE (VL::VL-EXPR-FIX$INLINE VL::X)))
         (VL::VL-EXPR-COUNT VL::X))))
   (VL::VL-MAYBE-STRIP-OUTER-LINESTART 1 :SYSTEM . "centaur/vl/mlib/writer"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-EXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE VL::X)
                 ':VL-QMARK))
     (O< (VL::VL-EXPR-COUNT (VL::VL-QMARK->THEN$INLINE VL::X))
         (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE VL::X)
                 ':VL-QMARK))
     (NOT (TD-STUB-1 (VL::VL-QMARK->THEN$INLINE VL::X)))
     (O< (VL::VL-EXPR-COUNT (VL::VL-QMARK->ELSE$INLINE VL::X))
         (VL::VL-EXPR-COUNT VL::X))))
   (VL::VL-EXPR-IS-EXTENSIONAL 1 :SYSTEM . "centaur/sv/vl/moddb"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-EXPR-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-EXPR-COUNT VL::X)))
    ((NOT (EQUAL (VL::VL-EXPR-KIND$INLINE (VL::VL-EXPR-FIX$INLINE VL::X))
                 ':VL-UNARY))
     (NOT (MEMBER-EQUAL (VL::VL-UNARY->OP$INLINE (VL::VL-EXPR-FIX$INLINE VL::X))
                        '(:VL-UNARY-PLUS :VL-UNARY-MINUS)))
     (O< (VL::VL-EXPR-COUNT (VL::VL-UNARY->ARG$INLINE (VL::VL-EXPR-FIX$INLINE VL::X)))
         (VL::VL-EXPR-COUNT VL::X))))
   (VL::VL-EXPR-IS-ARITH 1 :SYSTEM
                         . "centaur/vl/lint/arith-compare")))
 ((JUSTIFICATION (VL::ALIST)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::ALIST)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST))))
    ((NOT (CONSP (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST)))
     (O< (LEN (VL::VL-DUPERHS-ALIST-FIX$INLINE (CDR (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST))))
         (LEN (VL::VL-DUPERHS-ALIST-FIX$INLINE VL::ALIST)))))
   (VL::VL-WARNINGS-FOR-DUPERHS-ALIST 2 :SYSTEM . "centaur/vl/lint/duperhs")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-WARNINGTREE-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-WARNINGTREE-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':PAIR))
     (O< (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE (VL::VL-WARNINGTREE->LEFT$INLINE VL::X)))
         (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':PAIR))
     (O< (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE (VL::VL-WARNINGTREE->RIGHT$INLINE VL::X)))
         (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE VL::X))))
    ((NOT (EQUAL (VL::VL-WARNINGTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE (VL::VL-WARNINGTREE->SUBTREE$INLINE VL::X)))
         (ACL2-COUNT (VL::VL-WARNINGTREE-FIX$INLINE VL::X)))))
   (VL::VL-WARNINGTREE-COUNT 1 :SYSTEM
                             . "centaur/vl/util/warningtree")))
 ((JUSTIFICATION (VL::CANDIDATES)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::CANDIDATES)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES))))
    ((NOT (CONSP (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES)))
     (O< (LEN (VL::VL-TYPOCANDIDATES-FIX$INLINE (CDR (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES))))
         (LEN (VL::VL-TYPOCANDIDATES-FIX$INLINE VL::CANDIDATES)))))
   (VL::VL-LUCID-TYPO-DETECT 2 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-SCOPESTACK-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-SCOPESTACK-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-SCOPESTACK-COUNT VL::X)))
    ((EQUAL (VL::VL-SCOPESTACK-KIND$INLINE VL::X)
            ':NULL)
     (EQUAL (VL::VL-SCOPESTACK-KIND$INLINE VL::X)
            ':GLOBAL)
     (O< (VL::VL-SCOPESTACK-COUNT (VL::VL-SCOPESTACK-LOCAL->SUPER$INLINE VL::X))
         (VL::VL-SCOPESTACK-COUNT VL::X))))
   (VL::VL-SCOPESTACK->DESIGN 1
                              :SYSTEM . "centaur/vl/mlib/scopestack")
   (VL::VL-SCOPESTACK-PATH-MSG :SYSTEM . "centaur/sv/vl/use-set")
   (VL::VL-PP-SCOPESTACK-PATH-FN :SYSTEM . "centaur/vl/lint/lucid"))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-SCOPESTACK-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-SCOPESTACK-COUNT VL::X)))
    ((EQUAL (VL::VL-SCOPESTACK-KIND$INLINE (VL::VL-SCOPESTACK-FIX$INLINE VL::X))
            ':NULL)
     (EQUAL (VL::VL-SCOPESTACK-KIND$INLINE (VL::VL-SCOPESTACK-FIX$INLINE VL::X))
            ':GLOBAL)
     (O< (VL::VL-SCOPESTACK-COUNT (VL::VL-SCOPESTACK-LOCAL->SUPER$INLINE (VL::VL-SCOPESTACK-FIX$INLINE VL::X)))
         (VL::VL-SCOPESTACK-COUNT VL::X))))
   (VL::VL-NORMALIZE-SCOPESTACK 1 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (VL::LOCALS)
                 (NIL O-P . O<)
                 ((VL::VL-SCOPEITEM-ALIST-COUNT VL::LOCALS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::LOCALS)
                  (NIL O-P . O<)
                  ((VL::VL-SCOPEITEM-ALIST-COUNT VL::LOCALS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-SCOPEITEM-ALIST-COUNT VL::LOCALS)))
    ((NOT (CONSP (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::LOCALS)))
     (O< (VL::VL-SCOPEITEM-ALIST-COUNT (CDR (VL::VL-SCOPEITEM-ALIST-FIX$INLINE VL::LOCALS)))
         (VL::VL-SCOPEITEM-ALIST-COUNT VL::LOCALS))))
   (VL::VL-SCOPE-LUCIDDB-INIT-AUX 3 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-COMMENTMAP-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-COMMENTMAP-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-COMMENTMAP-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-COMMENTMAP-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-COMMENTMAP-FIX$INLINE (CDR (VL::VL-COMMENTMAP-FIX$INLINE VL::X))))
         (LEN (VL::VL-COMMENTMAP-FIX$INLINE VL::X)))))
   (VL::VL-COMMENTMAP-TRANSLATE-OFF-WARNINGS 2 :SYSTEM
                                             . "centaur/vl/loader/translateoff")
   (VL::VL-REMOVE-EMPTY-COMMENTMAP-ENTRIES-EXEC :SYSTEM
                                                . "centaur/vl/mlib/comment-writer")))
 ((JUSTIFICATION (VL::TOKSTREAM)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (VL::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                   VL::TOKSTREAM))
     (NOT (VL::VL-LOOKAHEAD-IS-TOKEN?$INLINE ':VL-SCOPE
                                             (CDR (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-SCOPE-PREFIXES-FN 2 :SYSTEM
                                      .
                                      "centaur/vl/loader/parser/expressions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-QUOTE
                              VL::TOKSTREAM)
     (VL::VL-IS-TOKEN?$INLINE ':VL-LCURLY
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-LPAREN
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-NET-LVALUE-2012-AUX-FN 2 :SYSTEM
                                        .
                                        "centaur/vl/loader/parser/assignments"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-NET-ASSIGNMENT-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-NET-ASSIGNMENT-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-NET-ASSIGNMENTS-FN 2 :SYSTEM
                                            . "centaur/vl/loader/parser/nets"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                    'VL::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                    VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                       'VL::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                                                       VL::TOKSTREAM))
                                        VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                                                                                       (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                              'VL::VL-PARSE-LIST-OF-NET-IDENTIFIERS
                                                                                                                                              VL::TOKSTREAM))
                                                                                                               VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-NET-IDENTIFIERS-FN 2 :SYSTEM
                                            . "centaur/vl/loader/parser/nets"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
     (MV-NTH '0
             (VL::VL-PARSE-ANSI-PORT-DECLARATION-FN (MV-NTH '1
                                                            (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                    (MV-NTH '2
                                                            (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                    VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-ANSI-PORT-DECLARATION-FN (MV-NTH '1
                                                                                                                                   (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                           (MV-NTH '2
                                                                                                                                   (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                           VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-ANSI-PORT-DECLARATIONS-FN 2 :SYSTEM
                                              . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   VL::TOKSTREAM))
     (NOT (VL::VL-LOOKAHEAD-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                             (CDR (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-PORT-IDENTIFIERS-AS-ANSI-DECLS-2005-FN 2 :SYSTEM
                                                           . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-ANSI-PORT-DECLARATION-2005-FN 'NIL
                                                         VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-ANSI-PORT-DECLARATION-2005-FN 'NIL
                                                                                                                                VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PORT-DECLARATIONS-SEPARATED-BY-COMMAS-2005-FN 2 :SYSTEM
                                                                  . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PORT-REFERENCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PORT-REFERENCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PORT-REFERENCES-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                           . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                              VL::TOKSTREAM)
     (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-PARSE-NONNULL-PORT-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-NONNULL-PORT-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PORTS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                 . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                    'VL::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS
                                    VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                           'VL::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS
                                                                                                           VL::TOKSTREAM))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-IDENTIFIERS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                       . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                    'VL::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                    VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-0+-VARIABLE-DIMENSIONS-FN (MV-NTH '2
                                                             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                    'VL::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                                                                    VL::TOKSTREAM))
                                                     VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-0+-VARIABLE-DIMENSIONS-FN (MV-NTH '2
                                                                                                                                    (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                           'VL::VL-PARSE-LIST-OF-PORT-IDENTIFIERS
                                                                                                                                                           VL::TOKSTREAM))
                                                                                                                            VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-PORT-IDENTIFIERS-FN 2 :SYSTEM
                                             . "centaur/vl/loader/parser/ports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-TYPE-ASSIGNMENT-FN VL::ATTS
                                              VL::LOCALP VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-TYPE-ASSIGNMENT-FN VL::ATTS VL::LOCALP
                                                                                                                     VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-TYPE-ASSIGNMENTS-FN 4 :SYSTEM
                                             .
                                             "centaur/vl/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PARAM-OR-LOCALPARAM-DECLARATION-FN 'NIL
                                                              '(:VL-KWD-PARAMETER)
                                                              VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PARAM-OR-LOCALPARAM-DECLARATION-FN 'NIL
                                                                                                                                     '(:VL-KWD-PARAMETER)
                                                                                                                                     VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-MODULE-PARAMETER-PORT-LIST-AUX-2005-FN 2 :SYSTEM
                                                        .
                                                        "centaur/vl/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PARAMETER-PORT-DECLARATION-2012-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PARAMETER-PORT-DECLARATION-2012-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PARAMETER-PORT-DECLARATIONS-2012-FN 2 :SYSTEM
                                                        .
                                                        "centaur/vl/loader/parser/paramdecls"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PACKAGE-IMPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PACKAGE-IMPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PACKAGE-IMPORT-ITEMS-SEPARATED-BY-COMMAS-FN 3 :SYSTEM
                                                                . "centaur/vl/loader/parser/imports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (VL::VL-PLAUSIBLE-START-OF-PACKAGE-IMPORT-P-FN VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-PACKAGE-IMPORT-DECLARATION-FN 'NIL
                                                         VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-PACKAGE-IMPORT-DECLARATION-FN 'NIL
                                                                                                   VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-PACKAGE-IMPORT-DECLARATIONS-FN 2 :SYSTEM
                                                   . "centaur/vl/loader/parser/imports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-VARIABLE-TYPE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-VARIABLE-TYPE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-VARIABLE-IDENTIFIERS-FN 2 :SYSTEM
                                                 .
                                                 "centaur/vl/loader/parser/blockitems"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                    'VL::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                    VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                       'VL::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                                                       VL::TOKSTREAM))
                                        VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-0+-RANGES-FN (MV-NTH '2
                                                                                                                       (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                              'VL::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS
                                                                                                                                              VL::TOKSTREAM))
                                                                                                               VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-EVENT-IDENTIFIERS-FN 3 :SYSTEM
                                              .
                                              "centaur/vl/loader/parser/blockitems"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-BLOCK-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-BLOCK-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-BLOCK-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                               .
                                               "centaur/vl/loader/parser/blockitems"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-DIST-ITEM-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-DIST-ITEM-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-DIST-LIST-FN 2 :SYSTEM
                              .
                              "centaur/vl/loader/parser/properties"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-EXPRESSION-OR-DIST-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-EXPRESSION-OR-DIST-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-EXPRESSION-OR-DISTS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                               .
                                                               "centaur/vl/loader/parser/properties"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-SEQUENCE-MATCH-ITEM-FN (MV-NTH '2
                                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                  VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-SEQUENCE-MATCH-ITEM-FN (MV-NTH '2
                                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                            VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-SEQUENCE-MATCH-ITEM-LIST-FN 2 :SYSTEM
                                             .
                                             "centaur/vl/loader/parser/properties"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                    'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                    VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                    'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                    (MV-NTH '2
                                            (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                   'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                   VL::TOKSTREAM))))
     (MV-NTH '0
             (VL::VL-PARSE-RHS-FN (MV-NTH '2
                                          (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                 'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                 (MV-NTH '2
                                                                         (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                VL::TOKSTREAM))))
                                  VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-RHS-FN (MV-NTH '2
                                                                                                                   (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                                                                                          'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                                                          (MV-NTH '2
                                                                                                                                                  (VL::VL-MATCH-TOKEN-FN ':VL-IDTOKEN
                                                                                                                                                                         'VL::VL-PARSE-1+-ID=EXPR-PAIRS
                                                                                                                                                                         VL::TOKSTREAM))))
                                                                                                           VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-ID=EXPR-PAIRS-FN 4 :SYSTEM
                                     .
                                     "centaur/vl/loader/parser/statements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-FOR-VARIABLE-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-FOR-VARIABLE-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-FOR-VARIABLE-DECLARATIONS-FN 2 :SYSTEM
                                                 .
                                                 "centaur/vl/loader/parser/statements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-VARIABLE-ASSIGNMENT-FN (MV-NTH '2
                                                          (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
                                                  VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-VARIABLE-ASSIGNMENT-FN (MV-NTH '2
                                                                                                                                 (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
                                                                                                                         VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-FOR-INIT-ASSIGNMENTS-FN 2 :SYSTEM
                                            .
                                            "centaur/vl/loader/parser/statements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-OPERATOR-ASSIGNMENT/INC/DEC-FN (MV-NTH '2
                                                                  (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
                                                          VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-OPERATOR-ASSIGNMENT/INC/DEC-FN (MV-NTH '2
                                                                                                                                         (VL::VL-CURRENT-LOC-FN VL::TOKSTREAM))
                                                                                                                                 VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-FOR-STEP-ASSIGNS-FN 2 :SYSTEM
                                        .
                                        "centaur/vl/loader/parser/statements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (IF (VL::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                          VL::TOKSTREAM)
                 (IF (MV-NTH '0
                             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                     (CONS (MV-NTH '0
                                   (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                           (CONS (MV-NTH '1
                                         (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                 (CONS (MV-NTH '2
                                               (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                       'NIL)))
                   (CONS 'NIL
                         (CONS (CONS (MV-NTH '1
                                             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                     'NIL)
                               (CONS (MV-NTH '2
                                             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                     'NIL))))
               (CONS 'NIL
                     (CONS '(NIL)
                           (CONS VL::TOKSTREAM 'NIL)))))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (IF (VL::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                                                        VL::TOKSTREAM)
                                               (IF (MV-NTH '0
                                                           (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                   (CONS (MV-NTH '0
                                                                 (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                         (CONS (MV-NTH '1
                                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                               (CONS (MV-NTH '2
                                                                             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                     'NIL)))
                                                 (CONS 'NIL
                                                       (CONS (CONS (MV-NTH '1
                                                                           (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                   'NIL)
                                                             (CONS (MV-NTH '2
                                                                           (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                   'NIL))))
                                             (CONS 'NIL
                                                   (CONS '(NIL)
                                                         (CONS VL::TOKSTREAM 'NIL)))))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (IF (VL::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                                                       VL::TOKSTREAM)
                                              (IF (MV-NTH '0
                                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                  (CONS (MV-NTH '0
                                                                (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                        (CONS (MV-NTH '1
                                                                      (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                              (CONS (MV-NTH '2
                                                                            (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                    'NIL)))
                                                (CONS 'NIL
                                                      (CONS (CONS (MV-NTH '1
                                                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                  'NIL)
                                                            (CONS (MV-NTH '2
                                                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                  'NIL))))
                                            (CONS 'NIL
                                                  (CONS '(NIL)
                                                        (CONS VL::TOKSTREAM 'NIL)))))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (IF (VL::VL-IS-TOKEN?$INLINE ':VL-IDTOKEN
                                                                                                                 VL::TOKSTREAM)
                                                                                        (IF (MV-NTH '0
                                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                            (CONS (MV-NTH '0
                                                                                                          (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                                  (CONS (MV-NTH '1
                                                                                                                (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                                        (CONS (MV-NTH '2
                                                                                                                      (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                                              'NIL)))
                                                                                          (CONS 'NIL
                                                                                                (CONS (CONS (MV-NTH '1
                                                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                                            'NIL)
                                                                                                      (CONS (MV-NTH '2
                                                                                                                    (VL::VL-MATCH$INLINE VL::TOKSTREAM))
                                                                                                            'NIL))))
                                                                                      (CONS 'NIL
                                                                                            (CONS '(NIL)
                                                                                                  (CONS VL::TOKSTREAM 'NIL)))))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-FOREACH-LOOP-VARIABLES-FN 2 :SYSTEM
                                           .
                                           "centaur/vl/loader/parser/statements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
     (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                              (MV-NTH '2
                                      (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG)))
     (VL::VL-IS-TOKEN?$INLINE ':VL-RPAREN
                              (MV-NTH '2
                                      (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG)))
     (MV-NTH '0
             (VL::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                 (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                         VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-EXPRESSION-FN (MV-NTH '2
                                                                                                                        (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-ORDERED-PORT-CONNECTIONS-FN 2 :SYSTEM
                                                     . "centaur/vl/loader/parser/insts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-NAMED-PORT-CONNECTION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-LIST-OF-NAMED-PORT-CONNECTIONS-2005
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-NAMED-PORT-CONNECTION-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-NAMED-PORT-CONNECTIONS-2005-FN 2 :SYSTEM
                                                        . "centaur/vl/loader/parser/insts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-MODULE-INSTANCE-FN VL::MODNAME VL::PARAMARGS
                                              VL::ATTS VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-1+-MODULE-INSTANCES
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-MODULE-INSTANCE-FN VL::MODNAME VL::PARAMARGS
                                                                                                                       VL::ATTS VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-MODULE-INSTANCES-FN 5 :SYSTEM
                                        . "centaur/vl/loader/parser/insts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-UDP-INSTANCE-FN VL::LOC VL::MODNAME VL::STR VL::DELAY
                                           VL::ATTS VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-1+-UDP-INSTANCES
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-UDP-INSTANCE-FN VL::LOC VL::MODNAME VL::STR VL::DELAY
                                                                                                                    VL::ATTS VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-UDP-INSTANCES-FN 7 :SYSTEM
                                     . "centaur/vl/loader/parser/insts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-CMOS-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-CMOS-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-CMOS-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                               . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-ENABLE-OR-MOS-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-ENABLE-OR-MOS-INSTANCES-LIST
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-ENABLE-OR-MOS-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-ENABLE-OR-MOS-INSTANCES-LIST-FN 2 :SYSTEM
                                                 . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-N-INPUT-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-N-INPUT-GATE-INSTANCES-LIST
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-N-INPUT-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-N-INPUT-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                                . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-N-OUTPUT-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-N-OUTPUT-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-N-OUTPUT-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                                 . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-PASS-ENABLE-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                                      . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PASS-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PASS-SWITCH-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-PASS-SWITCH-INSTANCES-LIST-FN 2 :SYSTEM
                                               . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PULL-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PULL-GATE-INSTANCE-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-PULL-GATE-INSTANCES-LIST-FN 2 :SYSTEM
                                             . "centaur/vl/loader/parser/gates"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
     (MV-NTH '0
             (VL::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                           (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                   (MV-NTH '2
                                                           (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                   VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                         (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                 (MV-NTH '2
                                                                                         (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                 VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                    'VL::VL-PARSE-TASKPORT-LIST
                                    (MV-NTH '2
                                            (VL::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                          (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                  (MV-NTH '2
                                                                                          (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                  VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-COMMA
                                                                              'VL::VL-PARSE-TASKPORT-LIST
                                                                              (MV-NTH '2
                                                                                      (VL::VL-PARSE-TASKPORT-DECLARATION-FN (MV-NTH '1
                                                                                                                                    (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                            (MV-NTH '2
                                                                                                                                    (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                            VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-TASKPORT-LIST-FN 2 :SYSTEM
                                  . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-TASK-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-TASK-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-TASK-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                              . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDFUNCTION
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDFUNCTION
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDFUNCTION
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDFUNCTION
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDFUNCTION-FN 2 :SYSTEM
                                       . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDTASK
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDTASK
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDTASK
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDTASK
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDTASK-FN 2 :SYSTEM
                                   . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-SOME-TOKEN?$INLINE '(:VL-KWD-ENDFUNCTION :VL-KWD-ENDTASK)
                                   VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-PARSE-STATEMENT-OR-NULL-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-STATEMENT-OR-NULL-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-FUNCTION-STATEMENTS-AUX-FN 2 :SYSTEM
                                            . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-TF-PORT-ITEM-FN VL::PREV VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-TF-PORT-ITEM-FN VL::PREV VL::TOKSTREAM VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-PARSE-TF-PORT-ITEM-FN VL::PREV VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-TF-PORT-ITEM-FN VL::PREV VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-TF-PORT-LIST-AUX-FN 3 :SYSTEM
                                     . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL::TOKSTREAM VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-TF-VARIABLE-IDENTIFIER-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LIST-OF-TF-VARIABLE-IDENTIFIERS-FN 2 :SYSTEM
                                                    . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-TF-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-TF-ITEM-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-TF-ITEM-DECLARATIONS-FN 2 :SYSTEM
                                            . "centaur/vl/loader/parser/functions"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL::DIR
                                                  VL::ATTS VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL::DIR
                                                                                VL::ATTS VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-SIMPLE-MODPORT-PORT-FN VL::DIR
                                                                                                                         VL::ATTS VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-SIMPLE-MODPORT-PORTS-FN 4 :SYSTEM
                                            . "centaur/vl/loader/parser/modports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-MODPORT-PORT-FN VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-MODPORT-PORT-FN VL::TOKSTREAM VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-PARSE-MODPORT-PORT-FN VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-MODPORT-PORT-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-MODPORT-PORTS-FN 2 :SYSTEM
                                     . "centaur/vl/loader/parser/modports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-MODPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-COMMA
                                   (MV-NTH '2
                                           (VL::VL-PARSE-MODPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE (MV-NTH '2
                                          (VL::VL-PARSE-MODPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-MODPORT-ITEM-FN VL::ATTS VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-MODPORT-ITEMS-FN 3 :SYSTEM
                                     . "centaur/vl/loader/parser/modports"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-PROPERTY-PORT-ITEM-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-PROPERTY-PORT-ITEM-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-PROPERTY-PORT-ITEMS-FN 2 :SYSTEM
                                           . "centaur/vl/loader/parser/asserts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-SEQUENCE-PORT-ITEM-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-SEQUENCE-PORT-ITEM-FN VL::TOKSTREAM VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-SEQUENCE-PORT-ITEMS-FN 2 :SYSTEM
                                           . "centaur/vl/loader/parser/asserts"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDCLOCKING
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-PARSE-CLOCKING-BLOCK-ITEM-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-CLOCKING-BLOCK-ITEM-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-CLOCKING-BLOCK-ITEMS-UNTIL-ENDCLOCKING-FN 2 :SYSTEM
                                                           . "centaur/vl/loader/parser/clocking"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDGROUP
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-COVERGROUP-DECLARATION-AUX
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-COVERGROUP-DECLARATION-AUX
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-COVERGROUP-DECLARATION-AUX
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-COVERGROUP-DECLARATION-AUX-FN 2 :SYSTEM
                                               .
                                               "centaur/vl/loader/parser/covergroups"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                    'VL::VL-PARSE-1+-ALIAS-RHSES
                                    VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-PARSE-NET-LVALUE-FN (MV-NTH '2
                                                 (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                        'VL::VL-PARSE-1+-ALIAS-RHSES
                                                                        VL::TOKSTREAM))
                                         VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-NET-LVALUE-FN (MV-NTH '2
                                                                                           (VL::VL-MATCH-TOKEN-FN ':VL-EQUALSIGN
                                                                                                                  'VL::VL-PARSE-1+-ALIAS-RHSES
                                                                                                                  VL::TOKSTREAM))
                                                                                   VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-ALIAS-RHSES-FN 5 :SYSTEM
                                   . "centaur/vl/loader/parser/elements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDSPECIFY
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-SPECIFY-BLOCK-AUX
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-SPECIFY-BLOCK-AUX
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-SPECIFY-BLOCK-AUX
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-SPECIFY-BLOCK-AUX-FN 2 :SYSTEM
                                      . "centaur/vl/loader/parser/elements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PURE
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-STATIC
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PURE
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH-TOKEN-FN ':VL-KWD-VIRTUAL
                                    'VL::VL-PARSE-0+-CLASS-ITEM-QUALIFIERS
                                    (MV-NTH '2
                                            (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-TOKEN-FN ':VL-KWD-VIRTUAL
                                                                              'VL::VL-PARSE-0+-CLASS-ITEM-QUALIFIERS
                                                                              (MV-NTH '2
                                                                                      (VL::VL-MATCH$INLINE VL::TOKSTREAM))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PURE
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-VIRTUAL
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PURE
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-LOCAL
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PURE
                              VL::TOKSTREAM)
     (NOT (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-PROTECTED
                                   VL::TOKSTREAM))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-CLASS-ITEM-QUALIFIERS-FN 3 :SYSTEM
                                             . "centaur/vl/loader/parser/elements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (CONSP (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))
     (VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDCLASS
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-PARSE-CLASS-ELEMENT-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-CLASS-ELEMENT-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-CLASS-ELEMENTS-UNTIL-ENDCLASS-FN 2 :SYSTEM
                                                  . "centaur/vl/loader/parser/elements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDCLASS
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDCLASS
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDCLASS
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDCLASS
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDCLASS-FN 2 :SYSTEM
                                    . "centaur/vl/loader/parser/elements"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDMODULE
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDMODULE
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDMODULE
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDMODULE
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDMODULE-FN 2 :SYSTEM
                                     . "centaur/vl/loader/parser/modules"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-LEVEL-SYMBOL-FN VL::TOKSTREAM VL::CONFIG))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-PARSE-LEVEL-SYMBOL-FN VL::TOKSTREAM VL::CONFIG))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-LEVEL-SYMBOL-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-LEVEL-INPUT-LIST-FN 2 :SYSTEM
                                     . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-COMBINATIONAL-ENTRY-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-COMBINATIONAL-ENTRY-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-COMBINATIONAL-ENTRIES-UNTIL-ENDTABLE-FN 2 :SYSTEM
                                                         . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (CONSP (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))
     (NOT (VL::VL-UDP-LEVEL-SYMBOL-TOKEN-P (CAR (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (MV-NTH '0
             (VL::VL-MATCH$INLINE VL::TOKSTREAM))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-LEVEL-SYMBOLS-FN 2 :SYSTEM
                                     . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-SEQUENTIAL-ENTRY-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-SEQUENTIAL-ENTRY-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-SEQUENTIAL-ENTRIES-UNTIL-ENDTABLE-FN 2 :SYSTEM
                                                      . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
     (MV-NTH '0
             (VL::VL-PARSE-UDP-INPUT-DECLARATION-FN (MV-NTH '1
                                                            (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                    (MV-NTH '2
                                                            (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                    VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH$INLINE (MV-NTH '2
                                                                                    (VL::VL-PARSE-UDP-INPUT-DECLARATION-FN (MV-NTH '1
                                                                                                                                   (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                           (MV-NTH '2
                                                                                                                                   (VL::VL-PARSE-0+-ATTRIBUTE-INSTANCES-FN VL::TOKSTREAM VL::CONFIG))
                                                                                                                           VL::CONFIG))))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-1+-UDP-INPUT-DECLARATIONS-SEPARATED-BY-COMMAS-FN 2 :SYSTEM
                                                                  . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((MV-NTH '0
             (VL::VL-PARSE-UDP-PORT-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-UDP-PORT-DECLARATION-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-0+-UDP-PORT-DECLARATIONS-FN 2 :SYSTEM
                                             . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPRIMITIVE
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPRIMITIVE
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPRIMITIVE
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPRIMITIVE
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDPRIMITIVE-FN 3 :SYSTEM
                                        . "centaur/vl/loader/parser/udps"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDINTERFACE
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDINTERFACE
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDINTERFACE
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDINTERFACE
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDINTERFACE-FN 2 :SYSTEM
                                        .
                                        "centaur/vl/loader/parser/interfaces"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPACKAGE
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPACKAGE
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPACKAGE
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-SKIP-THROUGH-ENDPACKAGE
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-SKIP-THROUGH-ENDPACKAGE-FN 3 :SYSTEM
                                      . "centaur/vl/loader/parser/packages"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDPROGRAM
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-PROGRAM-DECLARATION-AUX
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-PROGRAM-DECLARATION-AUX
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-PROGRAM-DECLARATION-AUX
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-PROGRAM-DECLARATION-AUX-FN 2 :SYSTEM
                                            . "centaur/vl/loader/parser/programs"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((VL::VL-IS-TOKEN?$INLINE ':VL-KWD-ENDCONFIG
                              VL::TOKSTREAM)
     (MV-NTH '0
             (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-CONFIG-DECLARATION-AUX
                                      VL::TOKSTREAM))
     (NOT (< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                           (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-CONFIG-DECLARATION-AUX
                                                                                    VL::TOKSTREAM))))
             (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-MATCH-ANY$INLINE 'VL::VL-PARSE-CONFIG-DECLARATION-AUX
                                                                                VL::TOKSTREAM))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-CONFIG-DECLARATION-AUX-FN 2 :SYSTEM
                                           . "centaur/vl/loader/parser/configs"))
  ((JUSTIFICATION (VL::TOKSTREAM)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM))))
    ((NOT (CONSP (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))
     (MV-NTH '0
             (VL::VL-PARSE-DESCRIPTION-FN VL::TOKSTREAM VL::CONFIG))
     (O< (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE (MV-NTH '2
                                                       (VL::VL-PARSE-DESCRIPTION-FN VL::TOKSTREAM VL::CONFIG))))
         (LEN (VL::VL-TOKSTREAM->TOKENS$INLINE VL::TOKSTREAM)))))
   (VL::VL-PARSE-SOURCE-TEXT-FN 2 :SYSTEM
                                . "centaur/vl/loader/parser/top")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-DEFINES-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-DEFINES-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-DEFINES-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-DEFINES-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-DEFINES-FIX$INLINE (CDR (VL::VL-DEFINES-FIX$INLINE VL::X))))
         (LEN (VL::VL-DEFINES-FIX$INLINE VL::X)))))
   (VL::VL-PP-DEFINES-FN 2 :SYSTEM
                         .
                         "centaur/vl/loader/preprocessor/print-defines")
   (VL::VL-JP-DEFINFO-AUX-FN :SYSTEM
                             . "centaur/vl/lint/ifdef-report")))
 ((JUSTIFICATION (VL::SEARCHCACHE)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::SEARCHCACHE)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))))
    ((NOT (CONSP (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))
     (MV-NTH '0
             (VL::VL-FIND-BASENAME/EXTENSION-AUX VL::FILENAME VL::EXTENSIONS
                                                 (CAR (CAR (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))
                                                 (CDR (CAR (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))
                                                 VL::WARNINGS))
     (O< (LEN (VL::VL-DIRXLIST-CACHE-FIX$INLINE (CDR (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE))))
         (LEN (VL::VL-DIRXLIST-CACHE-FIX$INLINE VL::SEARCHCACHE)))))
   (VL::VL-FIND-BASENAME/EXTENSION 4 :SYSTEM
                                   . "centaur/vl/loader/find-file")))
 ((JUSTIFICATION (N FGL::BITARR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                                  (UNARY-- (NFIX N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N FGL::BITARR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                       (UNARY-- (NFIX N)))))
     (O< (NFIX (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE N))))))
         (NFIX (BINARY-+ (FGL::BITS-LENGTH FGL::BITARR)
                         (UNARY-- (NFIX N)))))))
   (FGL::BITARR-COUNT-AUX 3 :SYSTEM
                          . "centaur/fgl/gatecount-base")))
 ((JUSTIFICATION (FGL::INTERP-PROFILER)
                 (NIL O-P . O<)
                 ((LEN (FGL::PROF-STACK FGL::INTERP-PROFILER))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (FGL::INTERP-PROFILER)
                  (NIL O-P . O<)
                  ((LEN (FGL::PROF-STACK FGL::INTERP-PROFILER))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (FGL::PROF-STACK FGL::INTERP-PROFILER))))
    ((NOT (FGL::PROF-ENABLEDP FGL::INTERP-PROFILER))
     (NOT (CONSP (FGL::PROF-STACK FGL::INTERP-PROFILER)))
     (O< (LEN (FGL::PROF-STACK (FGL::PROF-POP-INCREMENT 'NIL
                                                        FGL::INTERP-PROFILER)))
         (LEN (FGL::PROF-STACK FGL::INTERP-PROFILER)))))
   (FGL::PROF-UNWIND-STACK-AUX 1 :SYSTEM . "centaur/fgl/prof")))
 ((JUSTIFICATION (FGL::PATHCOND FGL::LOGICMAN)
                 (NIL O-P . O<)
                 ((FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                                  FGL::PATHCOND)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (FGL::PATHCOND FGL::LOGICMAN)
                  (NIL O-P . O<)
                  ((FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                                   FGL::PATHCOND)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                          FGL::PATHCOND)))
    ((NOT (INTEGERP (FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                                    FGL::PATHCOND)))
     (NOT (< '0
             (FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                             FGL::PATHCOND)))
     (NOT (FGL::PATHCOND-ENABLEDP FGL::PATHCOND))
     (O< (FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                         (FGL::PATHCOND-REWIND (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                                               FGL::PATHCOND))
         (FGL::PATHCOND-REWIND-STACK-LEN (FGL::LOGICMAN->MODE$INLINE FGL::LOGICMAN)
                                         FGL::PATHCOND))))
   (FGL::LOGICMAN-PATHCOND-EVAL-CHECKPOINTS 3 :SYSTEM . "centaur/fgl/pathcond")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (AIGNET::NBALIST-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (AIGNET::NBALIST-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (AIGNET::NBALIST-FIX$INLINE X))))
    ((NOT (CONSP (AIGNET::NBALIST-FIX$INLINE X)))
     (O< (LEN (AIGNET::NBALIST-FIX$INLINE (CDR (AIGNET::NBALIST-FIX$INLINE X))))
         (LEN (AIGNET::NBALIST-FIX$INLINE X)))))
   (AIGNET::NBALIST-BOUND 1
                          :SYSTEM . "centaur/fgl/pathcond-aignet")
   (AIGNET::NBALIST-TO-CNF :SYSTEM
                           .
                           "centaur/fgl/pathcond-aignet-ipasir")))
 ((JUSTIFICATION (AIGNET::N INTSTACK)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N INTSTACK)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                                    (UNARY-- (NFIX AIGNET::N))))))
     (NOT (< '0
             (NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                             (UNARY-- (NFIX AIGNET::N))))))
     (O< (NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (INTSTACK-COUNT INTSTACK)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::NBALIST-STOBJ-NBALIST$C-AUX 3 :SYSTEM
                                        . "centaur/fgl/aignet-pathcond-stobj")))
 ((JUSTIFICATION (FGL::CALIST-STOBJ)
                 (NIL O-P . O<)
                 ((LEN (FGL::CALIST-FIX$INLINE FGL::CALIST-STOBJ))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (FGL::CALIST-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (FGL::CALIST-FIX$INLINE X))))
    ((EQUAL (FGL::CALIST-FIX$INLINE X)
            (FGL::CALIST-FIX$INLINE Y))
     (NOT (CONSP (FGL::CALIST-FIX$INLINE X)))
     (O< (LEN (FGL::CALIST-FIX$INLINE (CDR (FGL::CALIST-FIX$INLINE X))))
         (LEN (FGL::CALIST-FIX$INLINE X)))))
   (FGL::CALIST-EXTENSION-P 2 :SYSTEM . "centaur/fgl/pathcond-aig"))
  ((JUSTIFICATION (FGL::CALIST-STOBJ)
                  (NIL O-P . O<)
                  ((LEN (FGL::CALIST-FIX$INLINE FGL::CALIST-STOBJ))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (FGL::CALIST-FIX$INLINE FGL::CALIST-STOBJ))))
    ((NOT (< (NFIX N)
             (FGL::CALIST-STOBJ-LEN (FGL::CALIST-STOBJ-FIX FGL::CALIST-STOBJ))))
     (O< (LEN (FGL::CALIST-FIX$INLINE (FGL::CALIST-STOBJ-POP (FGL::CALIST-STOBJ-FIX FGL::CALIST-STOBJ))))
         (LEN (FGL::CALIST-FIX$INLINE FGL::CALIST-STOBJ)))))
   (FGL::REWIND-CALIST 2
                       :SYSTEM . "centaur/fgl/pathcond-aig")))
 ((JUSTIFICATION (FGL::BVAR-DB N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (NFIX N)
                                  (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (FGL::BVAR-DB N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX N)
                                   (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX N)
                          (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB))))))
    ((NOT (INTEGERP (BINARY-+ (LNFIX$INLINE N)
                              (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB)))))
     (NOT (< '0
             (BINARY-+ (LNFIX$INLINE N)
                       (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB)))))
     (O< (NFIX (BINARY-+ (NFIX (BINARY-+ '-1 (LNFIX$INLINE N)))
                         (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB))))
         (NFIX (BINARY-+ (NFIX N)
                         (UNARY-- (FGL::BASE-BVAR FGL::BVAR-DB)))))))
   (FGL::BVAR-DB-BFRLIST-AUX 2
                             :SYSTEM . "centaur/fgl/bvar-db-bfrlist")
   (FGL::BVAR-DB-MARK-BFRS-AUX :SYSTEM . "centaur/fgl/mark-bfrs")))
 ((JUSTIFICATION (N)
                 (NIL O-P . O<)
                 ((POS-FIX N) IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((POS-FIX N) IF MV-LIST RETURN-LAST))
   (((O-P (POS-FIX N)))
    ((MV-NTH '2 (GL::FIRST/REST/END X))
     (EQUAL (LPOSFIX$INLINE N) '1)
     (O< (POS-FIX (BINARY-+ '-1 (LPOSFIX$INLINE N)))
         (POS-FIX N))))
   (GL::BFR-LOGEXT-NS 2 :SYSTEM
                      . "centaur/gl/symbolic-arithmetic")
   (SV::AIG-LOGEXT-NS :SYSTEM . "centaur/sv/svex/aig-arith"))
  ((JUSTIFICATION (COUNT)
                  (NIL O-P . O<)
                  ((POS-FIX COUNT)
                   IF MV-LIST RETURN-LAST))
   (((O-P (POS-FIX COUNT)))
    ((EQUAL (LPOSFIX$INLINE COUNT) '1)
     (O< (POS-FIX (BINARY-+ (LPOSFIX$INLINE COUNT)
                            (UNARY-- (LOGCDR$INLINE (LPOSFIX$INLINE COUNT)))))
         (POS-FIX COUNT)))
    ((EQUAL (LPOSFIX$INLINE COUNT) '1)
     (O< (POS-FIX (LOGCDR$INLINE (LPOSFIX$INLINE COUNT)))
         (POS-FIX COUNT))))
   (AIGNET::AIGNET-HASH-AND-SUPERGATE-AUX 6 :SYSTEM
                                          .
                                          "centaur/aignet/supergate-construction"))
  ((JUSTIFICATION (SV::KNOWN-WIDTH)
                  (NIL O-P . O<)
                  ((POS-FIX SV::KNOWN-WIDTH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (POS-FIX SV::KNOWN-WIDTH)))
    ((EQUAL (POS-FIX SV::KNOWN-WIDTH) '1)
     (NOT (SV::SVEX-WIDTH-LIMITED-P (BINARY-+ '-1 (POS-FIX SV::KNOWN-WIDTH))
                                    X))
     (O< (POS-FIX (BINARY-+ '-1
                            (POS-FIX SV::KNOWN-WIDTH)))
         (POS-FIX SV::KNOWN-WIDTH))))
   (SV::MINIMIZE-SVEX-WIDTH 2 :SYSTEM . "centaur/sv/svex/width"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((POS-FIX N) IF MV-LIST RETURN-LAST))
   (((O-P (POS-FIX N)))
    ((MV-NTH '2 (FGL::AABF-FIRST/REST/END X))
     (EQUAL (LPOSFIX$INLINE N) '1)
     (O< (POS-FIX (BINARY-+ '-1 (LPOSFIX$INLINE N)))
         (POS-FIX N))))
   (FGL::AABF-LOGEXT-NS 2 :SYSTEM
                        . "centaur/fgl/symbolic-arithmetic"))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((POS-FIX N) IF MV-LIST RETURN-LAST))
   (((O-P (POS-FIX N)))
    ((MV-NTH '2 (FGL::BFR-FIRST/REST/END X))
     (EQUAL (LPOSFIX$INLINE N) '1)
     (O< (POS-FIX (BINARY-+ '-1 (LPOSFIX$INLINE N)))
         (POS-FIX N))))
   (FGL::BFR-LOGEXT-NS 2 :SYSTEM
                       . "centaur/fgl/bfr-arithmetic")))
 ((JUSTIFICATION (Y X)
                 (NIL O-P . O<)
                 ((BINARY-+ (SV::LHS-WIDTH X)
                            (SV::LHS-WIDTH Y))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((BINARY-+ (SV::LHS-WIDTH X)
                             (SV::LHS-WIDTH Y))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (SV::LHS-WIDTH X)
                    (SV::LHS-WIDTH Y))))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (O< (BINARY-+ (SV::LHS-WIDTH (SV::LHS-RSH (MIN (SV::LHRANGE->W$INLINE (CAR X))
                                                    (SV::LHRANGE->W$INLINE (CAR Y)))
                                               X))
                   (SV::LHS-WIDTH (SV::LHS-RSH (MIN (SV::LHRANGE->W$INLINE (CAR X))
                                                    (SV::LHRANGE->W$INLINE (CAR Y)))
                                               Y)))
         (BINARY-+ (SV::LHS-WIDTH X)
                   (SV::LHS-WIDTH Y)))))
   (SV::LHS-JOIN 2 :SYSTEM
                 .
                 "centaur/sv/svtv/name-lhs-map-inverse")))
 ((JUSTIFICATION (SV::N SV::ELAB-MOD)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                                  (UNARY-- (NFIX SV::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::N SV::ELAB-MOD)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE SV::N))))))
         (NFIX (BINARY-+ (SV::ELAB-MOD-NWIRES SV::ELAB-MOD)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::ELAB-MOD->VCD-WIRES 3 :SYSTEM . "centaur/sv/svtv/vcd")))
 ((JUSTIFICATION (PHASE SV::NPHASES)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (POS-FIX SV::NPHASES)
                                  (UNARY-- (NFIX PHASE))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PHASE SV::NPHASES)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (POS-FIX SV::NPHASES)
                                   (UNARY-- (NFIX PHASE))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (POS-FIX SV::NPHASES)
                          (UNARY-- (NFIX PHASE))))))
    ((NOT (INTEGERP (BINARY-+ (POS-FIX SV::NPHASES)
                              (UNARY-- (NFIX PHASE)))))
     (NOT (< '0
             (BINARY-+ (POS-FIX SV::NPHASES)
                       (UNARY-- (NFIX PHASE)))))
     (O< (NFIX (BINARY-+ (POS-FIX SV::NPHASES)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE PHASE))))))
         (NFIX (BINARY-+ (POS-FIX SV::NPHASES)
                         (UNARY-- (NFIX PHASE)))))))
   (SV::SVTV-ALLPHASES-INPUTS 5 :SYSTEM . "centaur/sv/svtv/process")))
 ((JUSTIFICATION (VL::BLAME-ALIST)
                 (NIL O-P . O<)
                 ((VL::VL-BLAMEALIST-COUNT VL::BLAME-ALIST)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::BLAME-ALIST)
                  (NIL O-P . O<)
                  ((VL::VL-BLAMEALIST-COUNT VL::BLAME-ALIST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-BLAMEALIST-COUNT VL::BLAME-ALIST)))
    ((NOT (CONSP (VL::VL-BLAMEALIST-FIX$INLINE VL::BLAME-ALIST)))
     (O< (VL::VL-BLAMEALIST-COUNT (CDR (VL::VL-BLAMEALIST-FIX$INLINE VL::BLAME-ALIST)))
         (VL::VL-BLAMEALIST-COUNT VL::BLAME-ALIST))))
   (VL::VL-BLAME-ALIST-TO-REPORTCARD 2 :SYSTEM
                                     . "centaur/vl/mlib/remove-bad")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-BLAMEALIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-BLAMEALIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-BLAMEALIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-BLAMEALIST-FIX$INLINE VL::X)))
     (O< (ACL2-COUNT (VL::VL-BLAMEALIST-FIX$INLINE (CDR (VL::VL-BLAMEALIST-FIX$INLINE VL::X))))
         (ACL2-COUNT (VL::VL-BLAMEALIST-FIX$INLINE VL::X)))))
   (VL::VL-BLAMEALIST-COUNT 1 :SYSTEM
                            . "centaur/vl/mlib/remove-bad")))
 ((JUSTIFICATION (VL::NAMESET VL::DIGITSTR VL::BASE)
                 (NIL O-P . O<)
                 ((VL::ADDNAMES-NAMESET-ELTS-LONGER-THAN (BINARY-+ (LENGTH (VL::STRING-FIX$INLINE VL::BASE))
                                                                   (LENGTH (VL::STRING-FIX$INLINE VL::DIGITSTR)))
                                                         VL::NAMESET)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::NAMESET VL::DIGITSTR VL::BASE)
                  (NIL O-P . O<)
                  ((VL::ADDNAMES-NAMESET-ELTS-LONGER-THAN (BINARY-+ (LENGTH (VL::STRING-FIX$INLINE VL::BASE))
                                                                    (LENGTH (VL::STRING-FIX$INLINE VL::DIGITSTR)))
                                                          VL::NAMESET)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::ADDNAMES-NAMESET-ELTS-LONGER-THAN (BINARY-+ (LENGTH (VL::STRING-FIX$INLINE VL::BASE))
                                                           (LENGTH (VL::STRING-FIX$INLINE VL::DIGITSTR)))
                                                 VL::NAMESET)))
    ((NOT (HONS-GET (STR::FAST-STRING-APPEND VL::BASE VL::DIGITSTR)
                    VL::NAMESET))
     (O< (VL::ADDNAMES-NAMESET-ELTS-LONGER-THAN (BINARY-+ (LENGTH (VL::STRING-FIX$INLINE VL::BASE))
                                                          (LENGTH (VL::STRING-FIX$INLINE (STR::FAST-STRING-APPEND '"0"
                                                                                                                  VL::DIGITSTR))))
                                                VL::NAMESET)
         (VL::ADDNAMES-NAMESET-ELTS-LONGER-THAN (BINARY-+ (LENGTH (VL::STRING-FIX$INLINE VL::BASE))
                                                          (LENGTH (VL::STRING-FIX$INLINE VL::DIGITSTR)))
                                                VL::NAMESET))))
   (VL::ADDNAMES-FIND-NEW-NAME 3 :SYSTEM
                               . "centaur/vl/transforms/addnames")))
 ((JUSTIFICATION (VL::BOTTOM VL::TOP)
                 (NIL O-P . O<)
                 ((ABS (BINARY-+ (IFIX VL::TOP)
                                 (UNARY-- (IFIX VL::BOTTOM))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::MSB VL::LSB)
                  (NIL O-P . O<)
                  ((ABS (BINARY-+ (IFIX VL::LSB)
                                  (UNARY-- (IFIX VL::MSB))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABS (BINARY-+ (IFIX VL::LSB)
                         (UNARY-- (IFIX VL::MSB))))))
    ((EQUAL (LIFIX$INLINE VL::LSB)
            (LIFIX$INLINE VL::MSB))
     (O< (ABS (BINARY-+ (IFIX VL::LSB)
                        (UNARY-- (IFIX (IF (< (LIFIX$INLINE VL::LSB)
                                              (LIFIX$INLINE VL::MSB))
                                           (BINARY-+ '-1 (LIFIX$INLINE VL::MSB))
                                         (BINARY-+ (LIFIX$INLINE VL::MSB)
                                                   '1))))))
         (ABS (BINARY-+ (IFIX VL::LSB)
                        (UNARY-- (IFIX VL::MSB)))))))
   (VL::VL-ARRAY-ASSIGNPAT-KEYVAL-RESOLVE 3 :SYSTEM . "centaur/sv/vl/expr"))
  ((JUSTIFICATION (VL::BOTTOM VL::TOP)
                  (NIL O-P . O<)
                  ((ABS (BINARY-+ (IFIX VL::TOP)
                                  (UNARY-- (IFIX VL::BOTTOM))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ABS (BINARY-+ (IFIX VL::TOP)
                         (UNARY-- (IFIX VL::BOTTOM))))))
    ((EQUAL (LIFIX$INLINE VL::TOP)
            (LIFIX$INLINE VL::BOTTOM))
     (O< (ABS (BINARY-+ (IFIX (IF (< (LIFIX$INLINE VL::TOP)
                                     (LIFIX$INLINE VL::BOTTOM))
                                  (BINARY-+ '1 (LIFIX$INLINE VL::TOP))
                                (BINARY-+ '-1 (LIFIX$INLINE VL::TOP))))
                        (UNARY-- (IFIX (LIFIX$INLINE VL::BOTTOM)))))
         (ABS (BINARY-+ (IFIX VL::TOP)
                        (UNARY-- (IFIX VL::BOTTOM)))))))
   (VL::VL-ENUMNAME-RANGE-DECLARATIONS 7 :SYSTEM
                                       .
                                       "centaur/vl/transforms/annotate/enumnames")))
 ((JUSTIFICATION (VL::DELTA)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::DELTA)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA))))
    ((NOT (CONSP (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA)))
     (O< (LEN (VL::VL-BINDDELTA-FIX$INLINE (CDR (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA))))
         (LEN (VL::VL-BINDDELTA-FIX$INLINE VL::DELTA)))))
   (VL::VL-WARN-BINDDELTA-UNDEFINED 2 :SYSTEM
                                    .
                                    "centaur/vl/transforms/annotate/bind")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-IFPORT-ALIST-FIX$INLINE (CDR (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-IFPORT-ALIST-FIX$INLINE VL::X)))))
   (VL::VL-UNPARAM-BASENAME-IFPORTS-FN 2 :SYSTEM
                                       . "centaur/vl/transforms/unparam/top")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-ATTS-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-ATTS-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-ATTS-COUNT VL::X)))
    ((NOT (CONSP (VL::VL-ATTS-FIX$INLINE VL::X)))
     (O< (VL::VL-ATTS-COUNT (CDR (VL::VL-ATTS-FIX$INLINE VL::X)))
         (VL::VL-ATTS-COUNT VL::X))))
   (VL::VL-ATTS->SVEX 4 :SYSTEM . "centaur/sv/vl/moddb")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-REPORTCARD-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-REPORTCARD-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-REPORTCARD-COUNT VL::X)))
    ((NOT (CONSP (VL::VL-REPORTCARD-FIX$INLINE VL::X)))
     (O< (VL::VL-REPORTCARD-COUNT (CDR (VL::VL-REPORTCARD-FIX$INLINE VL::X)))
         (VL::VL-REPORTCARD-COUNT VL::X))))
   (VL::VL-CLEAN-REPORTCARD-AUX 2
                                :SYSTEM . "centaur/vl/mlib/reportcard")
   (VL::VL-PRINT-REPORTCARD-AUX-FN :SYSTEM
                                   . "centaur/vl/mlib/print-warnings")))
 ((JUSTIFICATION (VL::WRITE-MASKS)
                 (NIL O-P . O<)
                 ((LEN (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::WRITE-MASKS)
                  (NIL O-P . O<)
                  ((LEN (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS))))
    ((NOT (CONSP (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS)))
     (O< (LEN (SV::4VMASK-ALIST-FIX$INLINE (CDR (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS))))
         (LEN (SV::4VMASK-ALIST-FIX$INLINE VL::WRITE-MASKS)))))
   (VL::VL-ALWAYS->SVEX-LATCH-WARNINGS 2 :SYSTEM . "centaur/sv/vl/vl-svstmt")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-CASELIST-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-CASELIST-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-CASELIST-COUNT VL::X)))
    ((NOT (CONSP (VL::VL-CASELIST-FIX$INLINE VL::X)))
     (O< (VL::VL-CASELIST-COUNT (CDR (VL::VL-CASELIST-FIX$INLINE VL::X)))
         (VL::VL-CASELIST-COUNT VL::X))))
   (VL::VL-REBUILD-CASELIST 3
                            :SYSTEM . "centaur/vl/mlib/stmt-tools")
   (VL::VL-FILTER-PARSED-CASEITEMLIST :SYSTEM
                                      .
                                      "centaur/vl/loader/parser/statements")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VTTREE-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VTTREE-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VTTREE-COUNT VL::X)))
    ((NOT (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
                 ':CONTEXT))
     (O< (VL::VTTREE-COUNT (VL::VTTREE-CONTEXT->SUBTREE$INLINE VL::X))
         (VL::VTTREE-COUNT VL::X)))
    ((EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':NONE)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':WARNINGS)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':CONSTRAINTS)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':CONTEXT)
     (O< (VL::VTTREE-COUNT (VL::VTTREE-BRANCH->RIGHT$INLINE VL::X))
         (VL::VTTREE-COUNT VL::X)))
    ((EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':NONE)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':WARNINGS)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':CONSTRAINTS)
     (EQUAL (VL::VTTREE-KIND$INLINE VL::X)
            ':CONTEXT)
     (O< (VL::VTTREE-COUNT (VL::VTTREE-BRANCH->LEFT$INLINE VL::X))
         (VL::VTTREE-COUNT VL::X))))
   (VL::VTTREE->WARNINGS-ACC 3 :SYSTEM . "centaur/sv/vl/expr")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-DATATYPE-COUNT VL::X) . :ALL))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-DATATYPE-COUNT VL::X) . :ALL))
   (((O-P (VL::VL-DATATYPE-COUNT VL::X)))
    ((EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-CORETYPE)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-STRUCT)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-UNION)
     (EQUAL (VL::VL-DATATYPE-KIND$INLINE VL::X)
            ':VL-ENUM)
     (NOT (VL::VL-USERTYPE->RES$INLINE VL::X))
     (O< (VL::VL-DATATYPE-COUNT (VL::VL-USERTYPE->RES$INLINE VL::X))
         (VL::VL-DATATYPE-COUNT VL::X))))
   (VL::VL-DATATYPE-$DIMENSIONS 1 :SYSTEM . "centaur/sv/vl/expr")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 (((LAMBDA (X) (ACL2-COUNT X))
                   (SV::SVEX-SELECT-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  (((LAMBDA (X) (ACL2-COUNT X))
                    (SV::SVEX-SELECT-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (SV::SVEX-SELECT-FIX$INLINE X))))
    ((NOT (EQUAL (SV::SVEX-SELECT-KIND$INLINE X)
                 ':PART))
     (O< (ACL2-COUNT (SV::SVEX-SELECT-FIX$INLINE (SV::SVEX-SELECT-PART->SUBEXP$INLINE X)))
         (ACL2-COUNT (SV::SVEX-SELECT-FIX$INLINE X)))))
   (SV::SVEX-SELECT-COUNT 1 :SYSTEM . "centaur/sv/svex/select")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE (CDR (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X))))
         (LEN (VL::VL-FUNCTION-SPECIALIZATION-MAP-FIX$INLINE VL::X)))))
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-STRIP 1 :SYSTEM . "centaur/vl/mlib/strip")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-CHECK-GLOBALPARAMS :SYSTEM
                                                          . "centaur/vl/lint/check-globalparams")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-CONDCHECK! :SYSTEM . "centaur/vl/lint/condcheck")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-SCAN-FOR-IGNORE :SYSTEM
                                                       . "centaur/vl/lint/suppress-warnings")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-LVALUECHECK :SYSTEM . "centaur/vl/lint/lvaluecheck")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-ADDNAMES :SYSTEM
                                                . "centaur/vl/transforms/addnames")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-INCREWRITE :SYSTEM
                                                  .
                                                  "centaur/vl/transforms/annotate/increment-elim")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-TYPE-DISAMBIGUATE :SYSTEM
                                                         .
                                                         "centaur/vl/transforms/annotate/type-disambiguation")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-DELTEMPS :SYSTEM
                                                .
                                                "centaur/vl/transforms/annotate/shadowcheck")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-ALLEXPRS-NREV :SYSTEM . "centaur/vl/mlib/allexprs")
   (VL::VL-FUNCTION-SPECIALIZATION-MAP-COLLECT-CLASSES :SYSTEM
                                                       .
                                                       "centaur/vl/transforms/unparam/expr-classes")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((LEN (VL::VL-EVATOMLIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((LEN (VL::VL-EVATOMLIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL::VL-EVATOMLIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-EVATOMLIST-FIX$INLINE VL::X)))
     (O< (LEN (VL::VL-EVATOMLIST-FIX$INLINE (CDR (VL::VL-EVATOMLIST-FIX$INLINE VL::X))))
         (LEN (VL::VL-EVATOMLIST-FIX$INLINE VL::X)))))
   (VL::VL-EVATOMLIST->SUBEXPRS 1 :SYSTEM
                                . "centaur/vl/mlib/expr-tools")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 ((VL::VL-KEYVALLIST-COUNT VL::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  ((VL::VL-KEYVALLIST-COUNT VL::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL::VL-KEYVALLIST-COUNT VL::X)))
    ((NOT (CONSP (VL::VL-KEYVALLIST-FIX$INLINE VL::X)))
     (O< (VL::VL-KEYVALLIST-COUNT (CDR (VL::VL-KEYVALLIST-FIX$INLINE VL::X)))
         (VL::VL-KEYVALLIST-COUNT VL::X))))
   (VL::VL-KEYVALLIST->SUBEXPRS 1 :SYSTEM
                                . "centaur/vl/mlib/expr-tools")))
 ((JUSTIFICATION (VL::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                   (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL::X) (ACL2-COUNT VL::X))
                    (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X))))
    ((NOT (CONSP (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X)))
     (O< (ACL2-COUNT (VL::VL-LUCIDMERGEALIST-FIX$INLINE (CDR (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X))))
         (ACL2-COUNT (VL::VL-LUCIDMERGEALIST-FIX$INLINE VL::X)))))
   (VL::VL-LUCIDMERGEALIST-COUNT 1 :SYSTEM . "centaur/vl/lint/lucid")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::SVAR->DELAY$INLINE X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVAR->DELAY$INLINE X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVAR->DELAY$INLINE X)))
    ((EQUAL '0
            (SV::SVAR->DELAY$INLINE (SV::SVAR-FIX$INLINE X)))
     (O< (SV::SVAR->DELAY$INLINE (SV::SVAR (SV::SVAR->NAME$INLINE (SV::SVAR-FIX$INLINE X))
                                           (BINARY-+ '-1
                                                     (SV::SVAR->DELAY$INLINE (SV::SVAR-FIX$INLINE X)))
                                           (SV::SVAR->BITS$INLINE (SV::SVAR-FIX$INLINE X))
                                           (SV::SVAR->PROPS$INLINE (SV::SVAR-FIX$INLINE X))))
         (SV::SVAR->DELAY$INLINE X))))
   (SV::DELAY-SVAR->DELAYS 1 :SYSTEM . "centaur/sv/mods/compile")))
 ((JUSTIFICATION (N)
                 (NIL O-P . O<)
                 ((POS-FIX N) CONS))
  ((JUSTIFICATION (N)
                  (NIL O-P . O<)
                  ((POS-FIX N) CONS))
   (((O-P (POS-FIX N)))
    ((EQUAL (LPOSFIX$INLINE N) '1)
     (O< (POS-FIX (BINARY-+ '-1 N))
         (POS-FIX N))))
   (FGL::NEST-LOGCONSES-FOR-LOGAPP 1 :SYSTEM
                                   . "centaur/fgl/bitops-primitives")))
 ((JUSTIFICATION (SV::MASK)
                 (NIL O-P . O<)
                 ((BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::MASK)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK)))))
    ((BITOPS::SPARSEINT-EQUAL$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK))
                                     '0)
     (O< (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE (BITOPS::SPARSEINT-RIGHTSHIFT$INLINE '1
                                                                                                                                 (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK))))))
         (BITOPS::SPARSEINT-LENGTH$INLINE (SV::SPARSEINT-NFIX$INLINE (SV::4VMASK-FIX$INLINE SV::MASK))))))
   (SV::4VMASK-TO-A4VEC-REC-ENV 5
                                :SYSTEM . "centaur/sv/svex/symbolic")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::SVEX-A4VEC-ENV-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::SVEX-A4VEC-ENV-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::SVEX-A4VEC-ENV-FIX$INLINE X))))
    ((NOT (CONSP (SV::SVEX-A4VEC-ENV-FIX$INLINE X)))
     (O< (LEN (SV::SVEX-A4VEC-ENV-FIX$INLINE (CDR (SV::SVEX-A4VEC-ENV-FIX$INLINE X))))
         (LEN (SV::SVEX-A4VEC-ENV-FIX$INLINE X)))))
   (SV::SVEX-A4VEC-ENV-EVAL 2
                            :SYSTEM . "centaur/sv/svex/symbolic")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::SVAR-SPLIT-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::SVAR-SPLIT-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::SVAR-SPLIT-COUNT X)))
    ((NOT (EQUAL (SV::SVAR-SPLIT-KIND$INLINE X)
                 ':SEGMENT))
     (O< (SV::SVAR-SPLIT-COUNT (SV::SVAR-SPLIT-SEGMENT->REST$INLINE X))
         (SV::SVAR-SPLIT-COUNT X))))
   (SV::SVAR-SPLIT-VARS 1 :SYSTEM
                        .
                        "centaur/sv/svex/compose-theory-split")))
 ((JUSTIFICATION (SV::UPDATES)
                 (NIL O-P . O<)
                 ((LEN (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::UPDATES)
                  (NIL O-P . O<)
                  ((LEN (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES))))
    ((NOT (CONSP (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES)))
     (O< (LEN (SV::SVEX-ALIST-FIX$INLINE (CDR (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES))))
         (LEN (SV::SVEX-ALIST-FIX$INLINE SV::UPDATES)))))
   (SV::SVEX-UPDATES-PAIR-MASKS 2 :SYSTEM
                                . "centaur/sv/svex/mask-compose")
   (SV::SVTV-INALIST-RESOLVE-UNASSIGNED :SYSTEM . "centaur/sv/svtv/process")
   (SV::SVEX-ALIST->ASSIGNS :SYSTEM . "centaur/sv/vl/vl-svstmt")))
 ((JUSTIFICATION (GL::IDX X)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (INTEGER-LENGTH X)
                                  (UNARY-- (NFIX GL::IDX))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (GL::IDX X)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (INTEGER-LENGTH X)
                                   (UNARY-- (NFIX GL::IDX))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (INTEGER-LENGTH X)
                          (UNARY-- (NFIX GL::IDX))))))
    ((NOT (< (LNFIX$INLINE GL::IDX)
             (INTEGER-LENGTH (LIFIX$INLINE X))))
     (O< (NFIX (BINARY-+ (INTEGER-LENGTH (LIFIX$INLINE X))
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE GL::IDX))))))
         (NFIX (BINARY-+ (INTEGER-LENGTH X)
                         (UNARY-- (NFIX GL::IDX)))))))
   (SV::AIG-I2V-AUX 3
                    :SYSTEM . "centaur/sv/svex/aig-arith")))
 ((JUSTIFICATION (C B A)
                 (NIL O-P . O<)
                 ((BINARY-+ (LEN A)
                            (BINARY-+ (LEN B) (LEN C)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SVL::L2 SVL::L1 SVL::LEAVES)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN SVL::LEAVES)
                             (BINARY-+ (LEN SVL::L1) (LEN SVL::L2)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN SVL::LEAVES)
                    (BINARY-+ (LEN SVL::L1)
                              (LEN SVL::L2)))))
    ((NOT (CONSP SVL::L1))
     (NOT (CONSP SVL::L2))
     (NOT (CONSP SVL::LEAVES))
     (NOT (EQUAL (CAR SVL::L1) (CAR SVL::LEAVES)))
     (O< (BINARY-+ (LEN SVL::LEAVES)
                   (BINARY-+ (LEN (CDR SVL::L1))
                             (LEN SVL::L2)))
         (BINARY-+ (LEN SVL::LEAVES)
                   (BINARY-+ (LEN SVL::L1)
                             (LEN SVL::L2)))))
    ((NOT (CONSP SVL::L1))
     (NOT (CONSP SVL::L2))
     (NOT (CONSP SVL::LEAVES))
     (EQUAL (CAR SVL::L1) (CAR SVL::LEAVES))
     (NOT (EQUAL (CAR SVL::L2) (CAR SVL::LEAVES)))
     (O< (BINARY-+ (LEN SVL::LEAVES)
                   (BINARY-+ (LEN SVL::L1)
                             (LEN (CDR SVL::L2))))
         (BINARY-+ (LEN SVL::LEAVES)
                   (BINARY-+ (LEN SVL::L1)
                             (LEN SVL::L2)))))
    ((NOT (CONSP SVL::L1))
     (NOT (CONSP SVL::L2))
     (NOT (CONSP SVL::LEAVES))
     (EQUAL (CAR SVL::L1) (CAR SVL::LEAVES))
     (EQUAL (CAR SVL::L2) (CAR SVL::LEAVES))
     (O< (BINARY-+ (LEN (CDR SVL::LEAVES))
                   (BINARY-+ (LEN SVL::L1) (LEN SVL::L2)))
         (BINARY-+ (LEN SVL::LEAVES)
                   (BINARY-+ (LEN SVL::L1)
                             (LEN SVL::L2))))))
   (SVL::BITXOR/OR/AND-EQUIV-AUX-APPEND 3 :SYSTEM
                                        .
                                        "centaur/svl/svex-reduce/simplify-bitand-or-xor"))
  ((JUSTIFICATION (C B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (LEN A)
                             (BINARY-+ (LEN B) (LEN C)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (LEN A)
                    (BINARY-+ (LEN B) (LEN C)))))
    ((IF (MV-NTH '2 (GL::FIRST/REST/END A))
         (IF (MV-NTH '2 (GL::FIRST/REST/END B))
             (MV-NTH '2 (GL::FIRST/REST/END C))
           'NIL)
       'NIL)
     (O< (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END A)))
                   (BINARY-+ (LEN (MV-NTH '1 (GL::FIRST/REST/END B)))
                             (LEN (MV-NTH '1 (GL::FIRST/REST/END C)))))
         (BINARY-+ (LEN A)
                   (BINARY-+ (LEN B) (LEN C))))))
   (GL::BFR-LOGAND-SSS 3
                       :SYSTEM . "centaur/sv/svex/aig-arith")))
 ((JUSTIFICATION (LST TERM FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'ALL-VARS1)
                      (ACL2-COUNT TERM)
                    (ACL2-COUNT LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (LST TERM FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'ALL-VARS1)
                       (ACL2-COUNT TERM)
                     (ACL2-COUNT LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'ALL-VARS1)
              (ACL2-COUNT TERM)
            (ACL2-COUNT LST))))
    ((EQUAL FLAG 'ALL-VARS1)
     (NOT (CONSP LST))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR LST)))
         (IF (EQUAL FLAG 'ALL-VARS1)
             (ACL2-COUNT TERM)
           (ACL2-COUNT LST))))
    ((EQUAL FLAG 'ALL-VARS1)
     (NOT (CONSP LST))
     (O< (IF 'T
             (ACL2-COUNT (CAR LST))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL FLAG 'ALL-VARS1)
             (ACL2-COUNT TERM)
           (ACL2-COUNT LST))))
    ((NOT (EQUAL FLAG 'ALL-VARS1))
     (NOT (CONSP TERM))
     (EQUAL 'QUOTE (CAR TERM))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR TERM)))
         (IF (EQUAL FLAG 'ALL-VARS1)
             (ACL2-COUNT TERM)
           (ACL2-COUNT LST)))))
   (FLAG-ALL-VARS1 4 :SYSTEM . "std/system/all-vars")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::MODALIST-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::MODALIST-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::MODALIST-FIX$INLINE X))))
    ((NOT (CONSP (SV::MODALIST-FIX$INLINE X)))
     (O< (LEN (SV::MODALIST-FIX$INLINE (CDR (SV::MODALIST-FIX$INLINE X))))
         (LEN (SV::MODALIST-FIX$INLINE X)))))
   (SV::MODALIST-VARS 1 :SYSTEM . "centaur/sv/mods/svmods")
   (SV::SV-USE-SET-ANALYZE-ALL :SYSTEM . "centaur/sv/vl/use-set")
   (SV::MODALIST-NAMED->INDEXED-FN :SYSTEM . "centaur/sv/mods/moddb")))
 ((JUSTIFICATION (SV::N SV::LHSARR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                                  (UNARY-- (NFIX SV::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SV::N SV::LHSARR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                                   (UNARY-- (NFIX SV::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                          (UNARY-- (NFIX SV::N))))))
    ((NOT (INTEGERP (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                              (UNARY-- (NFIX SV::N)))))
     (NOT (< '0
             (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                       (UNARY-- (NFIX SV::N)))))
     (O< (NFIX (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE SV::N))))))
         (NFIX (BINARY-+ (SV::LHSS-LENGTH SV::LHSARR)
                         (UNARY-- (NFIX SV::N)))))))
   (SV::LHSARR-TO-SVEXARR 3 :SYSTEM . "centaur/sv/mods/lhs")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((LEN (SV::SVAR-MAP-FIX$INLINE X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((LEN (SV::SVAR-MAP-FIX$INLINE X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (SV::SVAR-MAP-FIX$INLINE X))))
    ((NOT (CONSP (SV::SVAR-MAP-FIX$INLINE X)))
     (O< (LEN (SV::SVAR-MAP-FIX$INLINE (CDR (SV::SVAR-MAP-FIX$INLINE X))))
         (LEN (SV::SVAR-MAP-FIX$INLINE X)))))
   (SV::SVAR-MAP-VARS 1 :SYSTEM . "centaur/sv/mods/lhs")
   (SV::SVAR-MAP-NAMED->INDEXED :SYSTEM . "centaur/sv/mods/moddb")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((BITOPS::SPARSEINT$-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT$-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT$-COUNT X)))
    ((EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
            ':LEAF)
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->MSBS$INLINE X))
         (BITOPS::SPARSEINT$-COUNT X)))
    ((EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
            ':LEAF)
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->LSBS$INLINE X))
         (BITOPS::SPARSEINT$-COUNT X))))
   (BITOPS::SPARSEINT$-VAL 1 :SYSTEM . "centaur/bitops/sparseint"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT$-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT$-COUNT X)))
    ((EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
            ':LEAF)
     (< (BITOPS::SPARSEINT$-CONCAT->WIDTH$INLINE X)
        (LPOSFIX$INLINE BITOPS::WIDTH))
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->LSBS$INLINE X))
         (BITOPS::SPARSEINT$-COUNT X))))
   (BITOPS::SPARSEINT$-TRUNCATE 2 :SYSTEM . "centaur/bitops/sparseint"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT$-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT$-COUNT X)))
    ((BITOPS::SPARSEINT$-HEIGHT-CORRECTP (BITOPS::SPARSEINT$-FIX$INLINE X))
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->MSBS$INLINE (BITOPS::SPARSEINT$-FIX$INLINE X)))
         (BITOPS::SPARSEINT$-COUNT X)))
    ((BITOPS::SPARSEINT$-HEIGHT-CORRECTP (BITOPS::SPARSEINT$-FIX$INLINE X))
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->LSBS$INLINE (BITOPS::SPARSEINT$-FIX$INLINE X)))
         (BITOPS::SPARSEINT$-COUNT X))))
   (BITOPS::SPARSEINT-FIX$INLINE 1 :SYSTEM . "centaur/bitops/sparseint"))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((BITOPS::SPARSEINT$-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (BITOPS::SPARSEINT$-COUNT X)))
    ((EQUAL (BITOPS::SPARSEINT$-KIND$INLINE X)
            ':LEAF)
     (O< (BITOPS::SPARSEINT$-COUNT (BITOPS::SPARSEINT$-CONCAT->MSBS$INLINE X))
         (BITOPS::SPARSEINT$-COUNT X))))
   (BITOPS::SPARSEINT$-COMPARE-INT 3
                                   :SYSTEM . "centaur/bitops/sparseint")))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((SV::PATH-COUNT X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((SV::PATH-COUNT X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SV::PATH-COUNT X)))
    ((EQUAL (SV::PATH-KIND$INLINE X) ':WIRE)
     (O< (SV::PATH-COUNT (SV::PATH-SCOPE->SUBPATH$INLINE X))
         (SV::PATH-COUNT X))))
   (SV::PATH-APPEND 2 :SYSTEM . "centaur/sv/mods/address")
   (SV::PATH->STRING-AUX :SYSTEM
                         . "centaur/sv/mods/path-string")))
 ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
                      (ACL2-COUNT SVL::X)
                    (ACL2-COUNT SVL::LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (SVL::LST SVL::X SVL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
                       (ACL2-COUNT SVL::X)
                     (ACL2-COUNT SVL::LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
              (ACL2-COUNT SVL::X)
            (ACL2-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
     (NOT (CONSP SVL::LST))
     (O< (IF 'T
             (ACL2-COUNT (CAR SVL::LST))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST))))
    ((EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
     (NOT (CONSP SVL::LST))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR SVL::LST)))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST))))
    ((NOT (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG))
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':VAR)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':QUOTE)
     (EQUAL (SVL::SVEXL-NODE-KIND-WOG$INLINE SVL::X)
            ':NODE)
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR SVL::X)))
         (IF (EQUAL SVL::FLAG 'SVL::SVEXL-NODE-EVAL-WOG)
             (ACL2-COUNT SVL::X)
           (ACL2-COUNT SVL::LST)))))
   (SVL::SVEXL-NODE-EVAL-WOG-FLAG 5 :SYSTEM . "centaur/svl/svexl/svexl")))
 ((JUSTIFICATION (CMR::LEVELS)
                 (NIL O-P . O<)
                 ((LEN (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CMR::LEVELS)
                  (NIL O-P . O<)
                  ((LEN (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS))))
    ((NOT (CONSP (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS)))
     (O< (LEN (CMR::LETABS-LEVELS-FIX$INLINE (CDR (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS))))
         (LEN (CMR::LETABS-LEVELS-FIX$INLINE CMR::LEVELS)))))
   (CMR::LETABS-SORT-LEVELS 2 :SYSTEM . "centaur/meta/let-abs")))
 ((JUSTIFICATION (HI2 LO2 HI1 LO1)
                 (NIL O-P . O<)
                 ((BINARY-+ (FROM-TO-BY-MEASURE LO1 HI1)
                            (FROM-TO-BY-MEASURE LO2 HI2))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (HI2 LO2 HI1 LO1)
                  (NIL O-P . O<)
                  ((BINARY-+ (FROM-TO-BY-MEASURE LO1 HI1)
                             (FROM-TO-BY-MEASURE LO2 HI2))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (FROM-TO-BY-MEASURE LO1 HI1)
                    (FROM-TO-BY-MEASURE LO2 HI2))))
    ((NOT (INTEGERP LO1))
     (NOT (INTEGERP HI1))
     (NOT (INTEGERP BY1))
     (NOT (INTEGERP LO2))
     (NOT (INTEGERP HI2))
     (NOT (INTEGERP BY2))
     (NOT (< '0 BY1))
     (NOT (< '0 BY2))
     (< HI1 LO1)
     (< HI2 LO2)
     (O< (BINARY-+ (FROM-TO-BY-MEASURE (BINARY-+ BY1 LO1)
                                       HI1)
                   (FROM-TO-BY-MEASURE (BINARY-+ BY2 LO2)
                                       HI2))
         (BINARY-+ (FROM-TO-BY-MEASURE LO1 HI1)
                   (FROM-TO-BY-MEASURE LO2 HI2)))))
   (LOOP$-AS-FTB-FTB 6 :SYSTEM
                     . "projects/apply/loop-lemmas")))
 ((JUSTIFICATION (RP::LST RP::TERM RP::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL RP::FLAG 'RP::RP-TRANS)
                      (ACL2-COUNT RP::TERM)
                    (ACL2-COUNT RP::LST))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (RP::LST RP::TERM RP::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL RP::FLAG 'RP::RP-TRANS)
                       (ACL2-COUNT RP::TERM)
                     (ACL2-COUNT RP::LST))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
              (ACL2-COUNT RP::TERM)
            (ACL2-COUNT RP::LST))))
    ((EQUAL RP::FLAG 'RP::RP-TRANS)
     (NOT (CONSP RP::LST))
     (O< (IF 'T
             (ACL2-COUNT (CAR RP::LST))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST))))
    ((EQUAL RP::FLAG 'RP::RP-TRANS)
     (NOT (CONSP RP::LST))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::LST)))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST))))
    ((NOT (EQUAL RP::FLAG 'RP::RP-TRANS))
     (NOT (CONSP RP::TERM))
     (QUOTEP RP::TERM)
     (EQUAL (CAR RP::TERM) 'RP::FALIST)
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::TERM)))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST))))
    ((NOT (EQUAL RP::FLAG 'RP::RP-TRANS))
     (NOT (CONSP RP::TERM))
     (QUOTEP RP::TERM)
     (NOT (EQUAL (CAR RP::TERM) 'RP::FALIST))
     (NOT (CONSP (CDR RP::TERM)))
     (NOT (CONSP (CDR (CDR RP::TERM))))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR RP::TERM))))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST))))
    ((NOT (EQUAL RP::FLAG 'RP::RP-TRANS))
     (NOT (CONSP RP::TERM))
     (QUOTEP RP::TERM)
     (CONSP (CDR RP::TERM))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::TERM)))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST))))
    ((NOT (EQUAL RP::FLAG 'RP::RP-TRANS))
     (NOT (CONSP RP::TERM))
     (QUOTEP RP::TERM)
     (CONSP (CDR (CDR RP::TERM)))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::TERM)))
         (IF (EQUAL RP::FLAG 'RP::RP-TRANS)
             (ACL2-COUNT RP::TERM)
           (ACL2-COUNT RP::LST)))))
   (RP::FLAG-RP-TRANS 3 :SYSTEM
                      .
                      "projects/rp-rewriter/aux-functions")))
 ((JUSTIFICATION (RP::SUBTERMS RP::Q RP::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL RP::FLAG 'RP::GET-VARS1)
                      (ACL2-COUNT RP::Q)
                    (ACL2-COUNT RP::SUBTERMS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (RP::SUBTERMS RP::Q RP::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL RP::FLAG 'RP::GET-VARS1)
                       (ACL2-COUNT RP::Q)
                     (ACL2-COUNT RP::SUBTERMS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL RP::FLAG 'RP::GET-VARS1)
              (ACL2-COUNT RP::Q)
            (ACL2-COUNT RP::SUBTERMS))))
    ((EQUAL RP::FLAG 'RP::GET-VARS1)
     (NOT (CONSP RP::SUBTERMS))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::SUBTERMS)))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS1)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS))))
    ((EQUAL RP::FLAG 'RP::GET-VARS1)
     (NOT (CONSP RP::SUBTERMS))
     (O< (IF 'T
             (ACL2-COUNT (CAR RP::SUBTERMS))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS1)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS))))
    ((NOT (EQUAL RP::FLAG 'RP::GET-VARS1))
     (QUOTEP RP::Q)
     (NOT (CONSP RP::Q))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::Q)))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS1)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS)))))
   (RP::FLAG-GET-VARS1 4 :SYSTEM
                       .
                       "projects/rp-rewriter/aux-functions")))
 ((JUSTIFICATION (RP::SUBTERMS RP::Q RP::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL RP::FLAG 'RP::GET-VARS-AUX)
                      (ACL2-COUNT RP::Q)
                    (ACL2-COUNT RP::SUBTERMS))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (RP::SUBTERMS RP::Q RP::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL RP::FLAG 'RP::GET-VARS-AUX)
                       (ACL2-COUNT RP::Q)
                     (ACL2-COUNT RP::SUBTERMS))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL RP::FLAG 'RP::GET-VARS-AUX)
              (ACL2-COUNT RP::Q)
            (ACL2-COUNT RP::SUBTERMS))))
    ((EQUAL RP::FLAG 'RP::GET-VARS-AUX)
     (NOT (CONSP RP::SUBTERMS))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::SUBTERMS)))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS-AUX)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS))))
    ((EQUAL RP::FLAG 'RP::GET-VARS-AUX)
     (NOT (CONSP RP::SUBTERMS))
     (O< (IF 'T
             (ACL2-COUNT (CAR RP::SUBTERMS))
           (ACL2-COUNT 'NIL))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS-AUX)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS))))
    ((NOT (EQUAL RP::FLAG 'RP::GET-VARS-AUX))
     (QUOTEP RP::Q)
     (NOT (CONSP RP::Q))
     (O< (IF 'NIL
             (ACL2-COUNT 'NIL)
           (ACL2-COUNT (CDR RP::Q)))
         (IF (EQUAL RP::FLAG 'RP::GET-VARS-AUX)
             (ACL2-COUNT RP::Q)
           (ACL2-COUNT RP::SUBTERMS)))))
   (RP::FLAG-GET-VARS-AUX 4 :SYSTEM
                          . "projects/rp-rewriter/macros")))
 ((JUSTIFICATION (ST)
                 (NIL O-P . O<)
                 ((PF-MEASURE ST)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (ST)
                  (NIL O-P . O<)
                  ((PF-MEASURE ST)
                   IF MV-LIST RETURN-LAST))
   (((O-P (PF-MEASURE ST)))
    ((NOT (PF-TERMINATES ST))
     (PF-DONE ST)
     (O< (PF-MEASURE (PF-NEXT ST))
         (PF-MEASURE ST))))
   (PF-RUN 1 :SYSTEM . "centaur/misc/tailrec")))
 ((JUSTIFICATION (DEPGRAPH::GRAPH DEPGRAPH::SEEN DEPGRAPH::QUEUE)
                 (NIL O-P . O<)
                 ((DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                              DEPGRAPH::SEEN DEPGRAPH::GRAPH)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (DEPGRAPH::GRAPH DEPGRAPH::SEEN DEPGRAPH::QUEUE)
                  (NIL O-P . O<)
                  ((DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                               DEPGRAPH::SEEN DEPGRAPH::GRAPH)
                   IF MV-LIST RETURN-LAST))
   (((O-P (DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                      DEPGRAPH::SEEN DEPGRAPH::GRAPH)))
    ((NOT (CONSP DEPGRAPH::QUEUE))
     (NOT (EQUAL (CDR (HONS-GET (CAR DEPGRAPH::QUEUE)
                                DEPGRAPH::SEEN))
                 ':FINISHED))
     (O< (DEPGRAPH::TOPOSORT-MEASURE (CDR DEPGRAPH::QUEUE)
                                     DEPGRAPH::SEEN DEPGRAPH::GRAPH)
         (DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                     DEPGRAPH::SEEN DEPGRAPH::GRAPH)))
    ((NOT (CONSP DEPGRAPH::QUEUE))
     (EQUAL (CDR (HONS-GET (CAR DEPGRAPH::QUEUE)
                           DEPGRAPH::SEEN))
            ':FINISHED)
     (HONS-GET (CAR DEPGRAPH::QUEUE)
               DEPGRAPH::SEEN)
     (NOT (HONS-GET (CAR DEPGRAPH::QUEUE)
                    DEPGRAPH::GRAPH))
     (O< (DEPGRAPH::TOPOSORT-MEASURE (CDR (HONS-GET (CAR DEPGRAPH::QUEUE)
                                                    DEPGRAPH::GRAPH))
                                     (HONS-ACONS (CAR DEPGRAPH::QUEUE)
                                                 ':STARTED
                                                 DEPGRAPH::SEEN)
                                     DEPGRAPH::GRAPH)
         (DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                     DEPGRAPH::SEEN DEPGRAPH::GRAPH)))
    ((NOT (CONSP DEPGRAPH::QUEUE))
     (HONS-GET (CAR DEPGRAPH::QUEUE)
               DEPGRAPH::SEEN)
     (HONS-GET (CAR DEPGRAPH::QUEUE)
               DEPGRAPH::GRAPH)
     (O< (DEPGRAPH::TOPOSORT-MEASURE (CDR DEPGRAPH::QUEUE)
                                     DEPGRAPH::SEEN DEPGRAPH::GRAPH)
         (DEPGRAPH::TOPOSORT-MEASURE DEPGRAPH::QUEUE
                                     DEPGRAPH::SEEN DEPGRAPH::GRAPH))))
   (DEPGRAPH::TOPOSORT-AUX 3
                           :SYSTEM . "centaur/depgraph/toposort")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ))
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::GL-TERM-TO-APPLY-OBJ)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::GL-TERM-TO-APPLY-OBJ-FLAG 3 :SYSTEM
                                  . "centaur/gl/gl-generic-interp-defs")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR X)))
           (ACL2-COUNT (CAR (CDR X))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (CAR (CDR (TD-STUB-6 'GL::MAGIC-EV-PARTIAL
                          (CAR (CDR X))
                          GL::ALIST
                          STATE GL::HARD-ERRP GL::AOKP)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CDR X))))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (NOT (CAR (CDR (TD-STUB-6 'GL::MAGIC-EV-PARTIAL
                               (CAR (CDR X))
                               GL::ALIST
                               STATE GL::HARD-ERRP GL::AOKP))))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR X))))
           (ACL2-COUNT (CAR (CDR (CDR X)))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (QUOTEP (TD-STUB-6 'GL::MAGIC-EV-PARTIAL
                        (CAR (CDR X))
                        GL::ALIST STATE GL::HARD-ERRP GL::AOKP))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CDR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CDR X))))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL))
     (NOT X)
     (NOT (CONSP X))
     (CONSP (CAR X))
     (NOT (EQUAL (CAR X) 'IF))
     (QUOTEP (TD-STUB-6 'GL::MAGIC-EV-PARTIAL
                        (CAR (CDR X))
                        GL::ALIST STATE GL::HARD-ERRP GL::AOKP))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR X))))
           (ACL2-COUNT (CAR (CDR (CDR X)))))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (EQUAL (CAR X) 'IF)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::MAGIC-EV-PARTIAL)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::MAGIC-EV-PARTIAL-FLG 6 :SYSTEM . "centaur/gl/ctrex-utils")))
 ((JUSTIFICATION (X FLAG)
                 (NIL T . NAT-LIST-<)
                 ((IF (EQL FLAG 'MOD)
                      (CONS (ACL2-COUNT X) (CONS '3 'NIL))
                    (IF (EQL FLAG 'OCCS)
                        (CONS (ACL2-COUNT X) (CONS '2 'NIL))
                      (CONS (ACL2-COUNT X) (CONS '4 'NIL))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL T . NAT-LIST-<)
                  ((IF (EQL FLAG 'MOD)
                       (CONS (ACL2-COUNT X) (CONS '3 'NIL))
                     (IF (EQL FLAG 'OCCS)
                         (CONS (ACL2-COUNT X) (CONS '2 'NIL))
                       (CONS (ACL2-COUNT X) (CONS '4 'NIL))))
                   IF MV-LIST RETURN-LAST))
   (((NOT (EQUAL FLAG 'MOD))
     (GPL ':X X)
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT (GPL ':OCCS X)) '(3))
                   (IF 'T
                       (CONS (ACL2-COUNT (GPL ':OCCS X)) '(2))
                     (CONS (ACL2-COUNT (GPL ':OCCS X))
                           '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT X) '(3))
                   (IF (EQUAL FLAG 'OCCS)
                       (CONS (ACL2-COUNT X) '(2))
                     (CONS (ACL2-COUNT X) '(4))))))
    ((EQUAL FLAG 'MOD)
     (EQUAL FLAG 'OCCS)
     (NAT-LIST-< (IF 'T
                     (CONS (ACL2-COUNT (GPL ':OP X)) '(3))
                   (IF 'NIL
                       (CONS (ACL2-COUNT (GPL ':OP X)) '(2))
                     (CONS (ACL2-COUNT (GPL ':OP X)) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT X) '(3))
                   (IF (EQUAL FLAG 'OCCS)
                       (CONS (ACL2-COUNT X) '(2))
                     (CONS (ACL2-COUNT X) '(4))))))
    ((NOT (EQUAL FLAG 'OCCS))
     (NOT (CONSP X))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT (CDR X)) '(3))
                   (IF 'T
                       (CONS (ACL2-COUNT (CDR X)) '(2))
                     (CONS (ACL2-COUNT (CDR X)) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT X) '(3))
                   (IF (EQUAL FLAG 'OCCS)
                       (CONS (ACL2-COUNT X) '(2))
                     (CONS (ACL2-COUNT X) '(4))))))
    ((NOT (EQUAL FLAG 'OCCS))
     (NOT (CONSP X))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT (CAR X)) '(3))
                   (IF 'NIL
                       (CONS (ACL2-COUNT (CAR X)) '(2))
                     (CONS (ACL2-COUNT (CAR X)) '(4))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT X) '(3))
                   (IF (EQUAL FLAG 'OCCS)
                       (CONS (ACL2-COUNT X) '(2))
                     (CONS (ACL2-COUNT X) '(4)))))))
   (ESIM-FLAG 2 :SYSTEM
              . "centaur/esim/esim-sexpr-correct")))
 ((JUSTIFICATION (N X)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (LENGTH X)
                                  (UNARY-- (NFIX N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (IDX STR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (LENGTH STR)
                                   (UNARY-- (NFIX IDX))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (LENGTH STR)
                          (UNARY-- (NFIX IDX))))))
    ((NOT (< (LNFIX$INLINE IDX) (LENGTH STR)))
     (O< (NFIX (BINARY-+ (LENGTH STR)
                         (UNARY-- (NFIX (BINARY-+ '1 (LNFIX$INLINE IDX))))))
         (NFIX (BINARY-+ (LENGTH STR)
                         (UNARY-- (NFIX IDX)))))))
   (WRITE-ASCII-STRING1 4 :SYSTEM . "centaur/aig/aiger-help"))
  ((JUSTIFICATION (N X)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (LENGTH X)
                                   (UNARY-- (NFIX N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (LENGTH X)
                          (UNARY-- (NFIX N))))))
    ((NOT (INTEGERP (BINARY-+ (LENGTH X)
                              (UNARY-- (NFIX N)))))
     (NOT (< '0
             (BINARY-+ (LENGTH X)
                       (UNARY-- (NFIX N)))))
     (O< (NFIX (BINARY-+ (LENGTH X)
                         (UNARY-- (NFIX (BINARY-+ '1 (NFIX N))))))
         (NFIX (BINARY-+ (LENGTH X)
                         (UNARY-- (NFIX N)))))))
   (STR::PRINT-ESCAPED-STR-AUX 5 :SYSTEM . "std/strings/pretty")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((VL2014::VL-CASELIST-COUNT VL2014::X)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((VL2014::VL-CASELIST-COUNT VL2014::X)
                   IF MV-LIST RETURN-LAST))
   (((O-P (VL2014::VL-CASELIST-COUNT VL2014::X)))
    ((NOT (CONSP (VL2014::VL-CASELIST-FIX$INLINE VL2014::X)))
     (O< (VL2014::VL-CASELIST-COUNT (CDR (VL2014::VL-CASELIST-FIX$INLINE VL2014::X)))
         (VL2014::VL-CASELIST-COUNT VL2014::X))))
   (VL2014::VL-REBUILD-CASELIST 3 :SYSTEM
                                . "centaur/vl2014/mlib/stmt-tools")
   (VL2014::VL-CASESTMT-SIZE-WARNINGS-AUX :SYSTEM
                                          .
                                          "centaur/vl2014/transforms/always/caseelim")
   (VL2014::VL-FILTER-PARSED-CASEITEMLIST :SYSTEM
                                          .
                                          "centaur/vl2014/loader/parser/statements")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-REPORTCARD-FIX$INLINE (CDR (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-REPORTCARD-FIX$INLINE VL2014::X)))))
   (VL2014::VL-REPORTCARD-COUNT 1 :SYSTEM
                                . "centaur/vl2014/mlib/reportcard")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 (((LAMBDA (VL2014::X)
                     (ACL2-COUNT VL2014::X))
                   (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  (((LAMBDA (VL2014::X)
                      (ACL2-COUNT VL2014::X))
                    (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X)))
     (O< (ACL2-COUNT (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE (CDR (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X))))
         (ACL2-COUNT (VL2014::VL-LUCIDMERGEALIST-FIX$INLINE VL2014::X)))))
   (VL2014::VL-LUCIDMERGEALIST-COUNT 1
                                     :SYSTEM . "centaur/vl2014/lint/lucid")))
 ((JUSTIFICATION (OCCS OCC MOD FLAG)
                 (NIL T . NAT-LIST-<)
                 ((IF (EQL FLAG 'MOD)
                      (CONS (ACL2-COUNT MOD) (CONS '2 'NIL))
                    (IF (EQL FLAG 'OCC)
                        (CONS (ACL2-COUNT OCC) (CONS '3 'NIL))
                      (CONS (ACL2-COUNT OCCS)
                            (CONS '3 'NIL))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (OCCS OCC MOD FLAG)
                  (NIL T . NAT-LIST-<)
                  ((IF (EQL FLAG 'MOD)
                       (CONS (ACL2-COUNT MOD) (CONS '2 'NIL))
                     (IF (EQL FLAG 'OCC)
                         (CONS (ACL2-COUNT OCC) (CONS '3 'NIL))
                       (CONS (ACL2-COUNT OCCS)
                             (CONS '3 'NIL))))
                   IF MV-LIST RETURN-LAST))
   (((NOT (EQUAL FLAG 'OCC))
     (NAT-LIST-< (IF 'T
                     (CONS (ACL2-COUNT (GPL ':OP OCC)) '(2))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(3))
                     (CONS (ACL2-COUNT 'NIL) '(3))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(2))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(3))
                     (CONS (ACL2-COUNT OCCS) '(3))))))
    ((EQUAL FLAG 'MOD)
     (EQUAL FLAG 'OCC)
     (NOT (CONSP OCCS))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(2))
                   (IF 'T
                       (CONS (ACL2-COUNT (CAR OCCS)) '(3))
                     (CONS (ACL2-COUNT 'NIL) '(3))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(2))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(3))
                     (CONS (ACL2-COUNT OCCS) '(3))))))
    ((EQUAL FLAG 'MOD)
     (EQUAL FLAG 'OCC)
     (NOT (CONSP OCCS))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(2))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(3))
                     (CONS (ACL2-COUNT (CDR OCCS)) '(3))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(2))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(3))
                     (CONS (ACL2-COUNT OCCS) '(3))))))
    ((NOT (EQUAL FLAG 'MOD))
     (NOT (GPL ':OCCS MOD))
     (NAT-LIST-< (IF 'NIL
                     (CONS (ACL2-COUNT 'NIL) '(2))
                   (IF 'NIL
                       (CONS (ACL2-COUNT 'NIL) '(3))
                     (CONS (ACL2-COUNT (GPL ':OCCS MOD))
                           '(3))))
                 (IF (EQUAL FLAG 'MOD)
                     (CONS (ACL2-COUNT MOD) '(2))
                   (IF (EQUAL FLAG 'OCC)
                       (CONS (ACL2-COUNT OCC) '(3))
                     (CONS (ACL2-COUNT OCCS) '(3)))))))
   (MOD1-FLAG 4 :SYSTEM
              . "centaur/esim/esim-sexpr-support")))
 ((JUSTIFICATION (CLEX::SIN)
                 (NIL O-P . O<)
                 ((LEN (CLEX::STRIN-LEFT CLEX::SIN))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (CLEX::SIN)
                  (NIL O-P . O<)
                  ((LEN (CLEX::STRIN-LEFT CLEX::SIN))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (CLEX::STRIN-LEFT CLEX::SIN))))
    ((CLEX::SIN-ENDP CLEX::SIN)
     (NOT (MV-NTH '0 (CLEX::LEX1 CLEX::SIN)))
     (O< (LEN (CLEX::STRIN-LEFT (MV-NTH '1 (CLEX::LEX1 CLEX::SIN))))
         (LEN (CLEX::STRIN-LEFT CLEX::SIN)))))
   (CLEX::LEX*-EXEC 2 :SYSTEM . "centaur/clex/example")))
 ((JUSTIFICATION (BIGMEM::IDX)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '4194304
                                  (UNARY-- BIGMEM::IDX)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (BIGMEM::IDX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '4194304
                                   (UNARY-- BIGMEM::IDX)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '4194304
                          (UNARY-- BIGMEM::IDX)))))
    ((NOT (INTEGERP BIGMEM::IDX))
     (< BIGMEM::IDX '0)
     (< '4194304 BIGMEM::IDX)
     (EQUAL BIGMEM::IDX '4194304)
     (O< (NFIX (BINARY-+ '4194304
                         (UNARY-- (BINARY-+ '1 BIGMEM::IDX))))
         (NFIX (BINARY-+ '4194304
                         (UNARY-- BIGMEM::IDX))))))
   (BIGMEM::SERIALIZE-LEVEL1S 3 :SYSTEM
                              . "centaur/bigmems/bigmem/concrete")))
 ((JUSTIFICATION (BIGMEM::IDX)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ '1048576
                                  (UNARY-- BIGMEM::IDX)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (BIGMEM::IDX)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ '1048576
                                   (UNARY-- BIGMEM::IDX)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ '1048576
                          (UNARY-- BIGMEM::IDX)))))
    ((NOT (INTEGERP BIGMEM::IDX))
     (< BIGMEM::IDX '0)
     (< '1048576 BIGMEM::IDX)
     (EQUAL BIGMEM::IDX '1048576)
     (O< (NFIX (BINARY-+ '1048576
                         (UNARY-- (BINARY-+ '1 BIGMEM::IDX))))
         (NFIX (BINARY-+ '1048576
                         (UNARY-- BIGMEM::IDX))))))
   (BIGMEM::READ-PAGE 3 :SYSTEM
                      . "centaur/bigmems/bigmem/concrete")))
 ((JUSTIFICATION (AIGNET::N AIGNET::S32V)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET::S32V)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::S32V-NROWS AIGNET::S32V)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::S32V-BITCOL-COUNT-SET 4 :SYSTEM . "centaur/aignet/fraig")))
 ((JUSTIFICATION (AIGNET::COL AIGNET::S32V)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                                  (UNARY-- (NFIX AIGNET::COL))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::COL AIGNET::S32V)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                                   (UNARY-- (NFIX AIGNET::COL))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                          (UNARY-- (NFIX AIGNET::COL))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                              (UNARY-- (NFIX AIGNET::COL)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                       (UNARY-- (NFIX AIGNET::COL)))))
     (O< (NFIX (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::COL))))))
         (NFIX (BINARY-+ (AIGNET::S32V-NCOLS AIGNET::S32V)
                         (UNARY-- (NFIX AIGNET::COL)))))))
   (AIGNET::OATHASH-S32V-AUX 5 :SYSTEM
                             . "centaur/aignet/equiv-classes")))
 ((JUSTIFICATION (AIGNET::N NATARR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (NATS-LENGTH NATARR)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N NATARR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NATS-LENGTH NATARR)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NATS-LENGTH NATARR)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (NATS-LENGTH NATARR)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (NATS-LENGTH NATARR)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (NATS-LENGTH NATARR)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (NATS-LENGTH NATARR)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::CLASSES-REPORT-SIZES-AUX 2 :SYSTEM
                                     . "centaur/aignet/equiv-classes")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (NFIX (AIGNET::NUM-OUTS AIGNET))
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (NFIX (AIGNET::NUM-OUTS AIGNET))
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (NFIX (AIGNET::NUM-OUTS AIGNET))
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-OUTS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (NFIX (AIGNET::NUM-OUTS AIGNET))
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (NFIX (AIGNET::NUM-OUTS AIGNET))
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-TRANS-GET-OUTS-AUX 4 :SYSTEM
                                      . "centaur/aignet/to-hons-aig")))
 ((JUSTIFICATION (AIGNET::K AIGNET::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL AIGNET::FLAG 'EVAL)
                      (TWO-NATS-MEASURE AIGNET::K '1)
                    (TWO-NATS-MEASURE AIGNET::K '0))
                  . :ALL))
  ((JUSTIFICATION (AIGNET::K AIGNET::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL AIGNET::FLAG 'EVAL)
                       (TWO-NATS-MEASURE AIGNET::K '1)
                     (TWO-NATS-MEASURE AIGNET::K '0))
                   . :ALL))
   (((O-P (IF (EQUAL AIGNET::FLAG 'EVAL)
              (TWO-NATS-MEASURE AIGNET::K '1)
            (TWO-NATS-MEASURE AIGNET::K '0))))
    ((NOT (EQUAL AIGNET::FLAG 'EVAL))
     (O< (IF 'NIL
             (TWO-NATS-MEASURE AIGNET::K '1)
           (TWO-NATS-MEASURE AIGNET::K '0))
         (IF (EQUAL AIGNET::FLAG 'EVAL)
             (TWO-NATS-MEASURE AIGNET::K '1)
           (TWO-NATS-MEASURE AIGNET::K '0))))
    ((EQUAL AIGNET::FLAG 'EVAL)
     (NOT (INTEGERP AIGNET::K))
     (NOT (< '0 AIGNET::K))
     (O< (IF 'T
             (TWO-NATS-MEASURE (BINARY-+ '-1 AIGNET::K)
                               '1)
           (TWO-NATS-MEASURE (BINARY-+ '-1 AIGNET::K)
                             '0))
         (IF (EQUAL AIGNET::FLAG 'EVAL)
             (TWO-NATS-MEASURE AIGNET::K '1)
           (TWO-NATS-MEASURE AIGNET::K '0)))))
   (AIGNET::PRUNE-SEQ-FLG 8 :SYSTEM . "centaur/aignet/prune")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (AIGNET::NUM-INS AIGNET)
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (AIGNET::NUM-INS AIGNET)
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (AIGNET::NUM-INS AIGNET)
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-INS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-INS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (AIGNET::NUM-INS AIGNET)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (AIGNET::NUM-INS AIGNET)
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::INPUT-COPY-VALUES 6 :SYSTEM . "centaur/aignet/copying")
   (FGL::AIGNET-COLLECT-MARKED-BVARS :SYSTEM . "centaur/fgl/gatecount")
   (AIGNET::AIGNET-VALS-COPY-PIS :SYSTEM . "centaur/aignet/cube-sat")
   (AIGNET::AIGNET-FINISH-IN-UBDD-ORDER :SYSTEM . "centaur/aignet/parametrize")
   (AIGNET::OBSERVABILITY-FIXED-INPUTS :SYSTEM
                                       . "centaur/aignet/observability")
   (AIGNET::AIGNET-SELF-CONSTPROP-INIT-PIS :SYSTEM
                                           . "centaur/aignet/self-constprop")
   (AIGNET::FRAIG-CTREX-INVALS->VECSIM :SYSTEM . "centaur/aignet/fraig")
   (AIGNET::S32V-RANDOMIZE-INPUTS :SYSTEM . "centaur/aignet/vecsim")
   (AIGNET::AIGNET-GET-IPASIR-CTREX-INVALS :SYSTEM . "centaur/aignet/ipasir")))
 ((JUSTIFICATION (C B A)
                 (NIL O-P . O<)
                 ((BINARY-+ (INTEGER-LENGTH A)
                            (BINARY-+ (INTEGER-LENGTH B)
                                      (INTEGER-LENGTH C)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (C B A)
                  (NIL O-P . O<)
                  ((BINARY-+ (INTEGER-LENGTH A)
                             (BINARY-+ (INTEGER-LENGTH B)
                                       (INTEGER-LENGTH C)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (BINARY-+ (INTEGER-LENGTH A)
                    (BINARY-+ (INTEGER-LENGTH B)
                              (INTEGER-LENGTH C)))))
    ((IF (IF (IF (INTEGERP A) (EQUAL A '0) 'T)
             'T
           (EQUAL A '-1))
         (IF (IF (IF (INTEGERP B) (EQUAL B '0) 'T)
                 'T
               (EQUAL B '-1))
             (IF (IF (INTEGERP C) (EQUAL C '0) 'T)
                 (IF (INTEGERP C) (EQUAL C '0) 'T)
               (EQUAL C '-1))
           'NIL)
       'NIL)
     (O< (BINARY-+ (INTEGER-LENGTH (LOGCDR$INLINE A))
                   (BINARY-+ (INTEGER-LENGTH (LOGCDR$INLINE B))
                             (INTEGER-LENGTH (LOGCDR$INLINE C))))
         (BINARY-+ (INTEGER-LENGTH A)
                   (BINARY-+ (INTEGER-LENGTH B)
                             (INTEGER-LENGTH C))))))
   (BITOPS::LOGCDR-3-IND 3 :SYSTEM
                         . "centaur/bitops/ihsext-basics")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (HONS-GET X GL::MEM)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-ALIST-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::TERM-RW-ALIST-INDEP-IND-FLG 6 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'TERM-PATTERN-MATCH)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'TERM-PATTERN-MATCH)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'TERM-PATTERN-MATCH)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM-PATTERN-MATCH)
     (NOT (CONSP PAT))
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'TERM-PATTERN-MATCH)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM-PATTERN-MATCH)
     (NOT (CONSP PAT))
     (NOT (CONSP X))
     (NOT (TD-STUB-4 'TERM-PATTERN-MATCH
                     (CAR X)
                     (CAR PAT)
                     ACC))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM-PATTERN-MATCH)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'TERM-PATTERN-MATCH))
     (EQUAL PAT '&)
     (SYMBOLP PAT)
     (NOT (CONSP PAT))
     (EQUAL (CAR PAT) 'QUOTE)
     (NOT (CONSP X))
     (NOT (EQUAL (CAR X) (CAR PAT)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM-PATTERN-MATCH)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (TERM-PATTERN-MATCH-FLAG 4 :SYSTEM
                            . "clause-processors/term-patterns")))
 ((JUSTIFICATION (TIMES)
                 (NIL O-P . O<)
                 ((NFIX TIMES) CONS))
  ((JUSTIFICATION (TIMES)
                  (NIL O-P . O<)
                  ((NFIX TIMES) CONS))
   (((O-P (NFIX TIMES)))
    ((NOT (< '1 (NFIX TIMES)))
     (O< (NFIX (BINARY-+ '-1 TIMES))
         (NFIX TIMES))))
   (BDDIFY-MK-OLD-STYLE-TRIES 4 :SYSTEM . "centaur/aig/bddify")))
 ((JUSTIFICATION (AIGNET::I BITARR)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BITS-LENGTH BITARR)
                                  (UNARY-- (NFIX AIGNET::I))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::I BITARR)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BITS-LENGTH BITARR)
                                   (UNARY-- (NFIX AIGNET::I))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BITS-LENGTH BITARR)
                          (UNARY-- (NFIX AIGNET::I))))))
    ((NOT (INTEGERP (BINARY-+ (BITS-LENGTH BITARR)
                              (UNARY-- (NFIX AIGNET::I)))))
     (NOT (< '0
             (BINARY-+ (BITS-LENGTH BITARR)
                       (UNARY-- (NFIX AIGNET::I)))))
     (O< (NFIX (BINARY-+ (BITS-LENGTH BITARR)
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::I))))))
         (NFIX (BINARY-+ (BITS-LENGTH BITARR)
                         (UNARY-- (NFIX AIGNET::I)))))))
   (AIGNET::BITS-TO-BOOLS-AUX 2 :SYSTEM
                              . "centaur/aignet/from-hons-aig")
   (AIGNET::AIGNET-DFS-COPY-BACK-MARKED-NODES :SYSTEM . "centaur/fgl/simplify")
   (AIGNET::AIGNET-ADD-OUTS-FOR-MARKED-IDS :SYSTEM
                                           . "centaur/aignet/simplify-marked")))
 ((JUSTIFICATION (AIGNET::N AIGNET)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BINARY-+ '0
                                            (AIGNET::NUM-FANINS AIGNET))
                                  (UNARY-- (NFIX AIGNET::N))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (AIGNET::N AIGNET)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '0
                                             (AIGNET::NUM-FANINS AIGNET))
                                   (UNARY-- (NFIX AIGNET::N))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '0
                                    (AIGNET::NUM-FANINS AIGNET))
                          (UNARY-- (NFIX AIGNET::N))))))
    ((NOT (INTEGERP (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                              (UNARY-- (NFIX AIGNET::N)))))
     (NOT (< '0
             (BINARY-+ (AIGNET::NUM-FANINS AIGNET)
                       (UNARY-- (NFIX AIGNET::N)))))
     (O< (NFIX (BINARY-+ (BINARY-+ '0
                                   (AIGNET::NUM-FANINS AIGNET))
                         (UNARY-- (NFIX (BINARY-+ '1
                                                  (LNFIX$INLINE AIGNET::N))))))
         (NFIX (BINARY-+ (BINARY-+ '0
                                   (AIGNET::NUM-FANINS AIGNET))
                         (UNARY-- (NFIX AIGNET::N)))))))
   (AIGNET::AIGNET-POPULATE-STRASH 3 :SYSTEM
                                   . "centaur/aignet/construction")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'TERM)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'TERM)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'TERM)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (EQUAL FLAG 'TERM))
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (NOT (CONSP (CAR X)))
     (O< (IF 'T
             (ACL2-COUNT (CAR (CDR (CDR (CAR X)))))
           (ACL2-COUNT (CAR (CDR (CDR (CAR X))))))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'TERM)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'TERM)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (EXPEV-TERM/ALIST-FLAG 3 :SYSTEM
                          . "clause-processors/just-expand")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::TERM-RW-INDEP-IND)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::TERM-RW-INDEP-IND)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (HONS-GET X GL::MEM)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-RW-INDEP-IND)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::TERM-RW-INDEP-IND-FLG 5 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (VAL AUX N)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (IFIX N)
                                  (UNARY-- (IFIX (ITER-FIRST AUX VAL)))))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VAL AUX N)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (IFIX N)
                                   (UNARY-- (IFIX (ITER-FIRST AUX VAL)))))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (IFIX N)
                          (UNARY-- (IFIX (ITER-FIRST AUX VAL)))))))
    ((NOT (INTEGERP (BINARY-+ (IFIX N)
                              (UNARY-- (IFIX (ITER-FIRST AUX VAL))))))
     (NOT (< '0
             (BINARY-+ (IFIX N)
                       (UNARY-- (IFIX (ITER-FIRST AUX VAL))))))
     (O< (NFIX (BINARY-+ (IFIX (BINARY-+ '-1 (IFIX N)))
                         (UNARY-- (IFIX (ITER-FIRST AUX VAL)))))
         (NFIX (BINARY-+ (IFIX N)
                         (UNARY-- (IFIX (ITER-FIRST AUX VAL))))))))
   (ITER-DOWN 3 :SYSTEM . "centaur/misc/iter")))
 ((JUSTIFICATION (ARGS)
                 (NIL O-P . O<)
                 ((GL::G-ITE-DEPTH-SUM ARGS)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (ARGS)
                  (NIL O-P . O<)
                  ((GL::G-ITE-DEPTH-SUM ARGS)
                   IF MV-LIST RETURN-LAST))
   (((O-P (GL::G-ITE-DEPTH-SUM ARGS)))
    ((NOT (MV-NTH '0
                  (GL::GL-ARGS-SPLIT-ITE ARGS)))
     (O< (GL::G-ITE-DEPTH-SUM (MV-NTH '3
                                      (GL::GL-ARGS-SPLIT-ITE ARGS)))
         (GL::G-ITE-DEPTH-SUM ARGS)))
    ((NOT (MV-NTH '0
                  (GL::GL-ARGS-SPLIT-ITE ARGS)))
     (O< (GL::G-ITE-DEPTH-SUM (MV-NTH '2
                                      (GL::GL-ARGS-SPLIT-ITE ARGS)))
         (GL::G-ITE-DEPTH-SUM ARGS))))
   (GL::GL-FNCALL-SPLIT-ITE 2 :SYSTEM . "centaur/gl/split-args")))
 ((JUSTIFICATION (X GL::FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL GL::FLAG 'GL::TERM-SUBST)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X GL::FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL GL::FLAG 'GL::TERM-SUBST)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL GL::FLAG 'GL::TERM-SUBST)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-SUBST)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-SUBST)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL GL::FLAG 'GL::TERM-SUBST)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-SUBST)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT X)
     (NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL GL::FLAG 'GL::TERM-SUBST)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (GL::TERM-SUBST-IND 3 :SYSTEM . "centaur/gl/rws")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((LEN (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X)))
     (MV-NTH '0
             (VL2014::VL-DATATYPE-SIZE (CAR (CAR (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X)))))
     (O< (LEN (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE (CDR (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X))))
         (LEN (VL2014::VL-TYPE-EXPR-PAIRS-FIX$INLINE VL2014::X)))))
   (VL2014::VL-TYPE-EXPR-PAIRS-SUM-DATATYPE-SIZES 1 :SYSTEM
                                                  .
                                                  "centaur/vl2014/transforms/expr-size")))
 ((JUSTIFICATION (STATE X86ISA::INFO)
                 (NIL O-P . O<)
                 ((FILE-MEASURE (X86ISA::RUN-SNIPPET-FILE-INFO->OUTPUT-CHANNEL$INLINE X86ISA::INFO)
                                STATE)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STATE X86ISA::INFO)
                  (NIL O-P . O<)
                  ((FILE-MEASURE (X86ISA::RUN-SNIPPET-FILE-INFO->OUTPUT-CHANNEL$INLINE X86ISA::INFO)
                                 STATE)
                   IF MV-LIST RETURN-LAST))
   (((O-P (FILE-MEASURE (X86ISA::RUN-SNIPPET-FILE-INFO->OUTPUT-CHANNEL$INLINE X86ISA::INFO)
                        STATE)))
    ((MV-NTH '1
             (X86ISA::RUN-COMPARE-SNIPPET-FROM-FILES X86ISA::INFO X86ISA::X86 STATE))
     X86ISA::STOP-ON-MISMATCH
     (O< (FILE-MEASURE (X86ISA::RUN-SNIPPET-FILE-INFO->OUTPUT-CHANNEL$INLINE X86ISA::INFO)
                       (MV-NTH '3
                               (X86ISA::RUN-COMPARE-SNIPPET-FROM-FILES X86ISA::INFO X86ISA::X86 STATE)))
         (FILE-MEASURE (X86ISA::RUN-SNIPPET-FILE-INFO->OUTPUT-CHANNEL$INLINE X86ISA::INFO)
                       STATE))))
   (X86ISA::REPEAT-RUN-COMPARE-SNIPPET-FROM-FILES-FN 4 :SYSTEM
                                                     .
                                                     "projects/x86isa/tools/execution/asmtest/asmtest")))
 ((JUSTIFICATION (STACK EDGES NODES)
                 (NIL T . NAT-LIST-<)
                 ((DFS-MEASURE NODES EDGES STACK)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (STACK EDGES NODES)
                  (NIL T . NAT-LIST-<)
                  ((DFS-MEASURE NODES EDGES STACK)
                   IF MV-LIST RETURN-LAST))
   (((NOT (CONSP NODES))
     (NOT (HONS-GET (CAR NODES) STACK))
     (NAT-LIST-< (DFS-MEASURE (CDR NODES) EDGES STACK)
                 (DFS-MEASURE NODES EDGES STACK)))
    ((NOT (CONSP NODES))
     (HONS-GET (CAR NODES) STACK)
     (NAT-LIST-< (DFS-MEASURE (CDR (HONS-GET (CAR NODES) EDGES))
                              EDGES (HONS-ACONS (CAR NODES) 'T STACK))
                 (DFS-MEASURE NODES EDGES STACK)))
    ((NOT (CONSP NODES))
     (HONS-GET (CAR NODES) STACK)
     (NOT (SUFFIXP STACK
                   (TD-STUB-3 (CDR (HONS-GET (CAR NODES) EDGES))
                              EDGES
                              (HONS-ACONS (CAR NODES) 'T STACK))))
     (NAT-LIST-< (DFS-MEASURE (CDR NODES)
                              EDGES
                              (TD-STUB-3 (CDR (HONS-GET (CAR NODES) EDGES))
                                         EDGES
                                         (HONS-ACONS (CAR NODES) 'T STACK)))
                 (DFS-MEASURE NODES EDGES STACK))))
   (DFS-COLLECT 3
                :SYSTEM . "centaur/misc/dfs-measure")))
 ((JUSTIFICATION (PAT FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SEXPR-UNIFY)
                      (ACL2-COUNT PAT)
                    (ACL2-COUNT PAT))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PAT FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SEXPR-UNIFY)
                       (ACL2-COUNT PAT)
                     (ACL2-COUNT PAT))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SEXPR-UNIFY)
              (ACL2-COUNT PAT)
            (ACL2-COUNT PAT))))
    ((EQUAL FLAG 'SEXPR-UNIFY)
     (NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR PAT))
           (ACL2-COUNT (CDR PAT)))
         (IF (EQUAL FLAG 'SEXPR-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT))))
    ((EQUAL FLAG 'SEXPR-UNIFY)
     (NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (O< (IF 'T
             (ACL2-COUNT (CAR PAT))
           (ACL2-COUNT (CAR PAT)))
         (IF (EQUAL FLAG 'SEXPR-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT))))
    ((NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (NOT (EQUAL (CAR PAT) (CAR TERM)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR PAT))
           (ACL2-COUNT (CDR PAT)))
         (IF (EQUAL FLAG 'SEXPR-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT)))))
   (SEXPR-UNIFY-FLAG 4 :SYSTEM
                     . "centaur/4v-sexpr/sexpr-rewrites")))
 ((JUSTIFICATION (PAT FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SIMPLE-ONE-WAY-UNIFY)
                      (ACL2-COUNT PAT)
                    (ACL2-COUNT PAT))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (PAT FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SIMPLE-ONE-WAY-UNIFY)
                       (ACL2-COUNT PAT)
                     (ACL2-COUNT PAT))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
              (ACL2-COUNT PAT)
            (ACL2-COUNT PAT))))
    ((EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
     (NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (O< (IF 'T
             (ACL2-COUNT (CAR PAT))
           (ACL2-COUNT (CAR PAT)))
         (IF (EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT))))
    ((EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
     (NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (NOT (MV-NTH '0
                  (TD-STUB-4 'SIMPLE-ONE-WAY-UNIFY
                             (CAR PAT)
                             (CAR TERM)
                             ALIST)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR PAT))
           (ACL2-COUNT (CDR PAT)))
         (IF (EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT))))
    ((NOT (EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY))
     (NOT (CONSP PAT))
     (NOT (CONSP TERM))
     (EQUAL (CAR PAT) 'QUOTE)
     (EQUAL (CAR TERM) 'QUOTE)
     (NOT (EQUAL (CAR PAT) (CAR TERM)))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR PAT))
           (ACL2-COUNT (CDR PAT)))
         (IF (EQUAL FLAG 'SIMPLE-ONE-WAY-UNIFY)
             (ACL2-COUNT PAT)
           (ACL2-COUNT PAT)))))
   (SIMPLE-ONE-WAY-UNIFY-FLAG 4 :SYSTEM
                              . "clause-processors/unify-subst")))
 ((JUSTIFICATION (X FLAG)
                 (NIL O-P . O<)
                 ((IF (EQL FLAG 'SIMPLE-FREE-VARS)
                      (ACL2-COUNT X)
                    (ACL2-COUNT X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X FLAG)
                  (NIL O-P . O<)
                  ((IF (EQL FLAG 'SIMPLE-FREE-VARS)
                       (ACL2-COUNT X)
                     (ACL2-COUNT X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (IF (EQUAL FLAG 'SIMPLE-FREE-VARS)
              (ACL2-COUNT X)
            (ACL2-COUNT X))))
    ((EQUAL FLAG 'SIMPLE-FREE-VARS)
     (NOT (CONSP X))
     (O< (IF 'T
             (ACL2-COUNT (CAR X))
           (ACL2-COUNT (CAR X)))
         (IF (EQUAL FLAG 'SIMPLE-FREE-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((EQUAL FLAG 'SIMPLE-FREE-VARS)
     (NOT (CONSP X))
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SIMPLE-FREE-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X))))
    ((NOT (CONSP X))
     (EQUAL (CAR X) 'QUOTE)
     (O< (IF 'NIL
             (ACL2-COUNT (CDR X))
           (ACL2-COUNT (CDR X)))
         (IF (EQUAL FLAG 'SIMPLE-FREE-VARS)
             (ACL2-COUNT X)
           (ACL2-COUNT X)))))
   (SIMPLE-FREE-VARS-FLAG 3 :SYSTEM
                          . "clause-processors/term-vars")))
 ((JUSTIFICATION (Y X)
                 (NIL O-P . O<)
                 ((SET::FAST-MEASURE X Y)
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (Y X)
                  (NIL O-P . O<)
                  ((SET::FAST-MEASURE X Y)
                   IF MV-LIST RETURN-LAST))
   (((O-P (SET::FAST-MEASURE X Y)))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (NOT (EQUAL (CAR X) (CAR Y)))
     (O< (SET::FAST-MEASURE (CDR X) (CDR Y))
         (SET::FAST-MEASURE X Y)))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (EQUAL (CAR X) (CAR Y))
     (NOT (<< (CAR X) (CAR Y)))
     (O< (SET::FAST-MEASURE (CDR X) Y)
         (SET::FAST-MEASURE X Y)))
    ((NOT (CONSP X))
     (NOT (CONSP Y))
     (EQUAL (CAR X) (CAR Y))
     (<< (CAR X) (CAR Y))
     (O< (SET::FAST-MEASURE X (CDR Y))
         (SET::FAST-MEASURE X Y))))
   (SET::FAST-UNION 3 :SYSTEM . "std/osets/top")))
 ((JUSTIFICATION (VL2014::X)
                 (NIL O-P . O<)
                 ((LEN (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (VL2014::X)
                  (NIL O-P . O<)
                  ((LEN (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X))
                   IF MV-LIST RETURN-LAST))
   (((O-P (LEN (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X))))
    ((NOT (CONSP (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X)))
     (O< (LEN (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE (CDR (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X))))
         (LEN (VL2014::VL-EXPR-VAL-ALIST-FIX$INLINE VL2014::X)))))
   (VL2014::VL-EXPR-VAL-ALIST-MAX-COUNT 1 :SYSTEM
                                        .
                                        "centaur/vl2014/transforms/expr-size")))
 ((JUSTIFICATION (ALIST MEASURE-FN)
                 (NIL LEXP . L<)
                 ((LEX-FIX (APPLY$ MEASURE-FN (CONS ALIST 'NIL)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (ALIST MEASURE-FN)
                  (NIL LEXP . L<)
                  ((LEX-FIX (APPLY$ MEASURE-FN (CONS ALIST 'NIL)))
                   IF MV-LIST RETURN-LAST))
   (((LEXP (LEX-FIX (APPLY$ MEASURE-FN (CONS ALIST 'NIL))))))
   (DO$ 6)))
 ((JUSTIFICATION (I MAXIMUM)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ MAXIMUM (UNARY-- I)))
                  . :ALL))
  ((JUSTIFICATION (I MAXIMUM)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ MAXIMUM (UNARY-- I)))
                   . :ALL))
   (((O-P (NFIX (BINARY-+ MAXIMUM (UNARY-- I)))))
    ((NOT (INTEGERP I))
     (NOT (INTEGERP MAXIMUM))
     (NOT (< I MAXIMUM))
     (NOT (MEMBER-EQUAL (CHAR S I)
                        '(#\Space #\Tab #\Newline)))
     (O< (NFIX (BINARY-+ MAXIMUM (UNARY-- (BINARY-+ I '1))))
         (NFIX (BINARY-+ MAXIMUM (UNARY-- I))))))
   (SCAN-PAST-WHITESPACE 3)))
 ((JUSTIFICATION (X)
                 (NIL O-P . O<)
                 ((ACL2-COUNT X)
                  IF :LAMBDAS MV-LIST RETURN-LAST))
  ((JUSTIFICATION (X)
                  (NIL O-P . O<)
                  ((ACL2-COUNT X)
                   IF :LAMBDAS MV-LIST RETURN-LAST))
   (((O-P (ACL2-COUNT X)))
    ((< MAXIMUM J)
     (NOT (CONSP X))
     (IF EVISCP (EQUAL (CAR X) ':EVISCERATION-MARK)
       'NIL)
     (CONSP (CDR X))
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X)))
    ((< MAXIMUM J)
     (NOT (CONSP X))
     (IF EVISCP (EQUAL (CAR X) ':EVISCERATION-MARK)
       'NIL)
     (NOT (CONSP (CDR X)))
     (IF (EQUAL (CAR X) 'QUOTE)
         (IF (CONSP (CDR X))
             (EQUAL (CDR (CDR X)) 'NIL)
           'NIL)
       'NIL)
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((< MAXIMUM J)
     (NOT (CONSP X))
     (IF EVISCP (EQUAL (CAR X) ':EVISCERATION-MARK)
       'NIL)
     (NOT (EQUAL (CAR X) 'QUOTE))
     (NOT (CONSP (CDR X)))
     (CDR (CDR X))
     (O< (ACL2-COUNT (CAR (CDR X)))
         (ACL2-COUNT X)))
    ((< MAXIMUM J)
     (NOT (CONSP X))
     (IF EVISCP (EQUAL (CAR X) ':EVISCERATION-MARK)
       'NIL)
     (CONSP (CDR X))
     (EQUAL (CDR X) 'NIL)
     (O< (ACL2-COUNT (CDR X))
         (ACL2-COUNT X)))
    ((< MAXIMUM J)
     (NOT (CONSP X))
     (IF EVISCP (EQUAL (CAR X) ':EVISCERATION-MARK)
       'NIL)
     (IF (EQUAL (CAR X) 'QUOTE)
         (IF (CONSP (CDR X))
             (EQUAL (CDR (CDR X)) 'NIL)
           'NIL)
       'NIL)
     (O< (ACL2-COUNT (CAR X))
         (ACL2-COUNT X))))
   (FLSZ1 7)))
 ((JUSTIFICATION (START END)
                 (NIL O-P . O<)
                 ((NFIX (BINARY-+ (BINARY-+ '1 END)
                                  (UNARY-- START)))
                  IF MV-LIST RETURN-LAST))
  ((JUSTIFICATION (START END)
                  (NIL O-P . O<)
                  ((NFIX (BINARY-+ (BINARY-+ '1 END)
                                   (UNARY-- START)))
                   IF MV-LIST RETURN-LAST))
   (((O-P (NFIX (BINARY-+ (BINARY-+ '1 END)
                          (UNARY-- START)))))
    ((NOT (INTEGERP START))
     (NOT (INTEGERP END))
     (NOT (< START END))
     (O< (NFIX (BINARY-+ (BINARY-+ '1 END)
                         (UNARY-- (BINARY-+ '1 START))))
         (NFIX (BINARY-+ (BINARY-+ '1 END)
                         (UNARY-- START))))))
   (COUNT-STRINGP 4)))))
)

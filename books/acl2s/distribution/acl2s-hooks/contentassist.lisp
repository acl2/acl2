#|$ACL2s-Preamble$;
(ld "acl2s-pkg.lsp")
(acl2::begin-book t);$ACL2s-Preamble$|#

(in-package #+acl2s "ACL2S-DEV" #-acl2s "ACL2S")

(set-state-ok t)

(defun string-prefix1 (string prefix prefixend)
  (declare (xargs :guard (and (stringp string)
			      (stringp prefix)
			      (natp prefixend)
			      (<= (length prefix) (length string))
			      (< prefixend (length prefix)))))
  (cond ((zp prefixend) (equal (char string 0) (char prefix 0)))
	((equal (char string prefixend) (char prefix prefixend)) (string-prefix1 string prefix (- prefixend 1)))
	(t nil)))

(defun string-prefix (string prefix)
  (declare (xargs :guard (and (stringp string)
			      (stringp prefix))))
  (cond ((< (length string) (length prefix)) nil)
	((equal 0 (length prefix)) t)
	(t (string-prefix1 string prefix (- (length prefix) 1)))))

(defun defun-list (lst prefix)
  (if (endp lst)
    nil
    (if (and (symbolp (caar lst))
             (eq (caar lst) 'defun)
             (string-prefix (symbol-name (cadar lst)) prefix))
        (cons (cadar lst) (defun-list (cdr lst) prefix))
      (defun-list (cdr lst) prefix))))

(defun symb-name-wrld (wrldelm symb prefix)
  (if (and (eq (cadr wrldelm) 'mutual-recursion)
           (eq symb 'defun))
    (defun-list (cddr wrldelm) prefix)
    (if (and (symbolp (car wrldelm))
             (eq (car wrldelm) symb)
             (string-prefix (symbol-name (cadr wrldelm)) prefix))
        (list (cadr wrldelm))
      nil)))

(defun events-with-prefix (prefx wrld symb)
  (declare (xargs :guard (and (stringp prefx) (plist-worldp wrld))
		  :verify-guards nil))
  (cond ((endp wrld) nil)
	((or (not (true-listp (car wrld))) (< (length (car wrld)) 4)) (events-with-prefix prefx (cdr wrld) symb))
	(t 
    (let ((etyp (caar wrld))
	  (prop (cadar wrld)))
         (cond ((and (eq etyp 'acl2::event-landmark)
                     (eq prop 'acl2::global-value)
                     (>= (length (car wrld)) 6))
                (let ((pm (symb-name-wrld (cdddr (car wrld)) symb prefx)))
                  (append pm (symb-name-wrld (cddddr (car wrld)) symb prefx)
                          (events-with-prefix prefx (cdr wrld) symb))))
		(t (events-with-prefix prefx (cdr wrld) symb)))))))

(defun constants-with-prefix (prefx wrld)
  (declare (xargs :guard (and (stringp prefx) (plist-worldp wrld))
		  :verify-guards nil))
  (cond ((endp wrld) nil)
	((or (not (true-listp (car wrld))) (< (length (car wrld)) 6)) (constants-with-prefix prefx (cdr wrld)))
	(t 
    (let ((etyp (caar wrld))
	  (prop (cadar wrld))
	  (body (cdddr (car wrld))))
         (cond ((and (eq etyp 'acl2::event-landmark)
                     (eq prop 'acl2::global-value)
		     (eq (car body) 'DEFCONST)
		     (symbolp (cadr body))
		     (string-prefix (symbol-name (cadr body)) prefx))
	          (cons (cadr body) (constants-with-prefix prefx (cdr wrld))))
		(t (constants-with-prefix prefx (cdr wrld))))))))
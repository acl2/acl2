
enum Format {HP, SP, DP};
enum Class {ZERO, INF, SNAN, QNAN, NORM, DENORM};

const ui2 rmodeNear = 0;
const ui2 rmodeUP = 1;
const ui2 rmodeDN = 2;
const ui2 rmodeZero = 3;
const uint IDC = 7;
const uint IXC = 4;
const uint UFC = 3;
const uint OFC = 2;
const uint DZC = 1;
const uint IOC = 0;

<bool, ui11, ui52, Class, ui8> analyze(ui64 op, Format fmt, bool fz, ui8 flags) {
  bool sign;
  ui11 exp;
  ui52 man, manMSB;
  bool expIsMax;
  switch (fmt) {
  case DP:
    sign = op[63];
    exp = op[62:52];
    expIsMax = exp == 0x7FF;
    man = op[51:0];
    manMSB = 0x8000000000000;
    break;
  case SP:
    sign = op[31];
    exp = op[30:23];
    expIsMax = exp == 0xFF;
    man = op[22:0];
    manMSB = 0x400000;
    break;
  case HP:
    sign = op[15];
    exp = op[14:10];
    expIsMax = exp == 0x1F;
    man = op[9:0];
    manMSB = 0x200;
  }
  Class c;
  if (expIsMax) {
    if (man == 0) {
      c = INF;
    }
    else if (man & manMSB) {
      c = QNAN;
    }
    else  {
      c = SNAN;
    }
  }
  else if (exp == 0) {
    if (man == 0) {
      c = ZERO;
    }
    else if (fz) {
      c = ZERO;
      if (fmt != HP) {
        flags[IDC] = 1;
      }
    }
    else  {
      c = DENORM;
    }
  }
  else  {
    c = NORM;
  }
  return <sign, exp, man, c, flags>;
}

<ui117, ui8, bool, bool, bool> specialCase(ui64 opa, ui64 opb, Class classa, Class classb, bool dn, bool fused, ui8 flags) {
  ui117 D = 0;
  ui64 zero = 0;
  zero[63] = opa[63] ^ opb[63];
  ui64 infinity = 0x7FF0000000000000 | zero;
  ui64 manMSB = 0x8000000000000;
  ui64 defNaN = 0x7FF8000000000000;
  bool prodInfZero = false;
  if (classa == SNAN) {
    D = dn ? defNaN : fused ? opa : opa | manMSB;
    flags[IOC] = 1;
  }
  else if (classb == SNAN) {
    D = dn ? defNaN : fused ? opb : opb | manMSB;
    flags[IOC] = 1;
  }
  else if (classa == QNAN) {
    D = dn ? defNaN : opa;
  }
  else if (classb == QNAN) {
    D = dn ? defNaN : opb;
  }
  else if (classa == INF && classb == ZERO || classb == INF && classa == ZERO) {
    D = defNaN;
    prodInfZero = true;
    flags[IOC] = 1;
  }
  else if (classa == INF || classb == INF) {
    D = infinity;
  }
  else if (classa == ZERO || classb == ZERO) {
    D = zero;
  }
  if (fused) {
    D <<= 53;
  }
  bool infNanZero = true, expGTinf = false;
  return <D, flags, prodInfZero, infNanZero, expGTinf>;
}

ui6 CLZ53(ui53 m) {
  ui64 x = 0;
  x[63:11] = m;
  bool z[64];
  ui6 c[64];
  for (uint i = 0; i < 64; i++) {
    z[i] = !x[i];
    c[i] = 0;
  }
  uint n = 64;
  for (uint k = 0; k < 6; k++) {
    n = n / 2;
    for (uint i = 0; i < n; i++) {
      c[i] = z[2 * i + 1] ? c[2 * i] : c[2 * i + 1];
      c[i][k] = z[2 * i + 1];
      z[i] = z[2 * i + 1] && z[2 * i];
    }
  }
  return c[0];
}

<ui106, ui106> compress(ui57 pp[27], ui52 ia, ui53 ib) {
  ui59 t0fa0ina, t0fa0inb, t0fa0inc, t2pp0s, t1pp0c;
  t0fa0ina = pp[0];
  t0fa0inb = pp[1];
  t0fa0inc = pp[2] << 2;
  t2pp0s = t0fa0ina ^ t0fa0inb ^ t0fa0inc;
  t1pp0c = t0fa0ina & t0fa0inb | t0fa0ina & t0fa0inc | t0fa0inb & t0fa0inc;
  ui61 t0fa1ina, t0fa1inb, t0fa1inc, t2pp1s, t1pp1c;
  t0fa1ina = pp[3];
  t0fa1inb = pp[4] << 2;
  t0fa1inc = pp[5] << 4;
  t2pp1s = t0fa1ina ^ t0fa1inb ^ t0fa1inc;
  t1pp1c = t0fa1ina & t0fa1inb | t0fa1ina & t0fa1inc | t0fa1inb & t0fa1inc;
  ui61 t0fa2ina, t0fa2inb, t0fa2inc, t2pp2s, t1pp2c;
  t0fa2ina = pp[6];
  t0fa2inb = pp[7] << 2;
  t0fa2inc = pp[8] << 4;
  t2pp2s = t0fa2ina ^ t0fa2inb ^ t0fa2inc;
  t1pp2c = t0fa2ina & t0fa2inb | t0fa2ina & t0fa2inc | t0fa2inb & t0fa2inc;
  ui61 t0fa3ina, t0fa3inb, t0fa3inc, t2pp3s, t1pp3c;
  t0fa3ina = pp[9];
  t0fa3inb = pp[10] << 2;
  t0fa3inc = pp[11] << 4;
  t2pp3s = t0fa3ina ^ t0fa3inb ^ t0fa3inc;
  t1pp3c = t0fa3ina & t0fa3inb | t0fa3ina & t0fa3inc | t0fa3inb & t0fa3inc;
  ui61 t0fa4ina, t0fa4inb, t0fa4inc, t2pp4s, t1pp4c;
  t0fa4ina = pp[12];
  t0fa4inb = pp[13] << 2;
  t0fa4inc = pp[14] << 4;
  t2pp4s = t0fa4ina ^ t0fa4inb ^ t0fa4inc;
  t1pp4c = t0fa4ina & t0fa4inb | t0fa4ina & t0fa4inc | t0fa4inb & t0fa4inc;
  ui61 t0fa5ina, t0fa5inb, t0fa5inc, t2pp5s, t1pp5c;
  t0fa5ina = pp[15];
  t0fa5inb = pp[16] << 2;
  t0fa5inc = pp[17] << 4;
  t2pp5s = t0fa5ina ^ t0fa5inb ^ t0fa5inc;
  t1pp5c = t0fa5ina & t0fa5inb | t0fa5ina & t0fa5inc | t0fa5inb & t0fa5inc;
  ui61 t0fa6ina, t0fa6inb, t0fa6inc, t2pp6s, t1pp6c;
  t0fa6ina = pp[18];
  t0fa6inb = pp[19] << 2;
  t0fa6inc = pp[20] << 4;
  t2pp6s = t0fa6ina ^ t0fa6inb ^ t0fa6inc;
  t1pp6c = t0fa6ina & t0fa6inb | t0fa6ina & t0fa6inc | t0fa6inb & t0fa6inc;
  ui61 t0fa7ina, t0fa7inb, t0fa7inc, t2pp7s, t1pp7c;
  t0fa7ina = pp[21];
  t0fa7inb = pp[22] << 2;
  t0fa7inc = pp[23] << 4;
  t2pp7s = t0fa7ina ^ t0fa7inb ^ t0fa7inc;
  t1pp7c = t0fa7ina & t0fa7inb | t0fa7ina & t0fa7inc | t0fa7inb & t0fa7inc;
  ui61 t0fa8ina, t0fa8inb, t0fa8inc, t2pp8s, t1pp8c;
  t0fa8ina = pp[24];
  t0fa8inb = pp[25] << 2;
  t0fa8inc = pp[26] << 4;
  t2pp8s = t0fa8ina ^ t0fa8inb ^ t0fa8inc;
  t1pp8c = t0fa8ina & t0fa8inb | t0fa8ina & t0fa8inc | t0fa8inb & t0fa8inc;
  ui71 t1fa0ina, t1fa0inb, t1fa0inc, t3pp0s, t2pp0c;
  t1fa0ina = t1pp0c;
  t1fa0inb = t1pp1c << 4;
  t1fa0inc = t1pp2c << 10;
  t3pp0s = t1fa0ina ^ t1fa0inb ^ t1fa0inc;
  t2pp0c = t1fa0ina & t1fa0inb | t1fa0ina & t1fa0inc | t1fa0inb & t1fa0inc;
  ui73 t1fa1ina, t1fa1inb, t1fa1inc, t3pp1s, t2pp1c;
  t1fa1ina = t1pp3c;
  t1fa1inb = t1pp4c << 6;
  t1fa1inc = t1pp5c << 12;
  t3pp1s = t1fa1ina ^ t1fa1inb ^ t1fa1inc;
  t2pp1c = t1fa1ina & t1fa1inb | t1fa1ina & t1fa1inc | t1fa1inb & t1fa1inc;
  ui73 t1fa2ina, t1fa2inb, t1fa2inc, t3pp2s, t2pp2c;
  t1fa2ina = t1pp6c;
  t1fa2inb = t1pp7c << 6;
  t1fa2inc = t1pp8c << 12;
  t3pp2s = t1fa2ina ^ t1fa2inb ^ t1fa2inc;
  t2pp2c = t1fa2ina & t1fa2inb | t1fa2ina & t1fa2inc | t1fa2inb & t1fa2inc;
  ui71 t2fa0ina, t2fa0inb, t2fa0inc, t4pp0s, t3pp0c;
  t2fa0ina = t2pp0s;
  t2fa0inb = t2pp1s << 4;
  t2fa0inc = t2pp2s << 10;
  t4pp0s = t2fa0ina ^ t2fa0inb ^ t2fa0inc;
  t3pp0c = t2fa0ina & t2fa0inb | t2fa0ina & t2fa0inc | t2fa0inb & t2fa0inc;
  ui73 t2fa1ina, t2fa1inb, t2fa1inc, t4pp1s, t3pp1c;
  t2fa1ina = t2pp3s;
  t2fa1inb = t2pp4s << 6;
  t2fa1inc = t2pp5s << 12;
  t4pp1s = t2fa1ina ^ t2fa1inb ^ t2fa1inc;
  t3pp1c = t2fa1ina & t2fa1inb | t2fa1ina & t2fa1inc | t2fa1inb & t2fa1inc;
  ui73 t2fa2ina, t2fa2inb, t2fa2inc, t4pp2s, t3pp2c;
  t2fa2ina = t2pp6s;
  t2fa2inb = t2pp7s << 6;
  t2fa2inc = t2pp8s << 12;
  t4pp2s = t2fa2ina ^ t2fa2inb ^ t2fa2inc;
  t3pp2c = t2fa2ina & t2fa2inb | t2fa2ina & t2fa2inc | t2fa2inb & t2fa2inc;
  ui107 t2fa3ina, t2fa3inb, t2fa3inc, t4pp3s, t3pp3c;
  t2fa3ina = t2pp0c;
  t2fa3inb = t2pp1c << 16;
  t2fa3inc = t2pp2c << 34;
  t4pp3s = t2fa3ina ^ t2fa3inb ^ t2fa3inc;
  t3pp3c = t2fa3ina & t2fa3inb | t2fa3ina & t2fa3inc | t2fa3inb & t2fa3inc;
  ui107 t3fa0ina, t3fa0inb, t3fa0inc, t5pp0s, t4pp0c;
  t3fa0ina = t3pp0s;
  t3fa0inb = t3pp1s << 16;
  t3fa0inc = t3pp2s << 34;
  t5pp0s = t3fa0ina ^ t3fa0inb ^ t3fa0inc;
  t4pp0c = t3fa0ina & t3fa0inb | t3fa0ina & t3fa0inc | t3fa0inb & t3fa0inc;
  ui107 t3fa1ina, t3fa1inb, t3fa1inc, t5pp1s, t4pp1c;
  t3fa1ina = t3pp0c;
  t3fa1inb = t3pp1c << 16;
  t3fa1inc = t3pp2c << 34;
  t5pp1s = t3fa1ina ^ t3fa1inb ^ t3fa1inc;
  t4pp1c = t3fa1ina & t3fa1inb | t3fa1ina & t3fa1inc | t3fa1inb & t3fa1inc;
  ui107 t3fa2ina, t3fa2inb, t3fa2inc, t4pp4s, t4pp2c;
  t3fa2ina = ia << 49;
  t3fa2inb = ib << 49;
  t3fa2inc = t3pp3c;
  t4pp4s = t3fa2ina ^ t3fa2inb ^ t3fa2inc;
  t4pp2c = t3fa2ina & t3fa2inb | t3fa2ina & t3fa2inc | t3fa2inb & t3fa2inc;
  ui109 t4fa0ina, t4fa0inb, t4fa0inc, t6pp0s, t5pp0c;
  t4fa0ina = t4pp2c << 2;
  t4fa0inb = t4pp1c;
  t4fa0inc = t4pp0c;
  t6pp0s = t4fa0ina ^ t4fa0inb ^ t4fa0inc;
  t5pp0c = t4fa0ina & t4fa0inb | t4fa0ina & t4fa0inc | t4fa0inb & t4fa0inc;
  ui110 t4fa1ina, t4fa1inb, t4fa1inc, t6pp1s, t5pp1c;
  t4fa1ina = t4pp4s << 3;
  t4fa1inb = t4pp0s;
  t4fa1inc = t4pp1s << 16;
  t6pp1s = t4fa1ina ^ t4fa1inb ^ t4fa1inc;
  t5pp1c = t4fa1ina & t4fa1inb | t4fa1ina & t4fa1inc | t4fa1inb & t4fa1inc;
  ui111 t5fa0ina, t5fa0inb, t5fa0inc, t7pp0s, t6pp0c;
  t5fa0ina = t5pp0s;
  t5fa0inb = t5pp1s;
  t5fa0inc = t5pp0c << 2;
  t7pp0s = t5fa0ina ^ t5fa0inb ^ t5fa0inc;
  t6pp0c = t5fa0ina & t5fa0inb | t5fa0ina & t5fa0inc | t5fa0inb & t5fa0inc;
  ui110 t5fa1ina, t5fa1inb, t5fa1inc, t6pp2s, t6pp1c;
  t5fa1ina = t4pp2s << 33;
  t5fa1inb = t4pp3s << 1;
  t5fa1inc = t5pp1c;
  t6pp2s = t5fa1ina ^ t5fa1inb ^ t5fa1inc;
  t6pp1c = t5fa1ina & t5fa1inb | t5fa1ina & t5fa1inc | t5fa1inb & t5fa1inc;
  ui111 t6fa0ina, t6fa0inb, t6fa0inc, t8pp0s, t7pp0c;
  t6fa0ina = t6pp0s << 2;
  t6fa0inb = t6pp1s;
  t6fa0inc = t6pp2s << 1;
  t8pp0s = t6fa0ina ^ t6fa0inb ^ t6fa0inc;
  t7pp0c = t6fa0ina & t6fa0inb | t6fa0ina & t6fa0inc | t6fa0inb & t6fa0inc;
  ui112 t7fa0ina, t7fa0inb, t7fa0inc, t9pp0s, t7pp1c;
  t7fa0ina = t7pp0s;
  t7fa0inb = t7pp0c;
  t7fa0inc = t6pp0c << 1;
  t9pp0s = t7fa0ina ^ t7fa0inb ^ t7fa0inc;
  t7pp1c = t7fa0ina & t7fa0inb | t7fa0ina & t7fa0inc | t7fa0inb & t7fa0inc;
  ui114 t8fa1ina, t8fa1inb, t8fa1inc, t9pp1s, t9pp0c;
  t8fa1ina = t7pp1c << 2;
  t8fa1inb = t6pp1c << 2;
  t8fa1inc = t8pp0s;
  t9pp1s = t8fa1ina ^ t8fa1inb ^ t8fa1inc;
  t9pp0c = t8fa1ina & t8fa1inb | t8fa1ina & t8fa1inc | t8fa1inb & t8fa1inc;
  ui115 t9fa1ina, t9fa1inb, t9fa1inc, t11pp0s, t10pp0c;
  t9fa1ina = t9pp0s << 1;
  t9fa1inb = t9pp1s;
  t9fa1inc = t9pp0c << 1;
  t11pp0s = t9fa1ina ^ t9fa1inb ^ t9fa1inc;
  t10pp0c = t9fa1ina & t9fa1inb | t9fa1ina & t9fa1inc | t9fa1inb & t9fa1inc;
  ui115 ppa = t11pp0s;
  ui116 ppb = t10pp0c << 1;
  return <ppa, ppb>;
}

ui106 computeProduct(ui52 mana, ui52 manb, bool expaZero, bool expbZero) {
  ui57 pp[27];
  ui55 multiplier = manb;
  multiplier <<= 1;
  for (uint i = 0; i < 27; i++) {
    ui3 slice = multiplier[2 * i + 2:2 * i];
    bool sign = slice[2], signLast = slice[0];
    int enc = slice[0] + slice[1] - 2 * slice[2];
    ui53 mux;
    switch (enc) {
    case 0:
      mux = 0;
      break;
    case 1:
    case -1:
      mux = mana;
      break;
    case 2:
    case -2:
      mux = mana << 1;
    }
    if (sign) {
      mux = ~mux;
    }
    if (i == 0) {
      pp[i][52:0] = mux;
      pp[i][53] = sign;
      pp[i][54] = sign;
      pp[i][55] = !sign;
      pp[i][56] = 0;
    }
    else  {
      pp[i][0] = signLast;
      pp[i][1] = 0;
      pp[i][54:2] = mux;
      pp[i][55] = !sign;
      pp[i][56] = i < 26;
    }
  }
  ui52 ia = expaZero ? 0 : manb;
  ui53 ib = expbZero ? 0 : mana;
  ib[52] = !expaZero && !expbZero;
  ui106 ppa, ppb;
  <ppa, ppb> = compress(pp, ia, ib);
  return ppa + ppb;
}

ui12 expInt(ui11 expBiased) {
  ui12 expInt;
  expInt[11] = !expBiased[10];
  expInt[10] = !expBiased[10];
  expInt[9:1] = expBiased[9:1];
  expInt[0] = expBiased[0] || expBiased == 0;
  return expInt;
}

<ui12, bool, ui105, bool, bool, bool, bool> rightShft(ui11 expa, ui11 expb, ui106 prod) {
  ui10 expDeficit = ~expa + ~expb + 1 + (expa != 0 && expb != 0);
  ui6 shift = expDeficit;
  if (expDeficit[9:6] != 0) {
    shift[5:1] = 31;
  }
  ui107 prod0 = 0;
  prod0[106:1] = prod;
  ui106 prodShft = prod0 >> shift;
  ui105 frac105 = prodShft[104:0];
  ui12 expShftInt = 0xC00;
  bool expInc = prod[105] && (shift == 1);
  ui63 stkMaskFMA = 0;
  for (uint i = 0; i < shift; i++) {
    stkMaskFMA[i] = 1;
  }
  bool stkFMA = (prod & (stkMaskFMA >> 1)) != 0;
  ui107 stkMask = 0xFFFFFFFFFFFFF;
  stkMask[106:52] = stkMaskFMA[54:0];
  bool stk = (prod & stkMask[106:1]) != 0;
  ui55 grdMask = ~stkMask[106:52] & stkMask[105:51];
  bool grd = (grdMask & prod[105:51]) != 0;
  ui54 lsbMask = grdMask[53:0];
  bool lsb = (lsbMask & prod[105:52]) != 0;
  return <expShftInt, expInc, frac105, stkFMA, lsb, grd, stk>;
}

<ui12, bool, ui105, bool, bool, bool, bool> leftShft(ui11 expa, ui11 expb, ui106 prod, ui6 clz) {
  ui12 expaInt = expInt(expa), expbInt = expInt(expb);
  ui12 expDiffInt = expaInt + expbInt - clz + 1;
  ui12 expProdM1Int = expaInt + expbInt;
  bool expDiffBiasedZero = expDiffInt == 0xC00;
  bool expDiffBiasedNeg = expDiffInt[11:10] == 2;
  bool expDiffBiasedPos = !expDiffBiasedZero && !expDiffBiasedNeg;
  ui6 shift = expDiffBiasedZero ? clz - 1 : expDiffBiasedPos ? clz : expProdM1Int;
  ui106 prodShft = prod << shift;
  ui12 expShftInt = expDiffBiasedPos ? expDiffInt : 0xC00;
  ui64 ovfMask = 0x8000000000000000 >> shift;
  bool mulOvf = (ovfMask & prod[105:42]) != 0;
  bool sub2Norm = ((ovfMask >> 1) & prod[104:42]) != 0;
  ui105 frac105 = prodShft[104:0];
  if (!mulOvf) {
    frac105 <<= 1;
  }
  bool expInc = mulOvf || expDiffBiasedZero && sub2Norm;
  ui52 stkMask = 0xFFFFFFFFFFFFF >> shift;
  bool stk = mulOvf ? (stkMask & prod) != 0 : ((stkMask >> 1) & prod) != 0;
  ui53 grdMask = ovfMask[63:11];
  bool grd = mulOvf ? (grdMask & prod) != 0 : ((grdMask >> 1) & prod) != 0;
  ui54 lsbMask = ovfMask[63:10];
  bool lsb = mulOvf ? (lsbMask & prod) != 0 : ((lsbMask >> 1) & prod) != 0;
  return <expShftInt, expInc, frac105, 0, lsb, grd, stk>;
}

<ui117, ui8, bool, bool, bool> fmul64(ui64 opa, ui64 opb, bool fz, bool dn, ui2 rmode, bool fused) {
  bool signa, signb;
  ui11 expa, expb;
  ui52 mana, manb;
  Class classa, classb;
  ui8 flags = 0;
  <signa, expa, mana, classa> = analyze(opa, DP, fz, flags);
  <signb, expb, manb, classb> = analyze(opb, DP, fz, flags);
  if (classa == ZERO || classa == INF || classa == SNAN || classa == QNAN || classb == ZERO || classb == INF || classb == SNAN || classb == QNAN) {
    return specialCase(opa, opb, classa, classb, dn, fused, flags);
  }
  else  {
    ui6 clz = 0;
    if (expa == 0) {
      clz |= CLZ53(mana);
    }
    if (expb == 0) {
      clz |= CLZ53(manb);
    }
    ui106 prod = computeProduct(mana, manb, expa == 0, expb == 0);
    ui12 expProdInt = expInt(expa) + expInt(expb) + 1;
    bool expBiasedZero = expProdInt == 0xC00;
    bool expBiasedNeg = expProdInt[11:10] == 2;
    ui12 expShftInt;
    bool expInc;
    ui105 frac105;
    bool stkFMA;
    bool lsb, grd, stk;
    if (expBiasedZero || expBiasedNeg) {
      <expShftInt, expInc, frac105, stkFMA> = rightShft(expa, expb, prod);
    }
    else  {
      <expShftInt, expInc, frac105, stkFMA> = leftShft(expa, expb, prod, clz);
    }
    bool expZero = expShftInt[11:0] == 0xC00;
    bool expMax = expShftInt[11:0] == 0x3FE;
    bool expInf = expShftInt[11:0] == 0x3FF;
    bool expGTinf = expShftInt[11:10] == 1;
    ui11 exp11 = expShftInt;
    exp11[10] = !exp11[10];
    bool sign = signa ^ signb;
    if (fused) {
      ui117 D;
      D[116] = sign;
      if (expInc && !expInf) {
        D[115:105] = exp11 + 1;
      }
      else  {
        D[115:105] = exp11;
      }
      D[104:0] = frac105;
      flags[IXC] = stkFMA;
      bool prodInfZero = false, infNanZero = false;
      bool expOvfl = expGTinf || expInf && expInc;
      return <D, flags, prodInfZero, infNanZero, expOvfl>;
    }
    else  {
      ui64 D = 0;
      D[63] = sign;
      bool rndUp = rmode == rmodeNear && grd && (lsb || stk) || rmode == rmodeUP && !sign && (grd || stk) || rmode == rmodeDN && sign && (grd || stk);
      ui52 fracUnrnd = frac105[104:53];
      ui53 fracP1 = fracUnrnd + 1;
      ui52 fracRnd = rndUp ? fracP1[51:0] : fracUnrnd;
      bool expRndInc = rndUp && fracP1[52];
      ui11 expRnd = expInc || expRndInc ? exp11 + 1 : exp11;
      bool underflow = expZero && !expInc;
      bool overflow = expGTinf || expInf || expMax && (expInc || expRndInc);
      if (overflow) {
        flags[IXC] = 1;
        flags[OFC] = 1;
        if (rmode == rmodeUP && sign || rmode == rmodeDN && !sign || rmode == rmodeZero) {
          D[62:0] = 0x7FEFFFFFFFFFFFFF;
        }
        else  {
          D[62:0] = 0x7FF0000000000000;
        }
      }
      else if (underflow) {
        if (fz) {
          flags[UFC] = 1;
        }
        else  {
          if (grd || stk) {
            flags[UFC] = 1;
            flags[IXC] = 1;
          }
          D[51:0] = fracRnd;
          D[62:52] = expRnd;
        }
      }
      else  {
        if (grd || stk) {
          flags[IXC] = 1;
        }
        D[51:0] = fracRnd;
        D[62:52] = expRnd;
      }
      return <D, flags, false, false, false>;
    }
  }
}


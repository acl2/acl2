# Dummy test to show available keys.
- name: no-checks
  description: "An example"

  # Optional values
  args:                            # default value: ['acl2'], if provided the
                                   # cpp wont be run.
  input: empty.cpp                 # default value: NAME.cpp
  should_report_error:             # default value: false
  ref_generated:                   # default value: NAME.ref.ast.lsp
  ref_stderr:                      # default value: NAME.ref.stderr
  ref_stdout:                      # default value: NAME.ref.stdout
  stderr_not_empty:                # default value: false, Instead of checking
                                   # the content of stderr, only check is
                                   # somethings was written.
  bug:                             # default value: false
  env:                             # Set all the variable given in the environement

  # By default all checks are enabled.
  disabled-checks:
    - should_report_error
    - stdout
    - stderr
    - generated_code

- name: rac-pseudo-code-option
  args: ['guards.cpp', '-rac']
  preprocess: "guards.cpp"
  disabled-checks:
    - generated_code

- name: missing-file
  args: ['missing-file.cpp', '-acl2']
  should_report_error: true
  disabled-checks:
    - generated_code

- name: basic

- name: help
  args: ['-help']
  disabled-checks:
    - generated_code

- name: empty
  should_report_error: true

- name: comment
- name: multiline-comment
- name: multiline-comment-inside-struct-def
  should_report_error: true

- name: unterminated-comment
  args: ['unterminated-comment.cpp']
  should_report_error: true

- name: error-bypass
  env: {RAC_BYPASS_ERROR: 'true'}

# Those tests are directly taken the RAC specification as decribed in the
# Chapter 15 of Formal verification of floating-point hardware design
#
- name: guards
- name: guards-2

- name: rac-in-comment-but-not-a-guard

- name: missing-guards-begin
  stderr_not_empty: true
  should_report_error: true
  ref_stdout: "Warning: no function definitions found, maybe you forgot the `// RAC begin` guard"
  ref_stderr: "missing-guards-begin.cpp:8: syntax error, unexpected $end"

- name: missing-guards-end
  bug: true
  description: "For now, program can compile without end guads"

- name: function-call
- name: function-missing
  should_report_error: true
- name: function-duplicate
  should_report_error: true

- name: recursive-call
  description: >
                Recursive function are illegal. But instead of failling on
                the call, the parser breaks on the declaration before defintion
                or on the recursive call: we can't call a function util it was
                been definied.
  should_report_error: true

- name: mutually-recursive-function
  description: Same as above (recursive-call)
  should_report_error: true

- name: tie
- name: tie-array
- name: tie-big-array

- name: tie-immediate
  bug: true
  should_report_error: true
  disabled-checks:
    - stderr
    - generated_code
  description: Syntax error, not very important.

- name: structured-binding-like
  should_report_error: true
  description: This looks like structured binding but in reality we are declaring
               two integers and try to assign a tuple to the last one.

- name: variable-decl
- name: multiple-variable-decl

- name: unknown-variable
  should_report_error: true

- name: empty-return
  should_report_error: true

- name: hello
  input: ../../../examples/hello.cpp

- name: imul-lsp
  args: ['../../../examples/imul/imul.cpp', '-acl2']
  preprocess: '../../../examples/imul/imul.cpp'
  out_generated: ../../../examples/imul/imul.cpp.ast.lsp
  ref_generated: imul-pc.cpp.ref.ast.lsp

- name: imul-pc
  args: ['../../../examples/imul/imul.cpp', '-rac']
  preprocess: '../../../examples/imul/imul.cpp'
  out_generated: ../../../examples/imul/imul.cpp.pc
  ref_generated: imul-pc.cpp.ref.pc

- name: variable-mix-upper-lower-case
  should_report_error: true

- name: variable-mix-upper-lower-case-2
  should_report_error: true

- name: variable-redeclaration
  should_report_error: true

- name: builtin

- name: function-param-duplicate
  should_report_error: true

- name: scope

- name: function-arity
  should_report_error: true

- name: function-params-type
  should_report_error: true

- name: disable-opt-disabled
  description: In this test the optimizations are kept (default).
  input: "disable_opt.cpp"

- name: disable-opt-enable
  input: "disable_opt.cpp"
  env: {RAC_DISABLE_OPTIMIZATIONS: 'true'}

- name: null-statement

- name: mv-deref
  description: Multiple value return types should be dereferenced for type-checking

- name: assign_as_function_parameter
  should_report_error: true
  description: Default values are not supported

- name: const_param

- name: variable-not-initialized
  should_report_error: true

- name: var-mismatch-case
  should_report_error: true

- name: very-long-error
  should_report_error: true

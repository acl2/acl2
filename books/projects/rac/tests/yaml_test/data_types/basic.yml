- name: basic-types
- name: literals
- name: basic-types-upcast

- name: basic-types-downcast

- name: c-cast
- name: functional-cast

- name: pointers
  should_report_error: true

- name: references
  should_report_error: true

- name: c-array-local
- name: c-array-as-parameter
  stderr_not_empty: true
  should_report_error: true

- name: std-array
- name: std-array-neg-size
  should_report_error: true

- name: std-tupple
- name: std-tupple-big

- name: std-tupple-too-big

- name: std-tupple-init-not-enought-args
  should_report_error: true

- name: typedef-basic
- name: typedef-ac
- name: typedef-array

- name: typedef-c-array
- name: c-array-as-parameter-typedef
  should_report_error: true

- name: typedef-c-array-neg
  should_report_error: true


- name: typedef-redeclaration
  should_report_error: true

- name: enum 

- name: enum-default-values

- name: struct
- name: annonymous-struct
- name: annonymous-struct-in-array
  bug: true
  description: Anonymous struct cannot be defined in a type specifier.
  disabled-checks:
    - generated_code

- name: annonymous-enum
  bug: true
  description: >
               Uselless since we can't access the named value of the annonymous
               (in this case, S::a)
  disabled-checks:
    - generated_code

- name: global-constant
- name: global-constant-enum
- name: multiple-global-constant

- name: global-constant-redeclaration
  should_report_error: true
  disabled-checks:
    - generated_code

- name: global-mutable
  should_report_error: true

- name: initializer-list
- name: std-array-initializer-diff-size
- name: std-array-initializer-incomplete

- name: overflow

- name: invalid-cast
  should_report_error: true

- name: initializer-list-tuple

- name: initializer-list-nested-array
  should_report_error: true
  bug: true

- name: initializer-list-mismatch-types
  env: {RAC_BYPASS_ERROR: 'true'}
  disabled-checks:
    - generated_code

- name: const-assign
  should_report_error: true
